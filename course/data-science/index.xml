<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Data Science with Python | Matteo Courthoud</title>
    <link>https://matteocourthoud.github.io/course/data-science/</link>
      <atom:link href="https://matteocourthoud.github.io/course/data-science/index.xml" rel="self" type="application/rss+xml" />
    <description>Data Science with Python</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>Theme edited by Matteo CourthoudÂ© - Want to have a similar website? [Guide here](https://matteocourthoud.github.io/post/website/).</copyright><lastBuildDate>Fri, 01 Oct 2021 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://matteocourthoud.github.io/media/icon_hu03e9b3967b83fd39296ec9da5ff1ea05_201175_512x512_fill_lanczos_center_3.png</url>
      <title>Data Science with Python</title>
      <link>https://matteocourthoud.github.io/course/data-science/</link>
    </image>
    
    <item>
      <title>Data Structures</title>
      <link>https://matteocourthoud.github.io/course/data-science/01_data_structures/</link>
      <pubDate>Sun, 01 May 2022 00:00:00 +0000</pubDate>
      <guid>https://matteocourthoud.github.io/course/data-science/01_data_structures/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np
import pandas as pd
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For most of this course we are going to work with &lt;code&gt;pandas&lt;/code&gt; DataFrames. However, it&amp;rsquo;s important to start with an introduction to the different types of data structures available in Python, their characteristics, their differences and their comparative advantages.&lt;/p&gt;
&lt;p&gt;The most important data structures in Python are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;lists&lt;/li&gt;
&lt;li&gt;tuples&lt;/li&gt;
&lt;li&gt;sets&lt;/li&gt;
&lt;li&gt;dictionaries&lt;/li&gt;
&lt;li&gt;numpy arrays&lt;/li&gt;
&lt;li&gt;pandas DataFrames&lt;/li&gt;
&lt;li&gt;pyspark DataFrames&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;lists&#34;&gt;Lists&lt;/h2&gt;
&lt;p&gt;A &lt;strong&gt;list&lt;/strong&gt; is a mutable array data structure in Python with the following characteristics:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;can hold any type of data&lt;/li&gt;
&lt;li&gt;can hold different types of data at the same time&lt;/li&gt;
&lt;li&gt;can be modified&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can &lt;strong&gt;generate&lt;/strong&gt; lists using square brackets.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;l = [12, &amp;quot;world&amp;quot;, [3,4,5]]
print(l)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[12, &#39;world&#39;, [3, 4, 5]]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since lists are &lt;em&gt;ordered&lt;/em&gt;, we can &lt;strong&gt;access&lt;/strong&gt; their element by calling the position of the element in the list.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;l[0]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;12
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since lists are &lt;em&gt;mutable&lt;/em&gt;, we can &lt;strong&gt;modify&lt;/strong&gt; their elements.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;l[0] = &#39;hello&#39;
print(l)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;hello&#39;, &#39;world&#39;, [3, 4, 5]]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can &lt;strong&gt;add&lt;/strong&gt; elements to a list using &lt;code&gt;.append()&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;l.append(23)
l
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;hello&#39;, &#39;world&#39;, [3, 4, 5], 23]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can &lt;strong&gt;remove&lt;/strong&gt; elements by calling &lt;code&gt;del&lt;/code&gt; on it.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;del l[0]
print(l)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;world&#39;, [3, 4, 5], 23]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can &lt;strong&gt;combine&lt;/strong&gt; two lists using &lt;code&gt;+&lt;/code&gt;. Note that this operation does not modify the list but generates a new one.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;l + [23]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;world&#39;, [3, 4, 5], 23, 23]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can also generate lists using &lt;strong&gt;comprehensions&lt;/strong&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;l = [n for n in range(3)]
print(l)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[0, 1, 2]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Comprehensions are a powerful tool!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;l = [n+10 for n in range(10) if (n%2==0) and (n&amp;gt;4)]
print(l)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[16, 18]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;tuples&#34;&gt;Tuples&lt;/h2&gt;
&lt;p&gt;A &lt;strong&gt;tuple&lt;/strong&gt; is an immutable array data structure in Python with the following characteristics:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;can hold any type of data&lt;/li&gt;
&lt;li&gt;can hold different types of data at the same time&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;can not be modified&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can &lt;strong&gt;generate&lt;/strong&gt; tuples using curve brackets.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# A list of different data types
t = (12, &amp;quot;world&amp;quot;, [3,4,5])
print(t)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;(12, &#39;world&#39;, [3, 4, 5])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since tuples are &lt;em&gt;ordered&lt;/em&gt;, we can &lt;strong&gt;access&lt;/strong&gt; their element by calling the position of the element in the list.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;t[0]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;12
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since tuples are &lt;em&gt;unmutable&lt;/em&gt;, we cannot &lt;strong&gt;modify&lt;/strong&gt; their elements.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Try to modify element
try:
    t[0] = &#39;hello&#39;
except Exception as e:
    print(e)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;tuple&#39; object does not support item assignment
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Try to add element
try:
    t.append(&#39;hello&#39;)
except Exception as e:
    print(e)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;tuple&#39; object has no attribute &#39;append&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Try to remove element
try:
    del t[0]
except Exception as e:
    print(e)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;tuple&#39; object doesn&#39;t support item deletion
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can &lt;strong&gt;combine&lt;/strong&gt; two tuples using &lt;code&gt;+&lt;/code&gt;. Note that this operation does not modify the tuple but generates a new one. Also note that to generate a 1-element tuple we need to insert a comma.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;t + (23,)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;(12, &#39;world&#39;, [3, 4, 5], 23)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can generate tuples using &lt;strong&gt;comprehensions&lt;/strong&gt;, but we need to specify it&amp;rsquo;s a &lt;code&gt;tuple&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;t = tuple(n for n in range(3))
print(t)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;(0, 1, 2)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;sets&#34;&gt;Sets&lt;/h2&gt;
&lt;p&gt;A &lt;strong&gt;set&lt;/strong&gt; is a mutable array data structure in Python with the following characteristics:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;can only hold hashable types&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;can hold different types of data at the same time&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;cannot be modified&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;cannot contain duplicates&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can &lt;strong&gt;generate&lt;/strong&gt; using curly brackets.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;s = {12, &amp;quot;world&amp;quot;, (3,4,5)}
print(s)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;{(3, 4, 5), 12, &#39;world&#39;}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since sets are &lt;em&gt;unordered&lt;/em&gt; and &lt;em&gt;unindexed&lt;/em&gt;, we cannot &lt;strong&gt;access&lt;/strong&gt; single elements by calling their position.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Try to access element by position
try:
    s[0]
except Exception as e:
    print(e)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;set&#39; object is not subscriptable
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since sets are &lt;em&gt;unordered&lt;/em&gt;, we cannot &lt;strong&gt;modify&lt;/strong&gt; their elements by specifying the position.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Try to modify element
try:
    s[0] = &#39;hello&#39;
except Exception as e:
    print(e)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;set&#39; object does not support item assignment
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, since sets are &lt;em&gt;mutable&lt;/em&gt;, we can &lt;strong&gt;add&lt;/strong&gt; elements using &lt;code&gt;.add()&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;s.add(&#39;hello&#39;)
print(s)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;{&#39;hello&#39;, (3, 4, 5), 12, &#39;world&#39;}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, we cannot add &lt;strong&gt;duplicates&lt;/strong&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;s.add(&#39;hello&#39;)
print(s)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;{&#39;hello&#39;, (3, 4, 5), 12, &#39;world&#39;}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can &lt;strong&gt;delete&lt;/strong&gt; elements of a set using &lt;code&gt;.remove()&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;s.remove(&#39;hello&#39;)
print(s)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;{(3, 4, 5), 12, &#39;world&#39;}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can also generate sets using &lt;strong&gt;comprehensions&lt;/strong&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;s = {n for n in range(3)}
print(s)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;{0, 1, 2}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;dictionaries&#34;&gt;Dictionaries&lt;/h2&gt;
&lt;p&gt;A &lt;strong&gt;dictionary&lt;/strong&gt; is a mutable array data structure in Python with the following characteristics:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;can hold any type&lt;/li&gt;
&lt;li&gt;can hold different types at the same time&lt;/li&gt;
&lt;li&gt;can be modified&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;items are named&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can &lt;strong&gt;generate&lt;/strong&gt; dictionaries using curly brackets. Since elements are indexed by keys, we have to provide one for each element.&lt;/p&gt;
&lt;p&gt;Dictionary keys can be of any &lt;strong&gt;hashable type&lt;/strong&gt;. A hashable object has a hash value that never changes during its lifetime, and it can be compared to other objects. Hashable objects that compare as equal must have the same hash value.&lt;/p&gt;
&lt;p&gt;Immutable types like strings and numbers are hashable and work well as dictionary keys. You can also use tuple objects as dictionary keys as long as they contain only hashable types themselves.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;d = {&amp;quot;first&amp;quot;: 12, 2: &amp;quot;world&amp;quot;, (3,): [3,4,5]}
print(d)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;{&#39;first&#39;: 12, 2: &#39;world&#39;, (3,): [3, 4, 5]}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since dictionaries are indexed but not ordered, we can only &lt;strong&gt;access&lt;/strong&gt; elements by the corresponding key. If the corresponding key does not exist, we do not access any element.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;try:
    d[0]
except Exception as e:
    print(e)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can &lt;strong&gt;access all values&lt;/strong&gt; of the dictionary using &lt;code&gt;.values()&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;d.values()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;dict_values([12, &#39;world&#39;, [3, 4, 5]])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can &lt;strong&gt;access all keys&lt;/strong&gt; of the dictionary using &lt;code&gt;.keys()&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;d.keys()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;dict_keys([&#39;first&#39;, 2, (3,)])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can &lt;strong&gt;access both values and keys&lt;/strong&gt; using &lt;code&gt;.items()&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;d.items()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;dict_items([(&#39;first&#39;, 12), (2, &#39;world&#39;), ((3,), [3, 4, 5])])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This gives us a list of tuples which we can iterate on.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;[f&amp;quot;{key}: {value}&amp;quot; for key, value in d.items()]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;first: 12&#39;, &#39;2: world&#39;, &#39;(3,): [3, 4, 5]&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since dictionaries are mutable, we can &lt;strong&gt;modify&lt;/strong&gt; their elements.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;d[&amp;quot;first&amp;quot;] = &#39;hello&#39;
print(d)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;{&#39;first&#39;: &#39;hello&#39;, 2: &#39;world&#39;, (3,): [3, 4, 5]}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we try to modify an element that does not exist, the element is added to the dictionary.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;d[0] = &#39;hello&#39;
print(d)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;{&#39;first&#39;: &#39;hello&#39;, 2: &#39;world&#39;, (3,): [3, 4, 5], 0: &#39;hello&#39;}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can &lt;strong&gt;remove&lt;/strong&gt; elements using &lt;code&gt;del&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;del d[0]
print(d)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;{&#39;first&#39;: &#39;hello&#39;, 2: &#39;world&#39;, (3,): [3, 4, 5]}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can cannot &lt;strong&gt;combine&lt;/strong&gt; two dictionaries using &lt;code&gt;+&lt;/code&gt;. We can only add one element at the time.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;try:
    d + {&amp;quot;fourth&amp;quot;: (1,2)}
except Exception as e:
    print(e)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;unsupported operand type(s) for +: &#39;dict&#39; and &#39;dict&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can also generate dictionaries using &lt;strong&gt;comprehensions&lt;/strong&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;d = {f&amp;quot;k{n}&amp;quot;: n+1 for n in range(3)}
print(d)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;{&#39;k0&#39;: 1, &#39;k1&#39;: 2, &#39;k2&#39;: 3}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;numpy-arrays&#34;&gt;Numpy Arrays&lt;/h2&gt;
&lt;p&gt;A &lt;strong&gt;numpy array&lt;/strong&gt; is a mutable array data structure in Python with the following characteristics:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;can hold any type of data&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;can only hold one type at the same time&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;can be modified&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;can be multi-dimensional&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;support matrix operations&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can &lt;strong&gt;generate&lt;/strong&gt; numpy arrays are generated the &lt;code&gt;np.array()&lt;/code&gt; function on a list.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a = np.array([1,2,3])
print(a)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1 2 3]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can make 2-dimensional arrays (a matrix) as lists of lists.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;m = np.array([[1,2,3] , [4,5,6]])
print(m)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[[1 2 3]
 [4 5 6]]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since numpy arrays are mutable, we can &lt;strong&gt;modify&lt;/strong&gt; elements by calling the index of the numpy array.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;m[0,0] = 89
print(m)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[[89  2  3]
 [ 4  5  6]]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can check the &lt;strong&gt;shape&lt;/strong&gt; of a numpy array using &lt;code&gt;.shape&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;m.shape
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;(2, 3)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can &lt;strong&gt;expand dimensions&lt;/strong&gt; of a numpy array using &lt;code&gt;.expand_dims()&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a = np.expand_dims(a,1)
print(a)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[[1]
 [2]
 [3]]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can &lt;strong&gt;transpose&lt;/strong&gt; matrices using &lt;code&gt;.T&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a = a.T
print(a)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[[1 2 3]]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We &lt;strong&gt;add&lt;/strong&gt; elements to a numpy array using &lt;code&gt;np.concatenate()&lt;/code&gt;. All elements must have the same number of dimensions and must have the same number of elements along the concatenation axis.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;m = np.concatenate((m, a), axis=0)
print(m)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[[89  2  3]
 [ 4  5  6]
 [ 1  2  3]]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We cannot &lt;strong&gt;remove&lt;/strong&gt; elements of numpy arrays.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;try:
    del a[0]
except Exception as e:
    print(e)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;cannot delete array elements
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can do &lt;strong&gt;matrix operations&lt;/strong&gt; between numpy arrays. For example, we can do multiplication with &lt;code&gt;@&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a @ m
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[100,  18,  24]])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we use &lt;code&gt;*&lt;/code&gt; we get dot (or element-wise) multiplication instead.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a * m
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[89,  4,  9],
       [ 4, 10, 18],
       [ 1,  4,  9]])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There is a wide array of functions available in numpy. For example &lt;code&gt;np.invert()&lt;/code&gt; inverts a squared matrix.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.invert(m)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[-90,  -3,  -4],
       [ -5,  -6,  -7],
       [ -2,  -3,  -4]])
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;comparison&#34;&gt;Comparison&lt;/h2&gt;
&lt;p&gt;Which data structure should you use and why? Let&amp;rsquo;s compare different data types&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;K = 100_000
l = [n for n in range(K)]
t = tuple(n for n in range(K))
s = {n for n in range(K)}
a = np.array([n for n in range(K)])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Size&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Which data type is more efficient?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import sys

def compare_size(list_objects):
    for o in list_objects:
        print(f&amp;quot;Size of {type(o)}: {sys.getsizeof(o)}&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;compare_size([l, t, s, a])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Size of &amp;lt;class &#39;list&#39;&amp;gt;: 800984
Size of &amp;lt;class &#39;tuple&#39;&amp;gt;: 800040
Size of &amp;lt;class &#39;set&#39;&amp;gt;: 4194520
Size of &amp;lt;class &#39;numpy.ndarray&#39;&amp;gt;: 800104
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Size is very similar for lists, tuples and numpy arrays.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Speed&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Which data type is faster?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import time

def compare_time(list_objects):
    for o in list_objects:
        start = time.time()
        [x**2 for x in o]
        end = time.time()
        print(f&amp;quot;Time of {type(o)}: {end - start}&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;compare_time([l, t, s, a])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Time of &amp;lt;class &#39;list&#39;&amp;gt;: 0.021067142486572266
Time of &amp;lt;class &#39;tuple&#39;&amp;gt;: 0.02071404457092285
Time of &amp;lt;class &#39;set&#39;&amp;gt;: 0.021012067794799805
Time of &amp;lt;class &#39;numpy.ndarray&#39;&amp;gt;: 0.010493993759155273
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Numpy arrays are faster at math operations.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Data Exploration</title>
      <link>https://matteocourthoud.github.io/course/data-science/02_data_exploration/</link>
      <pubDate>Sun, 01 May 2022 00:00:00 +0000</pubDate>
      <guid>https://matteocourthoud.github.io/course/data-science/02_data_exploration/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np
import pandas as pd
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;setup&#34;&gt;Setup&lt;/h2&gt;
&lt;p&gt;For the scope of this tutorial we are going to use AirBnb Scraped data for the city of Bologna. The data is freely available at &lt;strong&gt;Inside AirBnb&lt;/strong&gt;: &lt;a href=&#34;http://insideairbnb.com/get-the-data.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://insideairbnb.com/get-the-data.html&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A description of all variables in all datasets is avaliable &lt;a href=&#34;https://docs.google.com/spreadsheets/d/1iWCNJcSutYqpULSQHlNyGInUvHg2BoUGoNRIGa6Szc4/edit#gid=982310896&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We are going to use 2 datasets:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;listing dataset: contains listing-level information&lt;/li&gt;
&lt;li&gt;pricing dataset: contains pricing data, over time&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;importing-data&#34;&gt;Importing Data&lt;/h2&gt;
&lt;p&gt;Pandas has a variety of function to import data&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pd.read_csv()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pd.read_html()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pd.read_parquet()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Importatly for our purpose, &lt;code&gt;pd.read_csv()&lt;/code&gt; can directly import data from the web.&lt;/p&gt;
&lt;p&gt;The first dataset that we are going to import is the dataset of Airbnb listings in Bologna. It contains listing-level information.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;url_listings = &amp;quot;http://data.insideairbnb.com/italy/emilia-romagna/bologna/2021-12-17/visualisations/listings.csv&amp;quot;
df_listings = pd.read_csv(url_listings)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The second dataset that we are going to use is the dataset of calendar prices. This time the dataset is compressed but we can use the &lt;code&gt;compression&lt;/code&gt; option to import it directly.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;url_prices = &amp;quot;http://data.insideairbnb.com/italy/emilia-romagna/bologna/2021-12-17/data/calendar.csv.gz&amp;quot;
df_prices = pd.read_csv(url_prices, compression=&amp;quot;gzip&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;inspecting-data&#34;&gt;Inspecting Data&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Methods&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;info()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;head()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;describe()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;The first way yo have a quick look at the data is the &lt;code&gt;info()&lt;/code&gt; method. If called with the option &lt;code&gt;verbose=False&lt;/code&gt;, it gives a quick overview of the dimensions of the data.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_listings.info(verbose=False)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;class &#39;pandas.core.frame.DataFrame&#39;&amp;gt;
RangeIndex: 3453 entries, 0 to 3452
Columns: 18 entries, id to license
dtypes: float64(4), int64(8), object(6)
memory usage: 485.7+ KB
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we want to know how the data looks like, we can use the &lt;code&gt;head()&lt;/code&gt; method. It prints the first 5 lines of the data by default.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_listings.head()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;id&lt;/th&gt;
      &lt;th&gt;name&lt;/th&gt;
      &lt;th&gt;host_id&lt;/th&gt;
      &lt;th&gt;host_name&lt;/th&gt;
      &lt;th&gt;neighbourhood_group&lt;/th&gt;
      &lt;th&gt;neighbourhood&lt;/th&gt;
      &lt;th&gt;latitude&lt;/th&gt;
      &lt;th&gt;longitude&lt;/th&gt;
      &lt;th&gt;room_type&lt;/th&gt;
      &lt;th&gt;price&lt;/th&gt;
      &lt;th&gt;minimum_nights&lt;/th&gt;
      &lt;th&gt;number_of_reviews&lt;/th&gt;
      &lt;th&gt;last_review&lt;/th&gt;
      &lt;th&gt;reviews_per_month&lt;/th&gt;
      &lt;th&gt;calculated_host_listings_count&lt;/th&gt;
      &lt;th&gt;availability_365&lt;/th&gt;
      &lt;th&gt;number_of_reviews_ltm&lt;/th&gt;
      &lt;th&gt;license&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;42196&lt;/td&gt;
      &lt;td&gt;50 sm Studio in the historic centre&lt;/td&gt;
      &lt;td&gt;184487&lt;/td&gt;
      &lt;td&gt;Carlo&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;Santo Stefano&lt;/td&gt;
      &lt;td&gt;44.48507&lt;/td&gt;
      &lt;td&gt;11.34786&lt;/td&gt;
      &lt;td&gt;Entire home/apt&lt;/td&gt;
      &lt;td&gt;68&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;180&lt;/td&gt;
      &lt;td&gt;2021-11-12&lt;/td&gt;
      &lt;td&gt;1.32&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;161&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;46352&lt;/td&gt;
      &lt;td&gt;A room in Pasolini&#39;s house&lt;/td&gt;
      &lt;td&gt;467810&lt;/td&gt;
      &lt;td&gt;Eleonora&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;Porto - Saragozza&lt;/td&gt;
      &lt;td&gt;44.49168&lt;/td&gt;
      &lt;td&gt;11.33514&lt;/td&gt;
      &lt;td&gt;Private room&lt;/td&gt;
      &lt;td&gt;29&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;300&lt;/td&gt;
      &lt;td&gt;2021-11-30&lt;/td&gt;
      &lt;td&gt;2.20&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;248&lt;/td&gt;
      &lt;td&gt;37&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;59697&lt;/td&gt;
      &lt;td&gt;COZY LARGE BEDROOM in the city center&lt;/td&gt;
      &lt;td&gt;286688&lt;/td&gt;
      &lt;td&gt;Paolo&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;Santo Stefano&lt;/td&gt;
      &lt;td&gt;44.48817&lt;/td&gt;
      &lt;td&gt;11.34124&lt;/td&gt;
      &lt;td&gt;Private room&lt;/td&gt;
      &lt;td&gt;50&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;240&lt;/td&gt;
      &lt;td&gt;2020-10-04&lt;/td&gt;
      &lt;td&gt;2.18&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;327&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;85368&lt;/td&gt;
      &lt;td&gt;Garden House Bologna&lt;/td&gt;
      &lt;td&gt;467675&lt;/td&gt;
      &lt;td&gt;Anna Maria&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;Santo Stefano&lt;/td&gt;
      &lt;td&gt;44.47834&lt;/td&gt;
      &lt;td&gt;11.35672&lt;/td&gt;
      &lt;td&gt;Entire home/apt&lt;/td&gt;
      &lt;td&gt;126&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;40&lt;/td&gt;
      &lt;td&gt;2019-11-03&lt;/td&gt;
      &lt;td&gt;0.34&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;332&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;145779&lt;/td&gt;
      &lt;td&gt;SINGLE ROOM&lt;/td&gt;
      &lt;td&gt;705535&lt;/td&gt;
      &lt;td&gt;Valerio&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;Porto - Saragozza&lt;/td&gt;
      &lt;td&gt;44.49306&lt;/td&gt;
      &lt;td&gt;11.33786&lt;/td&gt;
      &lt;td&gt;Private room&lt;/td&gt;
      &lt;td&gt;50&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;69&lt;/td&gt;
      &lt;td&gt;2021-12-05&lt;/td&gt;
      &lt;td&gt;0.55&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;365&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;We can print a description of the data using &lt;code&gt;describe()&lt;/code&gt;. If we have many variables, it&amp;rsquo;s best to print it transposed using the &lt;code&gt;.T&lt;/code&gt; attribute.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_listings.describe().T[:5]
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;count&lt;/th&gt;
      &lt;th&gt;mean&lt;/th&gt;
      &lt;th&gt;std&lt;/th&gt;
      &lt;th&gt;min&lt;/th&gt;
      &lt;th&gt;25%&lt;/th&gt;
      &lt;th&gt;50%&lt;/th&gt;
      &lt;th&gt;75%&lt;/th&gt;
      &lt;th&gt;max&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;id&lt;/th&gt;
      &lt;td&gt;3453.0&lt;/td&gt;
      &lt;td&gt;2.950218e+07&lt;/td&gt;
      &lt;td&gt;1.523988e+07&lt;/td&gt;
      &lt;td&gt;42196.0000&lt;/td&gt;
      &lt;td&gt;1.748597e+07&lt;/td&gt;
      &lt;td&gt;3.078707e+07&lt;/td&gt;
      &lt;td&gt;4.220094e+07&lt;/td&gt;
      &lt;td&gt;5.385496e+07&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;host_id&lt;/th&gt;
      &lt;td&gt;3453.0&lt;/td&gt;
      &lt;td&gt;1.236424e+08&lt;/td&gt;
      &lt;td&gt;1.160756e+08&lt;/td&gt;
      &lt;td&gt;38468.0000&lt;/td&gt;
      &lt;td&gt;2.550007e+07&lt;/td&gt;
      &lt;td&gt;8.845438e+07&lt;/td&gt;
      &lt;td&gt;2.005926e+08&lt;/td&gt;
      &lt;td&gt;4.354316e+08&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;neighbourhood_group&lt;/th&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;latitude&lt;/th&gt;
      &lt;td&gt;3453.0&lt;/td&gt;
      &lt;td&gt;4.449756e+01&lt;/td&gt;
      &lt;td&gt;1.173569e-02&lt;/td&gt;
      &lt;td&gt;44.4236&lt;/td&gt;
      &lt;td&gt;4.449186e+01&lt;/td&gt;
      &lt;td&gt;4.449699e+01&lt;/td&gt;
      &lt;td&gt;4.450271e+01&lt;/td&gt;
      &lt;td&gt;4.455093e+01&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;longitude&lt;/th&gt;
      &lt;td&gt;3453.0&lt;/td&gt;
      &lt;td&gt;1.134509e+01&lt;/td&gt;
      &lt;td&gt;1.986071e-02&lt;/td&gt;
      &lt;td&gt;11.2320&lt;/td&gt;
      &lt;td&gt;1.133732e+01&lt;/td&gt;
      &lt;td&gt;1.134519e+01&lt;/td&gt;
      &lt;td&gt;1.135406e+01&lt;/td&gt;
      &lt;td&gt;1.142027e+01&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;You can select which variables to display using the &lt;code&gt;include&lt;/code&gt; option. &lt;code&gt;include=&#39;all&#39;&lt;/code&gt; includes also categorical variables.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_listings.describe(include=&#39;all&#39;).T[:5]
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;count&lt;/th&gt;
      &lt;th&gt;unique&lt;/th&gt;
      &lt;th&gt;top&lt;/th&gt;
      &lt;th&gt;freq&lt;/th&gt;
      &lt;th&gt;mean&lt;/th&gt;
      &lt;th&gt;std&lt;/th&gt;
      &lt;th&gt;min&lt;/th&gt;
      &lt;th&gt;25%&lt;/th&gt;
      &lt;th&gt;50%&lt;/th&gt;
      &lt;th&gt;75%&lt;/th&gt;
      &lt;th&gt;max&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;id&lt;/th&gt;
      &lt;td&gt;3453.0&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;29502177.118158&lt;/td&gt;
      &lt;td&gt;15239877.346777&lt;/td&gt;
      &lt;td&gt;42196.0&lt;/td&gt;
      &lt;td&gt;17485973.0&lt;/td&gt;
      &lt;td&gt;30787074.0&lt;/td&gt;
      &lt;td&gt;42200938.0&lt;/td&gt;
      &lt;td&gt;53854962.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;name&lt;/th&gt;
      &lt;td&gt;3453&lt;/td&gt;
      &lt;td&gt;3410&lt;/td&gt;
      &lt;td&gt;Luxury Industrial Design LOFT, HEPA UV airpuri...&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;host_id&lt;/th&gt;
      &lt;td&gt;3453.0&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;123642405.854619&lt;/td&gt;
      &lt;td&gt;116075571.230048&lt;/td&gt;
      &lt;td&gt;38468.0&lt;/td&gt;
      &lt;td&gt;25500072.0&lt;/td&gt;
      &lt;td&gt;88454378.0&lt;/td&gt;
      &lt;td&gt;200592620.0&lt;/td&gt;
      &lt;td&gt;435431590.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;host_name&lt;/th&gt;
      &lt;td&gt;3444&lt;/td&gt;
      &lt;td&gt;747&lt;/td&gt;
      &lt;td&gt;Andrea&lt;/td&gt;
      &lt;td&gt;101&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;neighbourhood_group&lt;/th&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;We can get the list of columns using the &lt;code&gt;.columns&lt;/code&gt; attribute.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_listings.columns
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Index([&#39;id&#39;, &#39;name&#39;, &#39;host_id&#39;, &#39;host_name&#39;, &#39;neighbourhood_group&#39;,
       &#39;neighbourhood&#39;, &#39;latitude&#39;, &#39;longitude&#39;, &#39;room_type&#39;, &#39;price&#39;,
       &#39;minimum_nights&#39;, &#39;number_of_reviews&#39;, &#39;last_review&#39;,
       &#39;reviews_per_month&#39;, &#39;calculated_host_listings_count&#39;,
       &#39;availability_365&#39;, &#39;number_of_reviews_ltm&#39;, &#39;license&#39;],
      dtype=&#39;object&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can get the index using the &lt;code&gt;.index&lt;/code&gt; attribute,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_listings.index
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;RangeIndex(start=0, stop=3453, step=1)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;data-selection&#34;&gt;Data Selection&lt;/h2&gt;
&lt;p&gt;We can access single columns as if the DataFrame was a dictionary.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_listings[&#39;price&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0        68
1        29
2        50
3       126
4        50
       ... 
3448     32
3449     45
3450     50
3451    134
3452    115
Name: price, Length: 3453, dtype: int64
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can select rows and columns by index, using the &lt;code&gt;.iloc&lt;/code&gt; attribute.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_listings.iloc[:7, 5:9]
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;neighbourhood&lt;/th&gt;
      &lt;th&gt;latitude&lt;/th&gt;
      &lt;th&gt;longitude&lt;/th&gt;
      &lt;th&gt;room_type&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;Santo Stefano&lt;/td&gt;
      &lt;td&gt;44.48507&lt;/td&gt;
      &lt;td&gt;11.34786&lt;/td&gt;
      &lt;td&gt;Entire home/apt&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;Porto - Saragozza&lt;/td&gt;
      &lt;td&gt;44.49168&lt;/td&gt;
      &lt;td&gt;11.33514&lt;/td&gt;
      &lt;td&gt;Private room&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;Santo Stefano&lt;/td&gt;
      &lt;td&gt;44.48817&lt;/td&gt;
      &lt;td&gt;11.34124&lt;/td&gt;
      &lt;td&gt;Private room&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;Santo Stefano&lt;/td&gt;
      &lt;td&gt;44.47834&lt;/td&gt;
      &lt;td&gt;11.35672&lt;/td&gt;
      &lt;td&gt;Entire home/apt&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;Porto - Saragozza&lt;/td&gt;
      &lt;td&gt;44.49306&lt;/td&gt;
      &lt;td&gt;11.33786&lt;/td&gt;
      &lt;td&gt;Private room&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;5&lt;/th&gt;
      &lt;td&gt;Navile&lt;/td&gt;
      &lt;td&gt;44.51628&lt;/td&gt;
      &lt;td&gt;11.33074&lt;/td&gt;
      &lt;td&gt;Private room&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;6&lt;/th&gt;
      &lt;td&gt;Santo Stefano&lt;/td&gt;
      &lt;td&gt;44.48787&lt;/td&gt;
      &lt;td&gt;11.35392&lt;/td&gt;
      &lt;td&gt;Entire home/apt&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;If we want to condition only on rows or columns, we have use &lt;code&gt;:&lt;/code&gt; for the unrestricted dimesion, otherwise we get an error.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_listings.iloc[:, 5:9].head()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;neighbourhood&lt;/th&gt;
      &lt;th&gt;latitude&lt;/th&gt;
      &lt;th&gt;longitude&lt;/th&gt;
      &lt;th&gt;room_type&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;Santo Stefano&lt;/td&gt;
      &lt;td&gt;44.48507&lt;/td&gt;
      &lt;td&gt;11.34786&lt;/td&gt;
      &lt;td&gt;Entire home/apt&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;Porto - Saragozza&lt;/td&gt;
      &lt;td&gt;44.49168&lt;/td&gt;
      &lt;td&gt;11.33514&lt;/td&gt;
      &lt;td&gt;Private room&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;Santo Stefano&lt;/td&gt;
      &lt;td&gt;44.48817&lt;/td&gt;
      &lt;td&gt;11.34124&lt;/td&gt;
      &lt;td&gt;Private room&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;Santo Stefano&lt;/td&gt;
      &lt;td&gt;44.47834&lt;/td&gt;
      &lt;td&gt;11.35672&lt;/td&gt;
      &lt;td&gt;Entire home/apt&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;Porto - Saragozza&lt;/td&gt;
      &lt;td&gt;44.49306&lt;/td&gt;
      &lt;td&gt;11.33786&lt;/td&gt;
      &lt;td&gt;Private room&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;Instead, the &lt;code&gt;.loc&lt;/code&gt; attribute allows us to use row and column names.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_listings.loc[:, [&#39;neighbourhood&#39;, &#39;latitude&#39;, &#39;longitude&#39;]].head()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;neighbourhood&lt;/th&gt;
      &lt;th&gt;latitude&lt;/th&gt;
      &lt;th&gt;longitude&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;Santo Stefano&lt;/td&gt;
      &lt;td&gt;44.48507&lt;/td&gt;
      &lt;td&gt;11.34786&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;Porto - Saragozza&lt;/td&gt;
      &lt;td&gt;44.49168&lt;/td&gt;
      &lt;td&gt;11.33514&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;Santo Stefano&lt;/td&gt;
      &lt;td&gt;44.48817&lt;/td&gt;
      &lt;td&gt;11.34124&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;Santo Stefano&lt;/td&gt;
      &lt;td&gt;44.47834&lt;/td&gt;
      &lt;td&gt;11.35672&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;Porto - Saragozza&lt;/td&gt;
      &lt;td&gt;44.49306&lt;/td&gt;
      &lt;td&gt;11.33786&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;We can also select ranges.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_listings.loc[:, &#39;neighbourhood&#39;:&#39;room_type&#39;].head()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;neighbourhood&lt;/th&gt;
      &lt;th&gt;latitude&lt;/th&gt;
      &lt;th&gt;longitude&lt;/th&gt;
      &lt;th&gt;room_type&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;Santo Stefano&lt;/td&gt;
      &lt;td&gt;44.48507&lt;/td&gt;
      &lt;td&gt;11.34786&lt;/td&gt;
      &lt;td&gt;Entire home/apt&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;Porto - Saragozza&lt;/td&gt;
      &lt;td&gt;44.49168&lt;/td&gt;
      &lt;td&gt;11.33514&lt;/td&gt;
      &lt;td&gt;Private room&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;Santo Stefano&lt;/td&gt;
      &lt;td&gt;44.48817&lt;/td&gt;
      &lt;td&gt;11.34124&lt;/td&gt;
      &lt;td&gt;Private room&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;Santo Stefano&lt;/td&gt;
      &lt;td&gt;44.47834&lt;/td&gt;
      &lt;td&gt;11.35672&lt;/td&gt;
      &lt;td&gt;Entire home/apt&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;Porto - Saragozza&lt;/td&gt;
      &lt;td&gt;44.49306&lt;/td&gt;
      &lt;td&gt;11.33786&lt;/td&gt;
      &lt;td&gt;Private room&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;There is an easy way to &lt;strong&gt;select numerical columns&lt;/strong&gt;, the &lt;code&gt;.select_dtypes()&lt;/code&gt; function.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_listings.select_dtypes(include=[&#39;number&#39;]).head()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;id&lt;/th&gt;
      &lt;th&gt;host_id&lt;/th&gt;
      &lt;th&gt;neighbourhood_group&lt;/th&gt;
      &lt;th&gt;latitude&lt;/th&gt;
      &lt;th&gt;longitude&lt;/th&gt;
      &lt;th&gt;price&lt;/th&gt;
      &lt;th&gt;minimum_nights&lt;/th&gt;
      &lt;th&gt;number_of_reviews&lt;/th&gt;
      &lt;th&gt;reviews_per_month&lt;/th&gt;
      &lt;th&gt;calculated_host_listings_count&lt;/th&gt;
      &lt;th&gt;availability_365&lt;/th&gt;
      &lt;th&gt;number_of_reviews_ltm&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;42196&lt;/td&gt;
      &lt;td&gt;184487&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;44.48507&lt;/td&gt;
      &lt;td&gt;11.34786&lt;/td&gt;
      &lt;td&gt;68&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;180&lt;/td&gt;
      &lt;td&gt;1.32&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;161&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;46352&lt;/td&gt;
      &lt;td&gt;467810&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;44.49168&lt;/td&gt;
      &lt;td&gt;11.33514&lt;/td&gt;
      &lt;td&gt;29&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;300&lt;/td&gt;
      &lt;td&gt;2.20&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;248&lt;/td&gt;
      &lt;td&gt;37&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;59697&lt;/td&gt;
      &lt;td&gt;286688&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;44.48817&lt;/td&gt;
      &lt;td&gt;11.34124&lt;/td&gt;
      &lt;td&gt;50&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;240&lt;/td&gt;
      &lt;td&gt;2.18&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;327&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;85368&lt;/td&gt;
      &lt;td&gt;467675&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;44.47834&lt;/td&gt;
      &lt;td&gt;11.35672&lt;/td&gt;
      &lt;td&gt;126&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;40&lt;/td&gt;
      &lt;td&gt;0.34&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;332&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;145779&lt;/td&gt;
      &lt;td&gt;705535&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;44.49306&lt;/td&gt;
      &lt;td&gt;11.33786&lt;/td&gt;
      &lt;td&gt;50&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;69&lt;/td&gt;
      &lt;td&gt;0.55&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;365&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;Other types include&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;object&lt;/code&gt; for strings&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bool&lt;/code&gt; for booleans&lt;/li&gt;
&lt;li&gt;&lt;code&gt;int&lt;/code&gt; for integers&lt;/li&gt;
&lt;li&gt;&lt;code&gt;float&lt;/code&gt; for floats (numbers that are not integers)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can also use logical operators to selet rows.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_listings.loc[df_listings[&#39;number_of_reviews&#39;]&amp;gt;500, :].head()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;id&lt;/th&gt;
      &lt;th&gt;name&lt;/th&gt;
      &lt;th&gt;host_id&lt;/th&gt;
      &lt;th&gt;host_name&lt;/th&gt;
      &lt;th&gt;neighbourhood_group&lt;/th&gt;
      &lt;th&gt;neighbourhood&lt;/th&gt;
      &lt;th&gt;latitude&lt;/th&gt;
      &lt;th&gt;longitude&lt;/th&gt;
      &lt;th&gt;room_type&lt;/th&gt;
      &lt;th&gt;price&lt;/th&gt;
      &lt;th&gt;minimum_nights&lt;/th&gt;
      &lt;th&gt;number_of_reviews&lt;/th&gt;
      &lt;th&gt;last_review&lt;/th&gt;
      &lt;th&gt;reviews_per_month&lt;/th&gt;
      &lt;th&gt;calculated_host_listings_count&lt;/th&gt;
      &lt;th&gt;availability_365&lt;/th&gt;
      &lt;th&gt;number_of_reviews_ltm&lt;/th&gt;
      &lt;th&gt;license&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;52&lt;/th&gt;
      &lt;td&gt;884148&lt;/td&gt;
      &lt;td&gt;APOSA FLAT / CITY CENTER - BO&lt;/td&gt;
      &lt;td&gt;4664996&lt;/td&gt;
      &lt;td&gt;Vie D&#39;Acqua Di Sandra Maria&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;Santo Stefano&lt;/td&gt;
      &lt;td&gt;44.49945&lt;/td&gt;
      &lt;td&gt;11.34566&lt;/td&gt;
      &lt;td&gt;Entire home/apt&lt;/td&gt;
      &lt;td&gt;46&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;668&lt;/td&gt;
      &lt;td&gt;2021-12-11&lt;/td&gt;
      &lt;td&gt;6.24&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;252&lt;/td&gt;
      &lt;td&gt;20&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;92&lt;/th&gt;
      &lt;td&gt;1435627&lt;/td&gt;
      &lt;td&gt;heart of Bologna Piazza Maggiore&lt;/td&gt;
      &lt;td&gt;7714013&lt;/td&gt;
      &lt;td&gt;Carlotta&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;Porto - Saragozza&lt;/td&gt;
      &lt;td&gt;44.49321&lt;/td&gt;
      &lt;td&gt;11.33569&lt;/td&gt;
      &lt;td&gt;Entire home/apt&lt;/td&gt;
      &lt;td&gt;56&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;508&lt;/td&gt;
      &lt;td&gt;2021-12-12&lt;/td&gt;
      &lt;td&gt;5.08&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;131&lt;/td&gt;
      &lt;td&gt;69&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;98&lt;/th&gt;
      &lt;td&gt;1566003&lt;/td&gt;
      &lt;td&gt;&#34;i portici di via Piella &#34;&lt;/td&gt;
      &lt;td&gt;8325248&lt;/td&gt;
      &lt;td&gt;Massimo&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;Santo Stefano&lt;/td&gt;
      &lt;td&gt;44.49855&lt;/td&gt;
      &lt;td&gt;11.34411&lt;/td&gt;
      &lt;td&gt;Entire home/apt&lt;/td&gt;
      &lt;td&gt;51&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;764&lt;/td&gt;
      &lt;td&gt;2021-12-14&lt;/td&gt;
      &lt;td&gt;7.62&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;119&lt;/td&gt;
      &lt;td&gt;120&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;131&lt;/th&gt;
      &lt;td&gt;2282623&lt;/td&gt;
      &lt;td&gt;S.Orsola zone,parking for free and self check-in&lt;/td&gt;
      &lt;td&gt;11658074&lt;/td&gt;
      &lt;td&gt;Cecilia&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;San Donato - San Vitale&lt;/td&gt;
      &lt;td&gt;44.49328&lt;/td&gt;
      &lt;td&gt;11.36650&lt;/td&gt;
      &lt;td&gt;Entire home/apt&lt;/td&gt;
      &lt;td&gt;38&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;689&lt;/td&gt;
      &lt;td&gt;2021-10-24&lt;/td&gt;
      &lt;td&gt;7.20&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;72&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;175&lt;/th&gt;
      &lt;td&gt;3216486&lt;/td&gt;
      &lt;td&gt;Stanza Privata&lt;/td&gt;
      &lt;td&gt;16289536&lt;/td&gt;
      &lt;td&gt;Fabio&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;Navile&lt;/td&gt;
      &lt;td&gt;44.50903&lt;/td&gt;
      &lt;td&gt;11.34200&lt;/td&gt;
      &lt;td&gt;Private room&lt;/td&gt;
      &lt;td&gt;82&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;569&lt;/td&gt;
      &lt;td&gt;2021-12-05&lt;/td&gt;
      &lt;td&gt;6.93&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;We can use logical operations as well. But remember to use paranthesis.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: the &lt;code&gt;and&lt;/code&gt; and &lt;code&gt;or&lt;/code&gt; expressions do not work in this setting. We have to use &lt;code&gt;&amp;amp;&lt;/code&gt; and &lt;code&gt;|&lt;/code&gt; instead.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_listings.loc[(df_listings[&#39;number_of_reviews&#39;]&amp;gt;300) &amp;amp;
                (df_listings[&#39;reviews_per_month&#39;]&amp;gt;7), 
                :].head()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;id&lt;/th&gt;
      &lt;th&gt;name&lt;/th&gt;
      &lt;th&gt;host_id&lt;/th&gt;
      &lt;th&gt;host_name&lt;/th&gt;
      &lt;th&gt;neighbourhood_group&lt;/th&gt;
      &lt;th&gt;neighbourhood&lt;/th&gt;
      &lt;th&gt;latitude&lt;/th&gt;
      &lt;th&gt;longitude&lt;/th&gt;
      &lt;th&gt;room_type&lt;/th&gt;
      &lt;th&gt;price&lt;/th&gt;
      &lt;th&gt;minimum_nights&lt;/th&gt;
      &lt;th&gt;number_of_reviews&lt;/th&gt;
      &lt;th&gt;last_review&lt;/th&gt;
      &lt;th&gt;reviews_per_month&lt;/th&gt;
      &lt;th&gt;calculated_host_listings_count&lt;/th&gt;
      &lt;th&gt;availability_365&lt;/th&gt;
      &lt;th&gt;number_of_reviews_ltm&lt;/th&gt;
      &lt;th&gt;license&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;98&lt;/th&gt;
      &lt;td&gt;1566003&lt;/td&gt;
      &lt;td&gt;&#34;i portici di via Piella &#34;&lt;/td&gt;
      &lt;td&gt;8325248&lt;/td&gt;
      &lt;td&gt;Massimo&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;Santo Stefano&lt;/td&gt;
      &lt;td&gt;44.498550&lt;/td&gt;
      &lt;td&gt;11.344110&lt;/td&gt;
      &lt;td&gt;Entire home/apt&lt;/td&gt;
      &lt;td&gt;51&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;764&lt;/td&gt;
      &lt;td&gt;2021-12-14&lt;/td&gt;
      &lt;td&gt;7.62&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;119&lt;/td&gt;
      &lt;td&gt;120&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;131&lt;/th&gt;
      &lt;td&gt;2282623&lt;/td&gt;
      &lt;td&gt;S.Orsola zone,parking for free and self check-in&lt;/td&gt;
      &lt;td&gt;11658074&lt;/td&gt;
      &lt;td&gt;Cecilia&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;San Donato - San Vitale&lt;/td&gt;
      &lt;td&gt;44.493280&lt;/td&gt;
      &lt;td&gt;11.366500&lt;/td&gt;
      &lt;td&gt;Entire home/apt&lt;/td&gt;
      &lt;td&gt;38&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;689&lt;/td&gt;
      &lt;td&gt;2021-10-24&lt;/td&gt;
      &lt;td&gt;7.20&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;72&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;204&lt;/th&gt;
      &lt;td&gt;4166793&lt;/td&gt;
      &lt;td&gt;Centralissimo a Bologna&lt;/td&gt;
      &lt;td&gt;8325248&lt;/td&gt;
      &lt;td&gt;Massimo&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;Santo Stefano&lt;/td&gt;
      &lt;td&gt;44.500920&lt;/td&gt;
      &lt;td&gt;11.344560&lt;/td&gt;
      &lt;td&gt;Entire home/apt&lt;/td&gt;
      &lt;td&gt;71&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;750&lt;/td&gt;
      &lt;td&gt;2021-12-10&lt;/td&gt;
      &lt;td&gt;9.21&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;233&lt;/td&gt;
      &lt;td&gt;84&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;751&lt;/th&gt;
      &lt;td&gt;15508481&lt;/td&gt;
      &lt;td&gt;Monolocale in zona fiera /centro&lt;/td&gt;
      &lt;td&gt;99632788&lt;/td&gt;
      &lt;td&gt;Walid&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;Navile&lt;/td&gt;
      &lt;td&gt;44.514462&lt;/td&gt;
      &lt;td&gt;11.353731&lt;/td&gt;
      &lt;td&gt;Entire home/apt&lt;/td&gt;
      &lt;td&gt;64&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;475&lt;/td&gt;
      &lt;td&gt;2021-12-01&lt;/td&gt;
      &lt;td&gt;7.56&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;48&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;773&lt;/th&gt;
      &lt;td&gt;15886516&lt;/td&gt;
      &lt;td&gt;Monolocale nel cuore del ghetto ebraico di Bol...&lt;/td&gt;
      &lt;td&gt;103024123&lt;/td&gt;
      &lt;td&gt;Catia&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;Santo Stefano&lt;/td&gt;
      &lt;td&gt;44.495080&lt;/td&gt;
      &lt;td&gt;11.347220&lt;/td&gt;
      &lt;td&gt;Entire home/apt&lt;/td&gt;
      &lt;td&gt;58&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;428&lt;/td&gt;
      &lt;td&gt;2021-12-15&lt;/td&gt;
      &lt;td&gt;7.88&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;285&lt;/td&gt;
      &lt;td&gt;17&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;For a single column (i.e. a Series), we can get the unique values using the &lt;code&gt;unique()&lt;/code&gt; function.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_listings[&#39;neighbourhood&#39;].unique()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([&#39;Santo Stefano&#39;, &#39;Porto - Saragozza&#39;, &#39;Navile&#39;,
       &#39;San Donato - San Vitale&#39;, &#39;Savena&#39;, &#39;Borgo Panigale - Reno&#39;],
      dtype=object)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For multiple columns, we can use the &lt;code&gt;drop_duplicates&lt;/code&gt; function.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_listings[[&#39;neighbourhood&#39;, &#39;room_type&#39;]].drop_duplicates()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;neighbourhood&lt;/th&gt;
      &lt;th&gt;room_type&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;Santo Stefano&lt;/td&gt;
      &lt;td&gt;Entire home/apt&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;Porto - Saragozza&lt;/td&gt;
      &lt;td&gt;Private room&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;Santo Stefano&lt;/td&gt;
      &lt;td&gt;Private room&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;5&lt;/th&gt;
      &lt;td&gt;Navile&lt;/td&gt;
      &lt;td&gt;Private room&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;7&lt;/th&gt;
      &lt;td&gt;Navile&lt;/td&gt;
      &lt;td&gt;Entire home/apt&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;8&lt;/th&gt;
      &lt;td&gt;Porto - Saragozza&lt;/td&gt;
      &lt;td&gt;Entire home/apt&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;19&lt;/th&gt;
      &lt;td&gt;San Donato - San Vitale&lt;/td&gt;
      &lt;td&gt;Private room&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;24&lt;/th&gt;
      &lt;td&gt;Savena&lt;/td&gt;
      &lt;td&gt;Private room&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;36&lt;/th&gt;
      &lt;td&gt;Borgo Panigale - Reno&lt;/td&gt;
      &lt;td&gt;Entire home/apt&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;41&lt;/th&gt;
      &lt;td&gt;San Donato - San Vitale&lt;/td&gt;
      &lt;td&gt;Entire home/apt&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;70&lt;/th&gt;
      &lt;td&gt;Porto - Saragozza&lt;/td&gt;
      &lt;td&gt;Hotel room&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;75&lt;/th&gt;
      &lt;td&gt;Borgo Panigale - Reno&lt;/td&gt;
      &lt;td&gt;Private room&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;110&lt;/th&gt;
      &lt;td&gt;Santo Stefano&lt;/td&gt;
      &lt;td&gt;Hotel room&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;111&lt;/th&gt;
      &lt;td&gt;Savena&lt;/td&gt;
      &lt;td&gt;Entire home/apt&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;388&lt;/th&gt;
      &lt;td&gt;Porto - Saragozza&lt;/td&gt;
      &lt;td&gt;Shared room&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;678&lt;/th&gt;
      &lt;td&gt;Navile&lt;/td&gt;
      &lt;td&gt;Shared room&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1393&lt;/th&gt;
      &lt;td&gt;Savena&lt;/td&gt;
      &lt;td&gt;Shared room&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1416&lt;/th&gt;
      &lt;td&gt;San Donato - San Vitale&lt;/td&gt;
      &lt;td&gt;Shared room&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1572&lt;/th&gt;
      &lt;td&gt;San Donato - San Vitale&lt;/td&gt;
      &lt;td&gt;Hotel room&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1637&lt;/th&gt;
      &lt;td&gt;Santo Stefano&lt;/td&gt;
      &lt;td&gt;Shared room&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1751&lt;/th&gt;
      &lt;td&gt;Navile&lt;/td&gt;
      &lt;td&gt;Hotel room&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h2 id=&#34;aggregation-and-pivot-tables&#34;&gt;Aggregation and Pivot Tables&lt;/h2&gt;
&lt;p&gt;We can compute statistics by group using &lt;code&gt;.groupby()&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_listings.groupby(&#39;neighbourhood&#39;)[[&#39;price&#39;, &#39;reviews_per_month&#39;]].mean()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;price&lt;/th&gt;
      &lt;th&gt;reviews_per_month&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;neighbourhood&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;Borgo Panigale - Reno&lt;/th&gt;
      &lt;td&gt;83.020548&lt;/td&gt;
      &lt;td&gt;0.983488&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Navile&lt;/th&gt;
      &lt;td&gt;142.200993&lt;/td&gt;
      &lt;td&gt;1.156745&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Porto - Saragozza&lt;/th&gt;
      &lt;td&gt;129.908312&lt;/td&gt;
      &lt;td&gt;1.340325&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;San Donato - San Vitale&lt;/th&gt;
      &lt;td&gt;91.618138&lt;/td&gt;
      &lt;td&gt;0.933011&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Santo Stefano&lt;/th&gt;
      &lt;td&gt;119.441841&lt;/td&gt;
      &lt;td&gt;1.344810&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Savena&lt;/th&gt;
      &lt;td&gt;69.626016&lt;/td&gt;
      &lt;td&gt;0.805888&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;If you want to perform more than one function, maybe on different columns, you can use &lt;code&gt;.aggregate()&lt;/code&gt; which can be shortened to &lt;code&gt;.agg()&lt;/code&gt;. It takes as argument a dictionary with variables as keys and lists of functions as values.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_listings.groupby(&#39;neighbourhood&#39;).agg({&amp;quot;reviews_per_month&amp;quot;: [&amp;quot;mean&amp;quot;],
                                          &amp;quot;price&amp;quot;: [&amp;quot;min&amp;quot;, np.max]}).reset_index()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead tr th {
    text-align: left;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;neighbourhood&lt;/th&gt;
      &lt;th&gt;reviews_per_month&lt;/th&gt;
      &lt;th colspan=&#34;2&#34; halign=&#34;left&#34;&gt;price&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;mean&lt;/th&gt;
      &lt;th&gt;min&lt;/th&gt;
      &lt;th&gt;amax&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;Borgo Panigale - Reno&lt;/td&gt;
      &lt;td&gt;0.983488&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;1429&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;Navile&lt;/td&gt;
      &lt;td&gt;1.156745&lt;/td&gt;
      &lt;td&gt;14&lt;/td&gt;
      &lt;td&gt;5000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;Porto - Saragozza&lt;/td&gt;
      &lt;td&gt;1.340325&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;9999&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;San Donato - San Vitale&lt;/td&gt;
      &lt;td&gt;0.933011&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;1600&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;Santo Stefano&lt;/td&gt;
      &lt;td&gt;1.344810&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
      &lt;td&gt;9999&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;5&lt;/th&gt;
      &lt;td&gt;Savena&lt;/td&gt;
      &lt;td&gt;0.805888&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;680&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;The problem with this syntax is that it generates a hierarchical structure for variable names, which might not be so easy to work with. In the example above, to access the mean price, you have to use &lt;code&gt;df.price[&amp;quot;min&amp;quot;]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To perform variable naming and aggregation and the same time, you can ise the following syntax: &lt;code&gt;agg(output_var = (&amp;quot;input_var&amp;quot;, function))&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_listings.groupby(&#39;neighbourhood&#39;).agg(mean_reviews=(&amp;quot;reviews_per_month&amp;quot;, &amp;quot;mean&amp;quot;),
                                         min_price=(&amp;quot;price&amp;quot;, &amp;quot;min&amp;quot;),
                                         max_price=(&amp;quot;price&amp;quot;, np.max)).reset_index()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;neighbourhood&lt;/th&gt;
      &lt;th&gt;mean_reviews&lt;/th&gt;
      &lt;th&gt;min_price&lt;/th&gt;
      &lt;th&gt;max_price&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;Borgo Panigale - Reno&lt;/td&gt;
      &lt;td&gt;0.983488&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;1429&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;Navile&lt;/td&gt;
      &lt;td&gt;1.156745&lt;/td&gt;
      &lt;td&gt;14&lt;/td&gt;
      &lt;td&gt;5000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;Porto - Saragozza&lt;/td&gt;
      &lt;td&gt;1.340325&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;9999&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;San Donato - San Vitale&lt;/td&gt;
      &lt;td&gt;0.933011&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;1600&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;Santo Stefano&lt;/td&gt;
      &lt;td&gt;1.344810&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
      &lt;td&gt;9999&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;5&lt;/th&gt;
      &lt;td&gt;Savena&lt;/td&gt;
      &lt;td&gt;0.805888&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;680&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;We can make pivot tables with the &lt;code&gt;.pivot_table()&lt;/code&gt; function. It takes the folling arguments:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;index&lt;/code&gt;: rows&lt;/li&gt;
&lt;li&gt;&lt;code&gt;columns&lt;/code&gt;: columns&lt;/li&gt;
&lt;li&gt;&lt;code&gt;values&lt;/code&gt;: values&lt;/li&gt;
&lt;li&gt;&lt;code&gt;aggfunc&lt;/code&gt;: aggregation function&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_listings.pivot_table(index=&#39;neighbourhood&#39;, columns=&#39;room_type&#39;, values=&#39;price&#39;, aggfunc=&#39;mean&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;room_type&lt;/th&gt;
      &lt;th&gt;Entire home/apt&lt;/th&gt;
      &lt;th&gt;Hotel room&lt;/th&gt;
      &lt;th&gt;Private room&lt;/th&gt;
      &lt;th&gt;Shared room&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;neighbourhood&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;Borgo Panigale - Reno&lt;/th&gt;
      &lt;td&gt;96.700935&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;45.487179&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Navile&lt;/th&gt;
      &lt;td&gt;172.140000&lt;/td&gt;
      &lt;td&gt;1350.000000&lt;/td&gt;
      &lt;td&gt;68.416107&lt;/td&gt;
      &lt;td&gt;28.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Porto - Saragozza&lt;/th&gt;
      &lt;td&gt;148.410926&lt;/td&gt;
      &lt;td&gt;102.375000&lt;/td&gt;
      &lt;td&gt;83.070234&lt;/td&gt;
      &lt;td&gt;16.5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;San Donato - San Vitale&lt;/th&gt;
      &lt;td&gt;106.775000&lt;/td&gt;
      &lt;td&gt;55.000000&lt;/td&gt;
      &lt;td&gt;61.194030&lt;/td&gt;
      &lt;td&gt;59.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Santo Stefano&lt;/th&gt;
      &lt;td&gt;129.990260&lt;/td&gt;
      &lt;td&gt;103.827586&lt;/td&gt;
      &lt;td&gt;80.734177&lt;/td&gt;
      &lt;td&gt;95.4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Savena&lt;/th&gt;
      &lt;td&gt;86.301370&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;46.229167&lt;/td&gt;
      &lt;td&gt;22.5&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Data Types</title>
      <link>https://matteocourthoud.github.io/course/data-science/03_data_types/</link>
      <pubDate>Sun, 01 May 2022 00:00:00 +0000</pubDate>
      <guid>https://matteocourthoud.github.io/course/data-science/03_data_types/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np
import pandas as pd
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;setup&#34;&gt;Setup&lt;/h2&gt;
&lt;p&gt;For the scope of this tutorial we are going to use AirBnb Scraped data for the city of Bologna. The data is freely available at &lt;strong&gt;Inside AirBnb&lt;/strong&gt;: &lt;a href=&#34;http://insideairbnb.com/get-the-data.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://insideairbnb.com/get-the-data.html&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A description of all variables in all datasets is avaliable &lt;a href=&#34;https://docs.google.com/spreadsheets/d/1iWCNJcSutYqpULSQHlNyGInUvHg2BoUGoNRIGa6Szc4/edit#gid=982310896&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We are going to use 2 datasets:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;listing dataset: contains listing-level information&lt;/li&gt;
&lt;li&gt;pricing dataset: contains pricing data, over time&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Import listings data
url_listings = &amp;quot;http://data.insideairbnb.com/italy/emilia-romagna/bologna/2021-12-17/visualisations/listings.csv&amp;quot;
df_listings = pd.read_csv(url_listings)

# Import pricing data
url_prices = &amp;quot;http://data.insideairbnb.com/italy/emilia-romagna/bologna/2021-12-17/data/calendar.csv.gz&amp;quot;
df_prices = pd.read_csv(url_prices, compression=&amp;quot;gzip&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;numerical-data&#34;&gt;Numerical Data&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Methods&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;numpy functions&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pd.cut()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Standard mathematical operations between columns are done row-wise.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_prices[&#39;maximum_nights&#39;] - df_prices[&#39;minimum_nights&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0           148
1           357
2           357
3           357
4           357
           ... 
1260340    1124
1260341    1124
1260342    1124
1260343    1124
1260344    1124
Length: 1260345, dtype: int64
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can use most &lt;code&gt;numpy&lt;/code&gt; operations element-wise on a single column.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.log(df_listings[&#39;price&#39;])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0       4.219508
1       3.367296
2       3.912023
3       4.836282
4       3.912023
          ...   
3448    3.465736
3449    3.806662
3450    3.912023
3451    4.897840
3452    4.744932
Name: price, Length: 3453, dtype: float64
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can create a categorical variables from a numerical one using the &lt;code&gt;pd.cut()&lt;/code&gt; function.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pd.cut(df_listings[&#39;price&#39;], 
       bins = [0, 50, 100, np.inf], 
       labels=[&#39;cheap&#39;, &#39;ok&#39;, &#39;expensive&#39;])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0              ok
1           cheap
2           cheap
3       expensive
4           cheap
          ...    
3448        cheap
3449        cheap
3450        cheap
3451    expensive
3452    expensive
Name: price, Length: 3453, dtype: category
Categories (3, object): [&#39;cheap&#39; &amp;lt; &#39;ok&#39; &amp;lt; &#39;expensive&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;string-data&#34;&gt;String Data&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Methods&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;+&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.str.replace&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.str.contains&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.astype(str)&lt;/code&gt;
-&lt;code&gt;pd.get_dummies()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;We can use the &lt;code&gt;+&lt;/code&gt; operator between columns, to do pairwise append.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: we cannot do it with strings.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_listings[&#39;host_name&#39;] + df_listings[&#39;neighbourhood&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0                     CarloSanto Stefano
1              EleonoraPorto - Saragozza
2                     PaoloSanto Stefano
3                Anna MariaSanto Stefano
4               ValerioPorto - Saragozza
                      ...               
3448                        IleanaNavile
3449           FernandaPorto - Saragozza
3450                        IleanaNavile
3451        Wonderful ItalySanto Stefano
3452    Wonderful ItalyPorto - Saragozza
Length: 3453, dtype: object
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pandas Series have a lot of vectorized string functions. You can find a list &lt;a href=&#34;https://pandas.pydata.org/docs/user_guide/text.html#method-summary&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For example, we want to remove the dollar symbol from the &lt;code&gt;price&lt;/code&gt; variable in the &lt;code&gt;df_prices&lt;/code&gt; dataset.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_prices[&#39;price&#39;].str.replace(&#39;$&#39;, &#39;&#39;, regex=False)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0           70.00
1           68.00
2           68.00
3           68.00
4           68.00
            ...  
1260340    115.00
1260341    115.00
1260342    115.00
1260343    115.00
1260344    115.00
Name: price, Length: 1260345, dtype: object
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Some of these functions use regular expressions.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;match()&lt;/code&gt;: Call re.match() on each element, returning a boolean.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;extract()&lt;/code&gt;: Call re.match() on each element, returning matched groups as strings.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;findall()&lt;/code&gt;: Call re.findall() on each element&lt;/li&gt;
&lt;li&gt;&lt;code&gt;replace()&lt;/code&gt;: Replace occurrences of pattern with some other string&lt;/li&gt;
&lt;li&gt;&lt;code&gt;contains()&lt;/code&gt;: Call re.search() on each element, returning a boolean&lt;/li&gt;
&lt;li&gt;&lt;code&gt;count()&lt;/code&gt;: Count occurrences of pattern&lt;/li&gt;
&lt;li&gt;&lt;code&gt;split()&lt;/code&gt;: Equivalent to str.split(), but accepts regexps
rsplit()&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example, the next code checks whether in the word &lt;code&gt;centre&lt;/code&gt; or &lt;code&gt;center&lt;/code&gt; are contained in the text description.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_listings[&#39;name&#39;].str.contains(&#39;centre|center&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0        True
1       False
2        True
3       False
4       False
        ...  
3448    False
3449    False
3450    False
3451    False
3452    False
Name: name, Length: 3453, dtype: bool
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lastly, we can (try to) convert string variables to numeric using &lt;code&gt;astype(float)&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_prices[&#39;price&#39;].str.replace(&#39;[$|,]&#39;, &#39;&#39;, regex=True).astype(float)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0           70.0
1           68.0
2           68.0
3           68.0
4           68.0
           ...  
1260340    115.0
1260341    115.0
1260342    115.0
1260343    115.0
1260344    115.0
Name: price, Length: 1260345, dtype: float64
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can also use it to convert numerics to strings using &lt;code&gt;astype(str)&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_listings[&#39;id&#39;].astype(str)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0          42196
1          46352
2          59697
3          85368
4         145779
          ...   
3448    53810648
3449    53820830
3450    53837098
3451    53837654
3452    53854962
Name: id, Length: 3453, dtype: object
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can generate dummies from a categorical variable using &lt;code&gt;pd.get_dummies()&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pd.get_dummies(df_listings[&#39;neighbourhood&#39;]).head()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Borgo Panigale - Reno&lt;/th&gt;
      &lt;th&gt;Navile&lt;/th&gt;
      &lt;th&gt;Porto - Saragozza&lt;/th&gt;
      &lt;th&gt;San Donato - San Vitale&lt;/th&gt;
      &lt;th&gt;Santo Stefano&lt;/th&gt;
      &lt;th&gt;Savena&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h2 id=&#34;time-data&#34;&gt;Time Data&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Methods&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pd.to_datetime()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.dt.year&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.df.to_period()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pd.to_timedelta()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;In the &lt;code&gt;df_prices&lt;/code&gt; we have a date variable, &lt;code&gt;date&lt;/code&gt;. Which format is it in? We can check it with the &lt;code&gt;.dtypes&lt;/code&gt; attribute.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_prices[&#39;date&#39;].dtypes
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;dtype(&#39;O&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can &lt;strong&gt;convert&lt;/strong&gt; a variable into a date using the&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_prices[&#39;datetime&#39;] = pd.to_datetime(df_prices[&#39;date&#39;])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Indeed, if we now check the format of the &lt;code&gt;datetime&lt;/code&gt; variable, it&amp;rsquo;s &lt;code&gt;datetime&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_prices[&#39;datetime&#39;].dtypes
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;dtype(&#39;&amp;lt;M8[ns]&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once we have a variable in &lt;code&gt;datetime&lt;/code&gt; format, we gain plenty of datetime operations through the &lt;code&gt;dt&lt;/code&gt; accessor object for datetime-like properties.&lt;/p&gt;
&lt;p&gt;For example, we can &lt;strong&gt;extract the year&lt;/strong&gt; using &lt;code&gt;.dt.year&lt;/code&gt;. We can do the same with &lt;code&gt;month&lt;/code&gt;, &lt;code&gt;week&lt;/code&gt; and &lt;code&gt;day&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_prices[&#39;datetime&#39;].dt.year
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0          2021
1          2021
2          2021
3          2021
4          2021
           ... 
1260340    2022
1260341    2022
1260342    2022
1260343    2022
1260344    2022
Name: datetime, Length: 1260345, dtype: int64
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can change the &lt;strong&gt;level of aggregation&lt;/strong&gt; of a date using &lt;code&gt;.dt.to_period()&lt;/code&gt;. The option &lt;code&gt;M&lt;/code&gt; converts to year-month level.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_prices[&#39;datetime&#39;].dt.to_period(&#39;M&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0          2021-12
1          2021-12
2          2021-12
3          2021-12
4          2021-12
            ...   
1260340    2022-12
1260341    2022-12
1260342    2022-12
1260343    2022-12
1260344    2022-12
Name: datetime, Length: 1260345, dtype: period[M]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can &lt;strong&gt;add or subtract time periods&lt;/strong&gt; from a date using the &lt;code&gt;pd.to_timedelta()&lt;/code&gt; function. We need to specify the unit of measurement with the &lt;code&gt;unit&lt;/code&gt; option.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_prices[&#39;datetime&#39;] -  pd.to_timedelta(3, unit=&#39;d&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0         2021-12-14
1         2021-12-14
2         2021-12-15
3         2021-12-16
4         2021-12-17
             ...    
1260340   2022-12-09
1260341   2022-12-10
1260342   2022-12-11
1260343   2022-12-12
1260344   2022-12-13
Name: datetime, Length: 1260345, dtype: datetime64[ns]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;missing-data&#34;&gt;Missing Data&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Methods&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.isna()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.dropna()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.fillna()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;The function &lt;code&gt;isna()&lt;/code&gt; reports missing values.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_listings.isna().head()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;id&lt;/th&gt;
      &lt;th&gt;name&lt;/th&gt;
      &lt;th&gt;host_id&lt;/th&gt;
      &lt;th&gt;host_name&lt;/th&gt;
      &lt;th&gt;neighbourhood_group&lt;/th&gt;
      &lt;th&gt;neighbourhood&lt;/th&gt;
      &lt;th&gt;latitude&lt;/th&gt;
      &lt;th&gt;longitude&lt;/th&gt;
      &lt;th&gt;room_type&lt;/th&gt;
      &lt;th&gt;price&lt;/th&gt;
      &lt;th&gt;minimum_nights&lt;/th&gt;
      &lt;th&gt;number_of_reviews&lt;/th&gt;
      &lt;th&gt;last_review&lt;/th&gt;
      &lt;th&gt;reviews_per_month&lt;/th&gt;
      &lt;th&gt;calculated_host_listings_count&lt;/th&gt;
      &lt;th&gt;availability_365&lt;/th&gt;
      &lt;th&gt;number_of_reviews_ltm&lt;/th&gt;
      &lt;th&gt;license&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;To get a quick description of the amount of missing data in the dataset, we can use&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_listings.isna().sum()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;id                                   0
name                                 0
host_id                              0
host_name                            9
neighbourhood_group               3453
neighbourhood                        0
latitude                             0
longitude                            0
room_type                            0
price                                0
minimum_nights                       0
number_of_reviews                    0
last_review                        409
reviews_per_month                  409
calculated_host_listings_count       0
availability_365                     0
number_of_reviews_ltm                0
license                           3318
dtype: int64
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can drop missing values using &lt;code&gt;dropna()&lt;/code&gt;. It drops all rows with at least one missing value.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_listings.dropna().shape
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;(0, 18)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this case unfortunately, it drops all the rows. If we wa to drop only rows with all missing values, we can use the parameter &lt;code&gt;how=&#39;all&#39;&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_listings.dropna(how=&#39;all&#39;).shape
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;(3453, 18)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we want to drop only missing values for one particular value, we can use the &lt;code&gt;subset&lt;/code&gt; option.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_listings.dropna(subset=[&#39;reviews_per_month&#39;]).shape
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;(3044, 18)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can also fill the missing values instead of dropping them, using &lt;code&gt;fillna()&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_listings.fillna(&#39; -- This was NA  -- &#39;).head()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;id&lt;/th&gt;
      &lt;th&gt;name&lt;/th&gt;
      &lt;th&gt;host_id&lt;/th&gt;
      &lt;th&gt;host_name&lt;/th&gt;
      &lt;th&gt;neighbourhood_group&lt;/th&gt;
      &lt;th&gt;neighbourhood&lt;/th&gt;
      &lt;th&gt;latitude&lt;/th&gt;
      &lt;th&gt;longitude&lt;/th&gt;
      &lt;th&gt;room_type&lt;/th&gt;
      &lt;th&gt;price&lt;/th&gt;
      &lt;th&gt;minimum_nights&lt;/th&gt;
      &lt;th&gt;number_of_reviews&lt;/th&gt;
      &lt;th&gt;last_review&lt;/th&gt;
      &lt;th&gt;reviews_per_month&lt;/th&gt;
      &lt;th&gt;calculated_host_listings_count&lt;/th&gt;
      &lt;th&gt;availability_365&lt;/th&gt;
      &lt;th&gt;number_of_reviews_ltm&lt;/th&gt;
      &lt;th&gt;license&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;42196&lt;/td&gt;
      &lt;td&gt;50 sm Studio in the historic centre&lt;/td&gt;
      &lt;td&gt;184487&lt;/td&gt;
      &lt;td&gt;Carlo&lt;/td&gt;
      &lt;td&gt;-- This was NA  --&lt;/td&gt;
      &lt;td&gt;Santo Stefano&lt;/td&gt;
      &lt;td&gt;44.48507&lt;/td&gt;
      &lt;td&gt;11.34786&lt;/td&gt;
      &lt;td&gt;Entire home/apt&lt;/td&gt;
      &lt;td&gt;68&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;180&lt;/td&gt;
      &lt;td&gt;2021-11-12&lt;/td&gt;
      &lt;td&gt;1.32&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;161&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;-- This was NA  --&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;46352&lt;/td&gt;
      &lt;td&gt;A room in Pasolini&#39;s house&lt;/td&gt;
      &lt;td&gt;467810&lt;/td&gt;
      &lt;td&gt;Eleonora&lt;/td&gt;
      &lt;td&gt;-- This was NA  --&lt;/td&gt;
      &lt;td&gt;Porto - Saragozza&lt;/td&gt;
      &lt;td&gt;44.49168&lt;/td&gt;
      &lt;td&gt;11.33514&lt;/td&gt;
      &lt;td&gt;Private room&lt;/td&gt;
      &lt;td&gt;29&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;300&lt;/td&gt;
      &lt;td&gt;2021-11-30&lt;/td&gt;
      &lt;td&gt;2.2&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;248&lt;/td&gt;
      &lt;td&gt;37&lt;/td&gt;
      &lt;td&gt;-- This was NA  --&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;59697&lt;/td&gt;
      &lt;td&gt;COZY LARGE BEDROOM in the city center&lt;/td&gt;
      &lt;td&gt;286688&lt;/td&gt;
      &lt;td&gt;Paolo&lt;/td&gt;
      &lt;td&gt;-- This was NA  --&lt;/td&gt;
      &lt;td&gt;Santo Stefano&lt;/td&gt;
      &lt;td&gt;44.48817&lt;/td&gt;
      &lt;td&gt;11.34124&lt;/td&gt;
      &lt;td&gt;Private room&lt;/td&gt;
      &lt;td&gt;50&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;240&lt;/td&gt;
      &lt;td&gt;2020-10-04&lt;/td&gt;
      &lt;td&gt;2.18&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;327&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;-- This was NA  --&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;85368&lt;/td&gt;
      &lt;td&gt;Garden House Bologna&lt;/td&gt;
      &lt;td&gt;467675&lt;/td&gt;
      &lt;td&gt;Anna Maria&lt;/td&gt;
      &lt;td&gt;-- This was NA  --&lt;/td&gt;
      &lt;td&gt;Santo Stefano&lt;/td&gt;
      &lt;td&gt;44.47834&lt;/td&gt;
      &lt;td&gt;11.35672&lt;/td&gt;
      &lt;td&gt;Entire home/apt&lt;/td&gt;
      &lt;td&gt;126&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;40&lt;/td&gt;
      &lt;td&gt;2019-11-03&lt;/td&gt;
      &lt;td&gt;0.34&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;332&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;-- This was NA  --&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;145779&lt;/td&gt;
      &lt;td&gt;SINGLE ROOM&lt;/td&gt;
      &lt;td&gt;705535&lt;/td&gt;
      &lt;td&gt;Valerio&lt;/td&gt;
      &lt;td&gt;-- This was NA  --&lt;/td&gt;
      &lt;td&gt;Porto - Saragozza&lt;/td&gt;
      &lt;td&gt;44.49306&lt;/td&gt;
      &lt;td&gt;11.33786&lt;/td&gt;
      &lt;td&gt;Private room&lt;/td&gt;
      &lt;td&gt;50&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;69&lt;/td&gt;
      &lt;td&gt;2021-12-05&lt;/td&gt;
      &lt;td&gt;0.55&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;365&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;-- This was NA  --&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;We can also make missing values if we want.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_listings.iloc[2, 2] = np.nan
df_listings.iloc[:3, :3]
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;id&lt;/th&gt;
      &lt;th&gt;name&lt;/th&gt;
      &lt;th&gt;host_id&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;42196&lt;/td&gt;
      &lt;td&gt;50 sm Studio in the historic centre&lt;/td&gt;
      &lt;td&gt;184487.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;46352&lt;/td&gt;
      &lt;td&gt;A room in Pasolini&#39;s house&lt;/td&gt;
      &lt;td&gt;467810.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;59697&lt;/td&gt;
      &lt;td&gt;COZY LARGE BEDROOM in the city center&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Data Wrangling</title>
      <link>https://matteocourthoud.github.io/course/data-science/04_data_wrangling/</link>
      <pubDate>Sun, 01 May 2022 00:00:00 +0000</pubDate>
      <guid>https://matteocourthoud.github.io/course/data-science/04_data_wrangling/</guid>
      <description>&lt;h2 id=&#34;setup&#34;&gt;Setup&lt;/h2&gt;
&lt;p&gt;For the scope of this tutorial we are going to use AirBnb Scraped data for the city of Bologna. The data is freely available at &lt;strong&gt;Inside AirBnb&lt;/strong&gt;: &lt;a href=&#34;http://insideairbnb.com/get-the-data.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://insideairbnb.com/get-the-data.html&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A description of all variables in all datasets is avaliable &lt;a href=&#34;https://docs.google.com/spreadsheets/d/1iWCNJcSutYqpULSQHlNyGInUvHg2BoUGoNRIGa6Szc4/edit#gid=982310896&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We are going to use 2 datasets:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;listing dataset: contains listing-level information&lt;/li&gt;
&lt;li&gt;pricing dataset: contains pricing data, over time&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np
import pandas as pd
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Import listings data
url_listings = &amp;quot;http://data.insideairbnb.com/italy/emilia-romagna/bologna/2021-12-17/visualisations/listings.csv&amp;quot;
df_listings = pd.read_csv(url_listings)

# Import pricing data
url_prices = &amp;quot;http://data.insideairbnb.com/italy/emilia-romagna/bologna/2021-12-17/data/calendar.csv.gz&amp;quot;
df_prices = pd.read_csv(url_prices, compression=&amp;quot;gzip&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;sorting-and-renaming&#34;&gt;Sorting and Renaming&lt;/h2&gt;
&lt;p&gt;You can &lt;strong&gt;sort&lt;/strong&gt; the data using the &lt;code&gt;sort_values&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Options&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ascending&lt;/code&gt;: bool or list of bool, default True&lt;/li&gt;
&lt;li&gt;&lt;code&gt;na_position&lt;/code&gt;: {âfirstâ, âlastâ}, default âlastâ&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_listings.sort_values(by=[&#39;name&#39;, &#39;price&#39;], 
                        ascending=[False, True], 
                        na_position=&#39;last&#39;).head()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;id&lt;/th&gt;
      &lt;th&gt;name&lt;/th&gt;
      &lt;th&gt;host_id&lt;/th&gt;
      &lt;th&gt;host_name&lt;/th&gt;
      &lt;th&gt;neighbourhood_group&lt;/th&gt;
      &lt;th&gt;neighbourhood&lt;/th&gt;
      &lt;th&gt;latitude&lt;/th&gt;
      &lt;th&gt;longitude&lt;/th&gt;
      &lt;th&gt;room_type&lt;/th&gt;
      &lt;th&gt;price&lt;/th&gt;
      &lt;th&gt;minimum_nights&lt;/th&gt;
      &lt;th&gt;number_of_reviews&lt;/th&gt;
      &lt;th&gt;last_review&lt;/th&gt;
      &lt;th&gt;reviews_per_month&lt;/th&gt;
      &lt;th&gt;calculated_host_listings_count&lt;/th&gt;
      &lt;th&gt;availability_365&lt;/th&gt;
      &lt;th&gt;number_of_reviews_ltm&lt;/th&gt;
      &lt;th&gt;license&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;2280&lt;/th&gt;
      &lt;td&gt;38601411&lt;/td&gt;
      &lt;td&gt;ð¡Giardino di Annabella-relax in cittÃ -casa intera&lt;/td&gt;
      &lt;td&gt;240803020&lt;/td&gt;
      &lt;td&gt;Annabella&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;Porto - Saragozza&lt;/td&gt;
      &lt;td&gt;44.49303&lt;/td&gt;
      &lt;td&gt;11.31986&lt;/td&gt;
      &lt;td&gt;Entire home/apt&lt;/td&gt;
      &lt;td&gt;90&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;53&lt;/td&gt;
      &lt;td&gt;2021-12-13&lt;/td&gt;
      &lt;td&gt;1.96&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;76&lt;/td&gt;
      &lt;td&gt;27&lt;/td&gt;
      &lt;td&gt;392901&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2988&lt;/th&gt;
      &lt;td&gt;48177313&lt;/td&gt;
      &lt;td&gt;â¤ Romantic Suite with SPA Bath â¤ 4starbologna.com&lt;/td&gt;
      &lt;td&gt;239491712&lt;/td&gt;
      &lt;td&gt;4 Star Bologna&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;Santo Stefano&lt;/td&gt;
      &lt;td&gt;44.50271&lt;/td&gt;
      &lt;td&gt;11.34998&lt;/td&gt;
      &lt;td&gt;Entire home/apt&lt;/td&gt;
      &lt;td&gt;309&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2021-03-14&lt;/td&gt;
      &lt;td&gt;0.11&lt;/td&gt;
      &lt;td&gt;14&lt;/td&gt;
      &lt;td&gt;344&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3302&lt;/th&gt;
      &lt;td&gt;52367336&lt;/td&gt;
      &lt;td&gt;â¨House of Alchemyâ¨&lt;/td&gt;
      &lt;td&gt;140013413&lt;/td&gt;
      &lt;td&gt;Greta&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;Porto - Saragozza&lt;/td&gt;
      &lt;td&gt;44.49072&lt;/td&gt;
      &lt;td&gt;11.30890&lt;/td&gt;
      &lt;td&gt;Entire home/apt&lt;/td&gt;
      &lt;td&gt;96&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;2021-11-28&lt;/td&gt;
      &lt;td&gt;3.18&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;88&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2039&lt;/th&gt;
      &lt;td&gt;34495335&lt;/td&gt;
      &lt;td&gt;â¥ Romantic for Couple in Love â¥ | 4 Star Boutique&lt;/td&gt;
      &lt;td&gt;239491712&lt;/td&gt;
      &lt;td&gt;4 Star Bologna&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;Santo Stefano&lt;/td&gt;
      &lt;td&gt;44.50368&lt;/td&gt;
      &lt;td&gt;11.34972&lt;/td&gt;
      &lt;td&gt;Entire home/apt&lt;/td&gt;
      &lt;td&gt;143&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;25&lt;/td&gt;
      &lt;td&gt;2021-08-20&lt;/td&gt;
      &lt;td&gt;0.79&lt;/td&gt;
      &lt;td&gt;14&lt;/td&gt;
      &lt;td&gt;262&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2964&lt;/th&gt;
      &lt;td&gt;47866124&lt;/td&gt;
      &lt;td&gt;â¡Amazing Suite with Private SPA â¡ 4starbologna...&lt;/td&gt;
      &lt;td&gt;239491712&lt;/td&gt;
      &lt;td&gt;4 Star Bologna&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;Santo Stefano&lt;/td&gt;
      &lt;td&gt;44.50381&lt;/td&gt;
      &lt;td&gt;11.34951&lt;/td&gt;
      &lt;td&gt;Entire home/apt&lt;/td&gt;
      &lt;td&gt;347&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;2021-10-17&lt;/td&gt;
      &lt;td&gt;0.72&lt;/td&gt;
      &lt;td&gt;14&lt;/td&gt;
      &lt;td&gt;337&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;You can remane columns using the &lt;code&gt;rename()&lt;/code&gt; function. It takes a dictionary as &lt;code&gt;column&lt;/code&gt; argument in the form &lt;code&gt;{&amp;quot;old_name&amp;quot;: &amp;quot;new_name&amp;quot;}&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_listings.rename(columns={&#39;name&#39;: &#39;listing_name&#39;, 
                            &#39;id&#39;: &#39;listing_id&#39;}).head()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;listing_id&lt;/th&gt;
      &lt;th&gt;listing_name&lt;/th&gt;
      &lt;th&gt;host_id&lt;/th&gt;
      &lt;th&gt;host_name&lt;/th&gt;
      &lt;th&gt;neighbourhood_group&lt;/th&gt;
      &lt;th&gt;neighbourhood&lt;/th&gt;
      &lt;th&gt;latitude&lt;/th&gt;
      &lt;th&gt;longitude&lt;/th&gt;
      &lt;th&gt;room_type&lt;/th&gt;
      &lt;th&gt;price&lt;/th&gt;
      &lt;th&gt;minimum_nights&lt;/th&gt;
      &lt;th&gt;number_of_reviews&lt;/th&gt;
      &lt;th&gt;last_review&lt;/th&gt;
      &lt;th&gt;reviews_per_month&lt;/th&gt;
      &lt;th&gt;calculated_host_listings_count&lt;/th&gt;
      &lt;th&gt;availability_365&lt;/th&gt;
      &lt;th&gt;number_of_reviews_ltm&lt;/th&gt;
      &lt;th&gt;license&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;42196&lt;/td&gt;
      &lt;td&gt;50 sm Studio in the historic centre&lt;/td&gt;
      &lt;td&gt;184487&lt;/td&gt;
      &lt;td&gt;Carlo&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;Santo Stefano&lt;/td&gt;
      &lt;td&gt;44.48507&lt;/td&gt;
      &lt;td&gt;11.34786&lt;/td&gt;
      &lt;td&gt;Entire home/apt&lt;/td&gt;
      &lt;td&gt;68&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;180&lt;/td&gt;
      &lt;td&gt;2021-11-12&lt;/td&gt;
      &lt;td&gt;1.32&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;161&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;46352&lt;/td&gt;
      &lt;td&gt;A room in Pasolini&#39;s house&lt;/td&gt;
      &lt;td&gt;467810&lt;/td&gt;
      &lt;td&gt;Eleonora&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;Porto - Saragozza&lt;/td&gt;
      &lt;td&gt;44.49168&lt;/td&gt;
      &lt;td&gt;11.33514&lt;/td&gt;
      &lt;td&gt;Private room&lt;/td&gt;
      &lt;td&gt;29&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;300&lt;/td&gt;
      &lt;td&gt;2021-11-30&lt;/td&gt;
      &lt;td&gt;2.20&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;248&lt;/td&gt;
      &lt;td&gt;37&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;59697&lt;/td&gt;
      &lt;td&gt;COZY LARGE BEDROOM in the city center&lt;/td&gt;
      &lt;td&gt;286688&lt;/td&gt;
      &lt;td&gt;Paolo&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;Santo Stefano&lt;/td&gt;
      &lt;td&gt;44.48817&lt;/td&gt;
      &lt;td&gt;11.34124&lt;/td&gt;
      &lt;td&gt;Private room&lt;/td&gt;
      &lt;td&gt;50&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;240&lt;/td&gt;
      &lt;td&gt;2020-10-04&lt;/td&gt;
      &lt;td&gt;2.18&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;327&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;85368&lt;/td&gt;
      &lt;td&gt;Garden House Bologna&lt;/td&gt;
      &lt;td&gt;467675&lt;/td&gt;
      &lt;td&gt;Anna Maria&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;Santo Stefano&lt;/td&gt;
      &lt;td&gt;44.47834&lt;/td&gt;
      &lt;td&gt;11.35672&lt;/td&gt;
      &lt;td&gt;Entire home/apt&lt;/td&gt;
      &lt;td&gt;126&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;40&lt;/td&gt;
      &lt;td&gt;2019-11-03&lt;/td&gt;
      &lt;td&gt;0.34&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;332&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;145779&lt;/td&gt;
      &lt;td&gt;SINGLE ROOM&lt;/td&gt;
      &lt;td&gt;705535&lt;/td&gt;
      &lt;td&gt;Valerio&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;Porto - Saragozza&lt;/td&gt;
      &lt;td&gt;44.49306&lt;/td&gt;
      &lt;td&gt;11.33786&lt;/td&gt;
      &lt;td&gt;Private room&lt;/td&gt;
      &lt;td&gt;50&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;69&lt;/td&gt;
      &lt;td&gt;2021-12-05&lt;/td&gt;
      &lt;td&gt;0.55&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;365&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h2 id=&#34;aggregating&#34;&gt;Aggregating&lt;/h2&gt;
&lt;p&gt;If we want to count observations across 2 categorical variables, we can use &lt;code&gt;pd.crosstab()&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pd.crosstab(df_listings[&#39;neighbourhood&#39;], df_listings[&#39;room_type&#39;])
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;room_type&lt;/th&gt;
      &lt;th&gt;Entire home/apt&lt;/th&gt;
      &lt;th&gt;Hotel room&lt;/th&gt;
      &lt;th&gt;Private room&lt;/th&gt;
      &lt;th&gt;Shared room&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;neighbourhood&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;Borgo Panigale - Reno&lt;/th&gt;
      &lt;td&gt;107&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;39&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Navile&lt;/th&gt;
      &lt;td&gt;250&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;149&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Porto - Saragozza&lt;/th&gt;
      &lt;td&gt;842&lt;/td&gt;
      &lt;td&gt;16&lt;/td&gt;
      &lt;td&gt;299&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;San Donato - San Vitale&lt;/th&gt;
      &lt;td&gt;280&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;134&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Santo Stefano&lt;/th&gt;
      &lt;td&gt;924&lt;/td&gt;
      &lt;td&gt;29&lt;/td&gt;
      &lt;td&gt;237&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Savena&lt;/th&gt;
      &lt;td&gt;73&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;48&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;We can compute statistics by group using &lt;code&gt;groupby()&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_listings.groupby(&#39;neighbourhood&#39;)[[&#39;price&#39;, &#39;reviews_per_month&#39;]].mean()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;price&lt;/th&gt;
      &lt;th&gt;reviews_per_month&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;neighbourhood&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;Borgo Panigale - Reno&lt;/th&gt;
      &lt;td&gt;83.020548&lt;/td&gt;
      &lt;td&gt;0.983488&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Navile&lt;/th&gt;
      &lt;td&gt;142.200993&lt;/td&gt;
      &lt;td&gt;1.156745&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Porto - Saragozza&lt;/th&gt;
      &lt;td&gt;129.908312&lt;/td&gt;
      &lt;td&gt;1.340325&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;San Donato - San Vitale&lt;/th&gt;
      &lt;td&gt;91.618138&lt;/td&gt;
      &lt;td&gt;0.933011&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Santo Stefano&lt;/th&gt;
      &lt;td&gt;119.441841&lt;/td&gt;
      &lt;td&gt;1.344810&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Savena&lt;/th&gt;
      &lt;td&gt;69.626016&lt;/td&gt;
      &lt;td&gt;0.805888&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;If you want to perform more than one function, maybe on different columns, you can use &lt;code&gt;aggregate()&lt;/code&gt; which can be shortened to &lt;code&gt;agg()&lt;/code&gt;. The sintax is &lt;code&gt;agg(output_var = (&amp;quot;input_var&amp;quot;, function))&lt;/code&gt; and it accepts also &lt;code&gt;numpy&lt;/code&gt; functions.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_listings.groupby(&#39;neighbourhood&#39;).agg(mean_reviews=(&amp;quot;reviews_per_month&amp;quot;, &amp;quot;mean&amp;quot;),
                                         min_price=(&amp;quot;price&amp;quot;, &amp;quot;min&amp;quot;),
                                         max_price=(&amp;quot;price&amp;quot;, np.max)).reset_index()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;neighbourhood&lt;/th&gt;
      &lt;th&gt;mean_reviews&lt;/th&gt;
      &lt;th&gt;min_price&lt;/th&gt;
      &lt;th&gt;max_price&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;Borgo Panigale - Reno&lt;/td&gt;
      &lt;td&gt;0.983488&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;1429&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;Navile&lt;/td&gt;
      &lt;td&gt;1.156745&lt;/td&gt;
      &lt;td&gt;14&lt;/td&gt;
      &lt;td&gt;5000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;Porto - Saragozza&lt;/td&gt;
      &lt;td&gt;1.340325&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;9999&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;San Donato - San Vitale&lt;/td&gt;
      &lt;td&gt;0.933011&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;1600&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;Santo Stefano&lt;/td&gt;
      &lt;td&gt;1.344810&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
      &lt;td&gt;9999&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;5&lt;/th&gt;
      &lt;td&gt;Savena&lt;/td&gt;
      &lt;td&gt;0.805888&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;680&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;If we want to build a new column by group, we can use &lt;code&gt;transform()&lt;/code&gt; on the grouped data. Unfortunately, it does not work as nicely as &lt;code&gt;aggregate()&lt;/code&gt; and we have to do one column at the time.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_listings.groupby(&#39;neighbourhood&#39;)[[&#39;price&#39;, &#39;reviews_per_month&#39;]].transform(&#39;mean&#39;).head()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;price&lt;/th&gt;
      &lt;th&gt;reviews_per_month&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;119.441841&lt;/td&gt;
      &lt;td&gt;1.344810&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;129.908312&lt;/td&gt;
      &lt;td&gt;1.340325&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;119.441841&lt;/td&gt;
      &lt;td&gt;1.344810&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;119.441841&lt;/td&gt;
      &lt;td&gt;1.344810&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;129.908312&lt;/td&gt;
      &lt;td&gt;1.340325&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h2 id=&#34;combining-datasets&#34;&gt;Combining Datasets&lt;/h2&gt;
&lt;p&gt;We can &lt;strong&gt;concatenate&lt;/strong&gt; datasets using &lt;code&gt;pd.concat()&lt;/code&gt;. It takes as argument a list of dataframes. By default, &lt;code&gt;pd.concat()&lt;/code&gt; performs the outer join. We can change it using the &lt;code&gt;join&lt;/code&gt; option (in this case, it makes no difference).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_listings1 = df_listings[:2000]
np.shape(df_listings1)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;(2000, 18)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_listings2 = df_listings[1000:]
np.shape(df_listings2)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;(2453, 18)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.shape(
    pd.concat([df_listings1, df_listings2])
)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;(4453, 18)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To instead merge dataframes, we can use the &lt;code&gt;pd.merge&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Options&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;how&lt;/code&gt;: {âleftâ, ârightâ, âouterâ, âinnerâ, âcrossâ}, default âinnerâ&lt;/li&gt;
&lt;li&gt;&lt;code&gt;on&lt;/code&gt;: label or list&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_merged = pd.merge(df_listings, df_prices, left_on=&#39;id&#39;, right_on=&#39;listing_id&#39;, how=&#39;inner&#39;)
df_merged.head()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;id&lt;/th&gt;
      &lt;th&gt;name&lt;/th&gt;
      &lt;th&gt;host_id&lt;/th&gt;
      &lt;th&gt;host_name&lt;/th&gt;
      &lt;th&gt;neighbourhood_group&lt;/th&gt;
      &lt;th&gt;neighbourhood&lt;/th&gt;
      &lt;th&gt;latitude&lt;/th&gt;
      &lt;th&gt;longitude&lt;/th&gt;
      &lt;th&gt;room_type&lt;/th&gt;
      &lt;th&gt;price_x&lt;/th&gt;
      &lt;th&gt;...&lt;/th&gt;
      &lt;th&gt;availability_365&lt;/th&gt;
      &lt;th&gt;number_of_reviews_ltm&lt;/th&gt;
      &lt;th&gt;license&lt;/th&gt;
      &lt;th&gt;listing_id&lt;/th&gt;
      &lt;th&gt;date&lt;/th&gt;
      &lt;th&gt;available&lt;/th&gt;
      &lt;th&gt;price_y&lt;/th&gt;
      &lt;th&gt;adjusted_price&lt;/th&gt;
      &lt;th&gt;minimum_nights_y&lt;/th&gt;
      &lt;th&gt;maximum_nights&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;42196&lt;/td&gt;
      &lt;td&gt;50 sm Studio in the historic centre&lt;/td&gt;
      &lt;td&gt;184487&lt;/td&gt;
      &lt;td&gt;Carlo&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;Santo Stefano&lt;/td&gt;
      &lt;td&gt;44.48507&lt;/td&gt;
      &lt;td&gt;11.34786&lt;/td&gt;
      &lt;td&gt;Entire home/apt&lt;/td&gt;
      &lt;td&gt;68&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;161&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;42196&lt;/td&gt;
      &lt;td&gt;2021-12-17&lt;/td&gt;
      &lt;td&gt;f&lt;/td&gt;
      &lt;td&gt;$68.00&lt;/td&gt;
      &lt;td&gt;$68.00&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;360&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;42196&lt;/td&gt;
      &lt;td&gt;50 sm Studio in the historic centre&lt;/td&gt;
      &lt;td&gt;184487&lt;/td&gt;
      &lt;td&gt;Carlo&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;Santo Stefano&lt;/td&gt;
      &lt;td&gt;44.48507&lt;/td&gt;
      &lt;td&gt;11.34786&lt;/td&gt;
      &lt;td&gt;Entire home/apt&lt;/td&gt;
      &lt;td&gt;68&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;161&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;42196&lt;/td&gt;
      &lt;td&gt;2021-12-18&lt;/td&gt;
      &lt;td&gt;f&lt;/td&gt;
      &lt;td&gt;$68.00&lt;/td&gt;
      &lt;td&gt;$68.00&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;360&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;42196&lt;/td&gt;
      &lt;td&gt;50 sm Studio in the historic centre&lt;/td&gt;
      &lt;td&gt;184487&lt;/td&gt;
      &lt;td&gt;Carlo&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;Santo Stefano&lt;/td&gt;
      &lt;td&gt;44.48507&lt;/td&gt;
      &lt;td&gt;11.34786&lt;/td&gt;
      &lt;td&gt;Entire home/apt&lt;/td&gt;
      &lt;td&gt;68&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;161&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;42196&lt;/td&gt;
      &lt;td&gt;2021-12-19&lt;/td&gt;
      &lt;td&gt;f&lt;/td&gt;
      &lt;td&gt;$68.00&lt;/td&gt;
      &lt;td&gt;$68.00&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;360&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;42196&lt;/td&gt;
      &lt;td&gt;50 sm Studio in the historic centre&lt;/td&gt;
      &lt;td&gt;184487&lt;/td&gt;
      &lt;td&gt;Carlo&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;Santo Stefano&lt;/td&gt;
      &lt;td&gt;44.48507&lt;/td&gt;
      &lt;td&gt;11.34786&lt;/td&gt;
      &lt;td&gt;Entire home/apt&lt;/td&gt;
      &lt;td&gt;68&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;161&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;42196&lt;/td&gt;
      &lt;td&gt;2021-12-20&lt;/td&gt;
      &lt;td&gt;f&lt;/td&gt;
      &lt;td&gt;$68.00&lt;/td&gt;
      &lt;td&gt;$68.00&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;360&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;42196&lt;/td&gt;
      &lt;td&gt;50 sm Studio in the historic centre&lt;/td&gt;
      &lt;td&gt;184487&lt;/td&gt;
      &lt;td&gt;Carlo&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;Santo Stefano&lt;/td&gt;
      &lt;td&gt;44.48507&lt;/td&gt;
      &lt;td&gt;11.34786&lt;/td&gt;
      &lt;td&gt;Entire home/apt&lt;/td&gt;
      &lt;td&gt;68&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;161&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;42196&lt;/td&gt;
      &lt;td&gt;2021-12-21&lt;/td&gt;
      &lt;td&gt;f&lt;/td&gt;
      &lt;td&gt;$68.00&lt;/td&gt;
      &lt;td&gt;$68.00&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;360&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;5 rows Ã 25 columns&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;As you can see, since the variable &lt;code&gt;price&lt;/code&gt; was present in both datasets, we now have a &lt;code&gt;price.x&lt;/code&gt; and a &lt;code&gt;price.y&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;reshaping&#34;&gt;Reshaping&lt;/h2&gt;
&lt;p&gt;First, let&amp;rsquo;s compute average prices by &lt;code&gt;neighbourhood&lt;/code&gt; and &lt;code&gt;date&lt;/code&gt; using the merged dataset.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_long = df_merged.groupby([&#39;neighbourhood&#39;, &#39;date&#39;])[&#39;price_x&#39;].agg(&#39;mean&#39;).reset_index()
df_long.head()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;neighbourhood&lt;/th&gt;
      &lt;th&gt;date&lt;/th&gt;
      &lt;th&gt;price_x&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;Borgo Panigale - Reno&lt;/td&gt;
      &lt;td&gt;2021-12-17&lt;/td&gt;
      &lt;td&gt;83.020548&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;Borgo Panigale - Reno&lt;/td&gt;
      &lt;td&gt;2021-12-18&lt;/td&gt;
      &lt;td&gt;83.020548&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;Borgo Panigale - Reno&lt;/td&gt;
      &lt;td&gt;2021-12-19&lt;/td&gt;
      &lt;td&gt;83.020548&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;Borgo Panigale - Reno&lt;/td&gt;
      &lt;td&gt;2021-12-20&lt;/td&gt;
      &lt;td&gt;83.020548&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;Borgo Panigale - Reno&lt;/td&gt;
      &lt;td&gt;2021-12-21&lt;/td&gt;
      &lt;td&gt;83.020548&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;This is what is called &lt;strong&gt;long format&lt;/strong&gt; since it has one or more variables (&lt;code&gt;price_x&lt;/code&gt; in this case) stacked vertically along a categorical variable (&lt;code&gt;neighborhood&lt;/code&gt; and &lt;code&gt;date&lt;/code&gt; here), which acts as index.&lt;/p&gt;
&lt;p&gt;The alternative is the &lt;strong&gt;wide format&lt;/strong&gt; where we have one separate column for each neighborhood.&lt;/p&gt;
&lt;p&gt;We can &lt;strong&gt;reshape&lt;/strong&gt; the dataset from &lt;strong&gt;long to wide&lt;/strong&gt; using the &lt;code&gt;pd.pivot()&lt;/code&gt; command. d&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_wide = pd.pivot(data=df_long, index=&#39;date&#39;, columns=&#39;neighbourhood&#39;).reset_index()
df_wide.head()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead tr th {
    text-align: left;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;date&lt;/th&gt;
      &lt;th colspan=&#34;6&#34; halign=&#34;left&#34;&gt;price_x&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;neighbourhood&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Borgo Panigale - Reno&lt;/th&gt;
      &lt;th&gt;Navile&lt;/th&gt;
      &lt;th&gt;Porto - Saragozza&lt;/th&gt;
      &lt;th&gt;San Donato - San Vitale&lt;/th&gt;
      &lt;th&gt;Santo Stefano&lt;/th&gt;
      &lt;th&gt;Savena&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;2021-12-17&lt;/td&gt;
      &lt;td&gt;83.020548&lt;/td&gt;
      &lt;td&gt;142.200993&lt;/td&gt;
      &lt;td&gt;129.908312&lt;/td&gt;
      &lt;td&gt;91.618138&lt;/td&gt;
      &lt;td&gt;119.441841&lt;/td&gt;
      &lt;td&gt;69.626016&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;2021-12-18&lt;/td&gt;
      &lt;td&gt;83.020548&lt;/td&gt;
      &lt;td&gt;142.200993&lt;/td&gt;
      &lt;td&gt;129.908312&lt;/td&gt;
      &lt;td&gt;91.618138&lt;/td&gt;
      &lt;td&gt;119.441841&lt;/td&gt;
      &lt;td&gt;69.626016&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;2021-12-19&lt;/td&gt;
      &lt;td&gt;83.020548&lt;/td&gt;
      &lt;td&gt;142.200993&lt;/td&gt;
      &lt;td&gt;129.908312&lt;/td&gt;
      &lt;td&gt;91.618138&lt;/td&gt;
      &lt;td&gt;119.441841&lt;/td&gt;
      &lt;td&gt;69.626016&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;2021-12-20&lt;/td&gt;
      &lt;td&gt;83.020548&lt;/td&gt;
      &lt;td&gt;142.200993&lt;/td&gt;
      &lt;td&gt;129.908312&lt;/td&gt;
      &lt;td&gt;91.618138&lt;/td&gt;
      &lt;td&gt;119.441841&lt;/td&gt;
      &lt;td&gt;69.626016&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;2021-12-21&lt;/td&gt;
      &lt;td&gt;83.020548&lt;/td&gt;
      &lt;td&gt;142.200993&lt;/td&gt;
      &lt;td&gt;129.908312&lt;/td&gt;
      &lt;td&gt;91.618138&lt;/td&gt;
      &lt;td&gt;119.441841&lt;/td&gt;
      &lt;td&gt;69.626016&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;We can &lt;strong&gt;reshape&lt;/strong&gt; the dataset from &lt;strong&gt;wide to long&lt;/strong&gt; using the &lt;code&gt;pd.melt()&lt;/code&gt; command. It takes the following arguments&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;data&lt;/code&gt;: the dataframe&lt;/li&gt;
&lt;li&gt;&lt;code&gt;id_vars&lt;/code&gt;: the variable that was indexing the old dataset&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pd.melt(df_wide, id_vars=&#39;date&#39;, value_name=&#39;price&#39;).head()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;date&lt;/th&gt;
      &lt;th&gt;None&lt;/th&gt;
      &lt;th&gt;neighbourhood&lt;/th&gt;
      &lt;th&gt;price&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;2021-12-17&lt;/td&gt;
      &lt;td&gt;price_x&lt;/td&gt;
      &lt;td&gt;Borgo Panigale - Reno&lt;/td&gt;
      &lt;td&gt;83.020548&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;2021-12-18&lt;/td&gt;
      &lt;td&gt;price_x&lt;/td&gt;
      &lt;td&gt;Borgo Panigale - Reno&lt;/td&gt;
      &lt;td&gt;83.020548&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;2021-12-19&lt;/td&gt;
      &lt;td&gt;price_x&lt;/td&gt;
      &lt;td&gt;Borgo Panigale - Reno&lt;/td&gt;
      &lt;td&gt;83.020548&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;2021-12-20&lt;/td&gt;
      &lt;td&gt;price_x&lt;/td&gt;
      &lt;td&gt;Borgo Panigale - Reno&lt;/td&gt;
      &lt;td&gt;83.020548&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;2021-12-21&lt;/td&gt;
      &lt;td&gt;price_x&lt;/td&gt;
      &lt;td&gt;Borgo Panigale - Reno&lt;/td&gt;
      &lt;td&gt;83.020548&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;If we do not have &lt;code&gt;MultiIndex&lt;/code&gt; columns, but just a common prefix, we can &lt;strong&gt;reshape&lt;/strong&gt; the dataset from &lt;strong&gt;wide to long&lt;/strong&gt; using the &lt;code&gt;pd.wide_to_long()&lt;/code&gt; command.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_wide2 = df_wide.copy()
df_wide2.columns = [&#39;&#39;.join(col) for col in df_wide2.columns]
df_wide2.head()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;date&lt;/th&gt;
      &lt;th&gt;price_xBorgo Panigale - Reno&lt;/th&gt;
      &lt;th&gt;price_xNavile&lt;/th&gt;
      &lt;th&gt;price_xPorto - Saragozza&lt;/th&gt;
      &lt;th&gt;price_xSan Donato - San Vitale&lt;/th&gt;
      &lt;th&gt;price_xSanto Stefano&lt;/th&gt;
      &lt;th&gt;price_xSavena&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;2021-12-17&lt;/td&gt;
      &lt;td&gt;83.020548&lt;/td&gt;
      &lt;td&gt;142.200993&lt;/td&gt;
      &lt;td&gt;129.908312&lt;/td&gt;
      &lt;td&gt;91.618138&lt;/td&gt;
      &lt;td&gt;119.441841&lt;/td&gt;
      &lt;td&gt;69.626016&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;2021-12-18&lt;/td&gt;
      &lt;td&gt;83.020548&lt;/td&gt;
      &lt;td&gt;142.200993&lt;/td&gt;
      &lt;td&gt;129.908312&lt;/td&gt;
      &lt;td&gt;91.618138&lt;/td&gt;
      &lt;td&gt;119.441841&lt;/td&gt;
      &lt;td&gt;69.626016&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;2021-12-19&lt;/td&gt;
      &lt;td&gt;83.020548&lt;/td&gt;
      &lt;td&gt;142.200993&lt;/td&gt;
      &lt;td&gt;129.908312&lt;/td&gt;
      &lt;td&gt;91.618138&lt;/td&gt;
      &lt;td&gt;119.441841&lt;/td&gt;
      &lt;td&gt;69.626016&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;2021-12-20&lt;/td&gt;
      &lt;td&gt;83.020548&lt;/td&gt;
      &lt;td&gt;142.200993&lt;/td&gt;
      &lt;td&gt;129.908312&lt;/td&gt;
      &lt;td&gt;91.618138&lt;/td&gt;
      &lt;td&gt;119.441841&lt;/td&gt;
      &lt;td&gt;69.626016&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;2021-12-21&lt;/td&gt;
      &lt;td&gt;83.020548&lt;/td&gt;
      &lt;td&gt;142.200993&lt;/td&gt;
      &lt;td&gt;129.908312&lt;/td&gt;
      &lt;td&gt;91.618138&lt;/td&gt;
      &lt;td&gt;119.441841&lt;/td&gt;
      &lt;td&gt;69.626016&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;pd.wide_to_long()&lt;/code&gt; command takes the following arguments&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;data&lt;/code&gt;: the dataframe&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stubnames&lt;/code&gt;: the prefixes of the variables that we want to reshape into one&lt;/li&gt;
&lt;li&gt;&lt;code&gt;i&lt;/code&gt;: the variable that was indexing the old dataset&lt;/li&gt;
&lt;li&gt;&lt;code&gt;j&lt;/code&gt;: the name of the new categorical variable that we extract from &lt;code&gt;stubnames&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;suffix&lt;/code&gt;: regular expression of the suffix, the default is &lt;code&gt;\d+&lt;/code&gt;, i.e. digits&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pd.wide_to_long(df_wide2, stubnames=&#39;price_x&#39;, i=&#39;date&#39;, j=&#39;neighborhood&#39;, suffix=&#39;\D+&#39;).head()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;price_x&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;date&lt;/th&gt;
      &lt;th&gt;neighborhood&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;2021-12-17&lt;/th&gt;
      &lt;th&gt;Borgo Panigale - Reno&lt;/th&gt;
      &lt;td&gt;83.020548&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2021-12-18&lt;/th&gt;
      &lt;th&gt;Borgo Panigale - Reno&lt;/th&gt;
      &lt;td&gt;83.020548&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2021-12-19&lt;/th&gt;
      &lt;th&gt;Borgo Panigale - Reno&lt;/th&gt;
      &lt;td&gt;83.020548&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2021-12-20&lt;/th&gt;
      &lt;th&gt;Borgo Panigale - Reno&lt;/th&gt;
      &lt;td&gt;83.020548&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2021-12-21&lt;/th&gt;
      &lt;th&gt;Borgo Panigale - Reno&lt;/th&gt;
      &lt;td&gt;83.020548&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;Note that we had to change the &lt;code&gt;suffix&lt;/code&gt; to &lt;code&gt;\D+&lt;/code&gt;, i.e. not digits.&lt;/p&gt;
&lt;h2 id=&#34;window-functions&#34;&gt;Window Functions&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Methods&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;shift()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;expanding()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rolling()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;When we have time series data, we might want to do operations across time. First, let&amp;rsquo;s aggregate the &lt;code&gt;df_price&lt;/code&gt; dataset at the year-month level.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;temp = df_prices.copy()
temp[&#39;price&#39;] = temp[&#39;price&#39;].str.replace(&#39;[$|,]&#39;, &#39;&#39;, regex=True).astype(float)
temp[&#39;date&#39;] = pd.to_datetime(temp[&#39;date&#39;]).dt.to_period(&#39;M&#39;)
temp = temp.groupby([&#39;listing_id&#39;, &#39;date&#39;])[&#39;price&#39;].mean().reset_index()\
    .sort_values(by=[&#39;listing_id&#39;, &#39;date&#39;], ascending=[False, True])
temp.head()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;listing_id&lt;/th&gt;
      &lt;th&gt;date&lt;/th&gt;
      &lt;th&gt;price&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;44876&lt;/th&gt;
      &lt;td&gt;53854962&lt;/td&gt;
      &lt;td&gt;2021-12&lt;/td&gt;
      &lt;td&gt;147.400000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;44877&lt;/th&gt;
      &lt;td&gt;53854962&lt;/td&gt;
      &lt;td&gt;2022-01&lt;/td&gt;
      &lt;td&gt;137.645161&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;44878&lt;/th&gt;
      &lt;td&gt;53854962&lt;/td&gt;
      &lt;td&gt;2022-02&lt;/td&gt;
      &lt;td&gt;124.642857&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;44879&lt;/th&gt;
      &lt;td&gt;53854962&lt;/td&gt;
      &lt;td&gt;2022-03&lt;/td&gt;
      &lt;td&gt;285.096774&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;44880&lt;/th&gt;
      &lt;td&gt;53854962&lt;/td&gt;
      &lt;td&gt;2022-04&lt;/td&gt;
      &lt;td&gt;115.000000&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;We can &lt;strong&gt;lead or lag&lt;/strong&gt; one variable using &lt;code&gt;shift()&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;temp[&#39;price1&#39;] = temp[&#39;price&#39;].shift(1)
temp.head(15)
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;listing_id&lt;/th&gt;
      &lt;th&gt;date&lt;/th&gt;
      &lt;th&gt;price&lt;/th&gt;
      &lt;th&gt;price1&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;44876&lt;/th&gt;
      &lt;td&gt;53854962&lt;/td&gt;
      &lt;td&gt;2021-12&lt;/td&gt;
      &lt;td&gt;147.400000&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;44877&lt;/th&gt;
      &lt;td&gt;53854962&lt;/td&gt;
      &lt;td&gt;2022-01&lt;/td&gt;
      &lt;td&gt;137.645161&lt;/td&gt;
      &lt;td&gt;147.400000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;44878&lt;/th&gt;
      &lt;td&gt;53854962&lt;/td&gt;
      &lt;td&gt;2022-02&lt;/td&gt;
      &lt;td&gt;124.642857&lt;/td&gt;
      &lt;td&gt;137.645161&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;44879&lt;/th&gt;
      &lt;td&gt;53854962&lt;/td&gt;
      &lt;td&gt;2022-03&lt;/td&gt;
      &lt;td&gt;285.096774&lt;/td&gt;
      &lt;td&gt;124.642857&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;44880&lt;/th&gt;
      &lt;td&gt;53854962&lt;/td&gt;
      &lt;td&gt;2022-04&lt;/td&gt;
      &lt;td&gt;115.000000&lt;/td&gt;
      &lt;td&gt;285.096774&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;44881&lt;/th&gt;
      &lt;td&gt;53854962&lt;/td&gt;
      &lt;td&gt;2022-05&lt;/td&gt;
      &lt;td&gt;115.000000&lt;/td&gt;
      &lt;td&gt;115.000000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;44882&lt;/th&gt;
      &lt;td&gt;53854962&lt;/td&gt;
      &lt;td&gt;2022-06&lt;/td&gt;
      &lt;td&gt;115.000000&lt;/td&gt;
      &lt;td&gt;115.000000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;44883&lt;/th&gt;
      &lt;td&gt;53854962&lt;/td&gt;
      &lt;td&gt;2022-07&lt;/td&gt;
      &lt;td&gt;115.000000&lt;/td&gt;
      &lt;td&gt;115.000000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;44884&lt;/th&gt;
      &lt;td&gt;53854962&lt;/td&gt;
      &lt;td&gt;2022-08&lt;/td&gt;
      &lt;td&gt;115.000000&lt;/td&gt;
      &lt;td&gt;115.000000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;44885&lt;/th&gt;
      &lt;td&gt;53854962&lt;/td&gt;
      &lt;td&gt;2022-09&lt;/td&gt;
      &lt;td&gt;115.000000&lt;/td&gt;
      &lt;td&gt;115.000000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;44886&lt;/th&gt;
      &lt;td&gt;53854962&lt;/td&gt;
      &lt;td&gt;2022-10&lt;/td&gt;
      &lt;td&gt;115.000000&lt;/td&gt;
      &lt;td&gt;115.000000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;44887&lt;/th&gt;
      &lt;td&gt;53854962&lt;/td&gt;
      &lt;td&gt;2022-11&lt;/td&gt;
      &lt;td&gt;115.000000&lt;/td&gt;
      &lt;td&gt;115.000000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;44888&lt;/th&gt;
      &lt;td&gt;53854962&lt;/td&gt;
      &lt;td&gt;2022-12&lt;/td&gt;
      &lt;td&gt;115.000000&lt;/td&gt;
      &lt;td&gt;115.000000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;44863&lt;/th&gt;
      &lt;td&gt;53837654&lt;/td&gt;
      &lt;td&gt;2021-12&lt;/td&gt;
      &lt;td&gt;184.133333&lt;/td&gt;
      &lt;td&gt;115.000000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;44864&lt;/th&gt;
      &lt;td&gt;53837654&lt;/td&gt;
      &lt;td&gt;2022-01&lt;/td&gt;
      &lt;td&gt;148.741935&lt;/td&gt;
      &lt;td&gt;184.133333&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;If we want to &lt;strong&gt;lead or lag a variable within a group&lt;/strong&gt;, we can combine &lt;code&gt;shift()&lt;/code&gt; with &lt;code&gt;groupby()&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;temp[&#39;price1&#39;] = temp.groupby(&#39;listing_id&#39;)[&#39;price&#39;].shift(1)
temp.head(15)
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;listing_id&lt;/th&gt;
      &lt;th&gt;date&lt;/th&gt;
      &lt;th&gt;price&lt;/th&gt;
      &lt;th&gt;price1&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;44876&lt;/th&gt;
      &lt;td&gt;53854962&lt;/td&gt;
      &lt;td&gt;2021-12&lt;/td&gt;
      &lt;td&gt;147.400000&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;44877&lt;/th&gt;
      &lt;td&gt;53854962&lt;/td&gt;
      &lt;td&gt;2022-01&lt;/td&gt;
      &lt;td&gt;137.645161&lt;/td&gt;
      &lt;td&gt;147.400000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;44878&lt;/th&gt;
      &lt;td&gt;53854962&lt;/td&gt;
      &lt;td&gt;2022-02&lt;/td&gt;
      &lt;td&gt;124.642857&lt;/td&gt;
      &lt;td&gt;137.645161&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;44879&lt;/th&gt;
      &lt;td&gt;53854962&lt;/td&gt;
      &lt;td&gt;2022-03&lt;/td&gt;
      &lt;td&gt;285.096774&lt;/td&gt;
      &lt;td&gt;124.642857&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;44880&lt;/th&gt;
      &lt;td&gt;53854962&lt;/td&gt;
      &lt;td&gt;2022-04&lt;/td&gt;
      &lt;td&gt;115.000000&lt;/td&gt;
      &lt;td&gt;285.096774&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;44881&lt;/th&gt;
      &lt;td&gt;53854962&lt;/td&gt;
      &lt;td&gt;2022-05&lt;/td&gt;
      &lt;td&gt;115.000000&lt;/td&gt;
      &lt;td&gt;115.000000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;44882&lt;/th&gt;
      &lt;td&gt;53854962&lt;/td&gt;
      &lt;td&gt;2022-06&lt;/td&gt;
      &lt;td&gt;115.000000&lt;/td&gt;
      &lt;td&gt;115.000000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;44883&lt;/th&gt;
      &lt;td&gt;53854962&lt;/td&gt;
      &lt;td&gt;2022-07&lt;/td&gt;
      &lt;td&gt;115.000000&lt;/td&gt;
      &lt;td&gt;115.000000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;44884&lt;/th&gt;
      &lt;td&gt;53854962&lt;/td&gt;
      &lt;td&gt;2022-08&lt;/td&gt;
      &lt;td&gt;115.000000&lt;/td&gt;
      &lt;td&gt;115.000000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;44885&lt;/th&gt;
      &lt;td&gt;53854962&lt;/td&gt;
      &lt;td&gt;2022-09&lt;/td&gt;
      &lt;td&gt;115.000000&lt;/td&gt;
      &lt;td&gt;115.000000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;44886&lt;/th&gt;
      &lt;td&gt;53854962&lt;/td&gt;
      &lt;td&gt;2022-10&lt;/td&gt;
      &lt;td&gt;115.000000&lt;/td&gt;
      &lt;td&gt;115.000000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;44887&lt;/th&gt;
      &lt;td&gt;53854962&lt;/td&gt;
      &lt;td&gt;2022-11&lt;/td&gt;
      &lt;td&gt;115.000000&lt;/td&gt;
      &lt;td&gt;115.000000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;44888&lt;/th&gt;
      &lt;td&gt;53854962&lt;/td&gt;
      &lt;td&gt;2022-12&lt;/td&gt;
      &lt;td&gt;115.000000&lt;/td&gt;
      &lt;td&gt;115.000000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;44863&lt;/th&gt;
      &lt;td&gt;53837654&lt;/td&gt;
      &lt;td&gt;2021-12&lt;/td&gt;
      &lt;td&gt;184.133333&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;44864&lt;/th&gt;
      &lt;td&gt;53837654&lt;/td&gt;
      &lt;td&gt;2022-01&lt;/td&gt;
      &lt;td&gt;148.741935&lt;/td&gt;
      &lt;td&gt;184.133333&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;We can perform &lt;strong&gt;cumulative&lt;/strong&gt; operations using the &lt;code&gt;expanding()&lt;/code&gt; function&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;temp[&#39;avg_cum_price&#39;] = temp[&#39;price&#39;].expanding().mean()
temp.head(15)
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;listing_id&lt;/th&gt;
      &lt;th&gt;date&lt;/th&gt;
      &lt;th&gt;price&lt;/th&gt;
      &lt;th&gt;price1&lt;/th&gt;
      &lt;th&gt;avg_cum_price&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;44876&lt;/th&gt;
      &lt;td&gt;53854962&lt;/td&gt;
      &lt;td&gt;2021-12&lt;/td&gt;
      &lt;td&gt;147.400000&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;147.400000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;44877&lt;/th&gt;
      &lt;td&gt;53854962&lt;/td&gt;
      &lt;td&gt;2022-01&lt;/td&gt;
      &lt;td&gt;137.645161&lt;/td&gt;
      &lt;td&gt;147.400000&lt;/td&gt;
      &lt;td&gt;142.522581&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;44878&lt;/th&gt;
      &lt;td&gt;53854962&lt;/td&gt;
      &lt;td&gt;2022-02&lt;/td&gt;
      &lt;td&gt;124.642857&lt;/td&gt;
      &lt;td&gt;137.645161&lt;/td&gt;
      &lt;td&gt;136.562673&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;44879&lt;/th&gt;
      &lt;td&gt;53854962&lt;/td&gt;
      &lt;td&gt;2022-03&lt;/td&gt;
      &lt;td&gt;285.096774&lt;/td&gt;
      &lt;td&gt;124.642857&lt;/td&gt;
      &lt;td&gt;173.696198&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;44880&lt;/th&gt;
      &lt;td&gt;53854962&lt;/td&gt;
      &lt;td&gt;2022-04&lt;/td&gt;
      &lt;td&gt;115.000000&lt;/td&gt;
      &lt;td&gt;285.096774&lt;/td&gt;
      &lt;td&gt;161.956959&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;44881&lt;/th&gt;
      &lt;td&gt;53854962&lt;/td&gt;
      &lt;td&gt;2022-05&lt;/td&gt;
      &lt;td&gt;115.000000&lt;/td&gt;
      &lt;td&gt;115.000000&lt;/td&gt;
      &lt;td&gt;154.130799&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;44882&lt;/th&gt;
      &lt;td&gt;53854962&lt;/td&gt;
      &lt;td&gt;2022-06&lt;/td&gt;
      &lt;td&gt;115.000000&lt;/td&gt;
      &lt;td&gt;115.000000&lt;/td&gt;
      &lt;td&gt;148.540685&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;44883&lt;/th&gt;
      &lt;td&gt;53854962&lt;/td&gt;
      &lt;td&gt;2022-07&lt;/td&gt;
      &lt;td&gt;115.000000&lt;/td&gt;
      &lt;td&gt;115.000000&lt;/td&gt;
      &lt;td&gt;144.348099&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;44884&lt;/th&gt;
      &lt;td&gt;53854962&lt;/td&gt;
      &lt;td&gt;2022-08&lt;/td&gt;
      &lt;td&gt;115.000000&lt;/td&gt;
      &lt;td&gt;115.000000&lt;/td&gt;
      &lt;td&gt;141.087199&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;44885&lt;/th&gt;
      &lt;td&gt;53854962&lt;/td&gt;
      &lt;td&gt;2022-09&lt;/td&gt;
      &lt;td&gt;115.000000&lt;/td&gt;
      &lt;td&gt;115.000000&lt;/td&gt;
      &lt;td&gt;138.478479&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;44886&lt;/th&gt;
      &lt;td&gt;53854962&lt;/td&gt;
      &lt;td&gt;2022-10&lt;/td&gt;
      &lt;td&gt;115.000000&lt;/td&gt;
      &lt;td&gt;115.000000&lt;/td&gt;
      &lt;td&gt;136.344072&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;44887&lt;/th&gt;
      &lt;td&gt;53854962&lt;/td&gt;
      &lt;td&gt;2022-11&lt;/td&gt;
      &lt;td&gt;115.000000&lt;/td&gt;
      &lt;td&gt;115.000000&lt;/td&gt;
      &lt;td&gt;134.565399&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;44888&lt;/th&gt;
      &lt;td&gt;53854962&lt;/td&gt;
      &lt;td&gt;2022-12&lt;/td&gt;
      &lt;td&gt;115.000000&lt;/td&gt;
      &lt;td&gt;115.000000&lt;/td&gt;
      &lt;td&gt;133.060369&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;44863&lt;/th&gt;
      &lt;td&gt;53837654&lt;/td&gt;
      &lt;td&gt;2021-12&lt;/td&gt;
      &lt;td&gt;184.133333&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;136.708438&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;44864&lt;/th&gt;
      &lt;td&gt;53837654&lt;/td&gt;
      &lt;td&gt;2022-01&lt;/td&gt;
      &lt;td&gt;148.741935&lt;/td&gt;
      &lt;td&gt;184.133333&lt;/td&gt;
      &lt;td&gt;137.510671&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;To perform &lt;strong&gt;cumulative operations within a group&lt;/strong&gt;, we can combine &lt;code&gt;expanding()&lt;/code&gt; with &lt;code&gt;groupby()&lt;/code&gt;. Since groups with not enough observations get dropped, we need to merge the dataset back.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;temp.groupby(&#39;listing_id&#39;)[&#39;price&#39;].expanding().mean().reset_index(level=0).head(15)
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;listing_id&lt;/th&gt;
      &lt;th&gt;price&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;42196&lt;/td&gt;
      &lt;td&gt;68.000000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;42196&lt;/td&gt;
      &lt;td&gt;68.000000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;42196&lt;/td&gt;
      &lt;td&gt;68.000000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;42196&lt;/td&gt;
      &lt;td&gt;68.000000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;42196&lt;/td&gt;
      &lt;td&gt;68.000000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;5&lt;/th&gt;
      &lt;td&gt;42196&lt;/td&gt;
      &lt;td&gt;68.000000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;6&lt;/th&gt;
      &lt;td&gt;42196&lt;/td&gt;
      &lt;td&gt;68.000000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;7&lt;/th&gt;
      &lt;td&gt;42196&lt;/td&gt;
      &lt;td&gt;68.000000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;8&lt;/th&gt;
      &lt;td&gt;42196&lt;/td&gt;
      &lt;td&gt;68.000000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;9&lt;/th&gt;
      &lt;td&gt;42196&lt;/td&gt;
      &lt;td&gt;68.000000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;10&lt;/th&gt;
      &lt;td&gt;42196&lt;/td&gt;
      &lt;td&gt;68.000000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;11&lt;/th&gt;
      &lt;td&gt;42196&lt;/td&gt;
      &lt;td&gt;68.000000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;12&lt;/th&gt;
      &lt;td&gt;42196&lt;/td&gt;
      &lt;td&gt;68.000000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;13&lt;/th&gt;
      &lt;td&gt;46352&lt;/td&gt;
      &lt;td&gt;29.333333&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;14&lt;/th&gt;
      &lt;td&gt;46352&lt;/td&gt;
      &lt;td&gt;29.311828&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;If we want to perform an operation over a &lt;strong&gt;rolling window&lt;/strong&gt;, we can use the &lt;code&gt;rolling()&lt;/code&gt; function&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;temp[&#39;avg3_price&#39;] = temp[&#39;price&#39;].rolling(3).mean()
temp.head(15)
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;listing_id&lt;/th&gt;
      &lt;th&gt;date&lt;/th&gt;
      &lt;th&gt;price&lt;/th&gt;
      &lt;th&gt;price1&lt;/th&gt;
      &lt;th&gt;avg_cum_price&lt;/th&gt;
      &lt;th&gt;avg3_price&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;44876&lt;/th&gt;
      &lt;td&gt;53854962&lt;/td&gt;
      &lt;td&gt;2021-12&lt;/td&gt;
      &lt;td&gt;147.400000&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;147.400000&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;44877&lt;/th&gt;
      &lt;td&gt;53854962&lt;/td&gt;
      &lt;td&gt;2022-01&lt;/td&gt;
      &lt;td&gt;137.645161&lt;/td&gt;
      &lt;td&gt;147.400000&lt;/td&gt;
      &lt;td&gt;142.522581&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;44878&lt;/th&gt;
      &lt;td&gt;53854962&lt;/td&gt;
      &lt;td&gt;2022-02&lt;/td&gt;
      &lt;td&gt;124.642857&lt;/td&gt;
      &lt;td&gt;137.645161&lt;/td&gt;
      &lt;td&gt;136.562673&lt;/td&gt;
      &lt;td&gt;136.562673&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;44879&lt;/th&gt;
      &lt;td&gt;53854962&lt;/td&gt;
      &lt;td&gt;2022-03&lt;/td&gt;
      &lt;td&gt;285.096774&lt;/td&gt;
      &lt;td&gt;124.642857&lt;/td&gt;
      &lt;td&gt;173.696198&lt;/td&gt;
      &lt;td&gt;182.461598&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;44880&lt;/th&gt;
      &lt;td&gt;53854962&lt;/td&gt;
      &lt;td&gt;2022-04&lt;/td&gt;
      &lt;td&gt;115.000000&lt;/td&gt;
      &lt;td&gt;285.096774&lt;/td&gt;
      &lt;td&gt;161.956959&lt;/td&gt;
      &lt;td&gt;174.913210&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;44881&lt;/th&gt;
      &lt;td&gt;53854962&lt;/td&gt;
      &lt;td&gt;2022-05&lt;/td&gt;
      &lt;td&gt;115.000000&lt;/td&gt;
      &lt;td&gt;115.000000&lt;/td&gt;
      &lt;td&gt;154.130799&lt;/td&gt;
      &lt;td&gt;171.698925&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;44882&lt;/th&gt;
      &lt;td&gt;53854962&lt;/td&gt;
      &lt;td&gt;2022-06&lt;/td&gt;
      &lt;td&gt;115.000000&lt;/td&gt;
      &lt;td&gt;115.000000&lt;/td&gt;
      &lt;td&gt;148.540685&lt;/td&gt;
      &lt;td&gt;115.000000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;44883&lt;/th&gt;
      &lt;td&gt;53854962&lt;/td&gt;
      &lt;td&gt;2022-07&lt;/td&gt;
      &lt;td&gt;115.000000&lt;/td&gt;
      &lt;td&gt;115.000000&lt;/td&gt;
      &lt;td&gt;144.348099&lt;/td&gt;
      &lt;td&gt;115.000000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;44884&lt;/th&gt;
      &lt;td&gt;53854962&lt;/td&gt;
      &lt;td&gt;2022-08&lt;/td&gt;
      &lt;td&gt;115.000000&lt;/td&gt;
      &lt;td&gt;115.000000&lt;/td&gt;
      &lt;td&gt;141.087199&lt;/td&gt;
      &lt;td&gt;115.000000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;44885&lt;/th&gt;
      &lt;td&gt;53854962&lt;/td&gt;
      &lt;td&gt;2022-09&lt;/td&gt;
      &lt;td&gt;115.000000&lt;/td&gt;
      &lt;td&gt;115.000000&lt;/td&gt;
      &lt;td&gt;138.478479&lt;/td&gt;
      &lt;td&gt;115.000000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;44886&lt;/th&gt;
      &lt;td&gt;53854962&lt;/td&gt;
      &lt;td&gt;2022-10&lt;/td&gt;
      &lt;td&gt;115.000000&lt;/td&gt;
      &lt;td&gt;115.000000&lt;/td&gt;
      &lt;td&gt;136.344072&lt;/td&gt;
      &lt;td&gt;115.000000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;44887&lt;/th&gt;
      &lt;td&gt;53854962&lt;/td&gt;
      &lt;td&gt;2022-11&lt;/td&gt;
      &lt;td&gt;115.000000&lt;/td&gt;
      &lt;td&gt;115.000000&lt;/td&gt;
      &lt;td&gt;134.565399&lt;/td&gt;
      &lt;td&gt;115.000000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;44888&lt;/th&gt;
      &lt;td&gt;53854962&lt;/td&gt;
      &lt;td&gt;2022-12&lt;/td&gt;
      &lt;td&gt;115.000000&lt;/td&gt;
      &lt;td&gt;115.000000&lt;/td&gt;
      &lt;td&gt;133.060369&lt;/td&gt;
      &lt;td&gt;115.000000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;44863&lt;/th&gt;
      &lt;td&gt;53837654&lt;/td&gt;
      &lt;td&gt;2021-12&lt;/td&gt;
      &lt;td&gt;184.133333&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;136.708438&lt;/td&gt;
      &lt;td&gt;138.044444&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;44864&lt;/th&gt;
      &lt;td&gt;53837654&lt;/td&gt;
      &lt;td&gt;2022-01&lt;/td&gt;
      &lt;td&gt;148.741935&lt;/td&gt;
      &lt;td&gt;184.133333&lt;/td&gt;
      &lt;td&gt;137.510671&lt;/td&gt;
      &lt;td&gt;149.291756&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Plotting</title>
      <link>https://matteocourthoud.github.io/course/data-science/05_plotting/</link>
      <pubDate>Sun, 01 May 2022 00:00:00 +0000</pubDate>
      <guid>https://matteocourthoud.github.io/course/data-science/05_plotting/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np
import pandas as pd

import folium
import geopandas
import contextily
import matplotlib as mpl
import matplotlib.pyplot as plt
import seaborn as sns

from src.import_data import import_data
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For the scope of this tutorial we are going to use AirBnb Scraped data for the city of Bologna. The data is freely available at &lt;strong&gt;Inside AirBnb&lt;/strong&gt;: &lt;a href=&#34;http://insideairbnb.com/get-the-data.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://insideairbnb.com/get-the-data.html&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A description of all variables in all datasets is avaliable &lt;a href=&#34;https://docs.google.com/spreadsheets/d/1iWCNJcSutYqpULSQHlNyGInUvHg2BoUGoNRIGa6Szc4/edit#gid=982310896&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We are going to use 2 datasets:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;listing dataset: contains listing-level information&lt;/li&gt;
&lt;li&gt;pricing dataset: contains pricing data, over time&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We import and clean them with a script. If you want more details, have a look at the &lt;a href=&#34;https://matteocourthoud.github.io/course/data-science/01_data_exploration/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;data exploration&lt;/a&gt; and &lt;a href=&#34;https://matteocourthoud.github.io/course/data-science/03_data_wrangling&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;data wrangling&lt;/a&gt; sections.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_listings, df_prices, df = import_data()
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;intro&#34;&gt;Intro&lt;/h2&gt;
&lt;p&gt;The default library for plotting in python is &lt;code&gt;matplotlib&lt;/code&gt;. However, a more modern package that builds on top of it, is &lt;code&gt;seaborn&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We start by telling the notebook to display the plots inline.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;%matplotlib inline
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Another important configuration is the plot resulution. We set it to &lt;code&gt;retina&lt;/code&gt; to have high resolution plots.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;%config InlineBackend.figure_format = &#39;retina&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can choose set a general theme using &lt;code&gt;plt.style.use()&lt;/code&gt;. The list of themes is available &lt;a href=&#34;https://matplotlib.org/3.5.1/gallery/style_sheets/style_sheets_reference.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;plt.style.use(&#39;seaborn&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you want to further customize some aspects of a theme, you can set some global paramters for all plots. You can find a list of all the options &lt;a href=&#34;https://matplotlib.org/stable/tutorials/introductory/customizing.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;. If you want to customize all plots in a project in the samy way, you can create a &lt;code&gt;filename.mplstyle&lt;/code&gt; file and call it at the beginning of each file as &lt;code&gt;plt.style.use(&#39;filename.mplstyle&#39;)&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mpl.rcParams[&#39;figure.figsize&#39;] = (10,6)
mpl.rcParams[&#39;axes.labelsize&#39;] = 16
mpl.rcParams[&#39;axes.titlesize&#39;] = 18
mpl.rcParams[&#39;axes.titleweight&#39;] = &#39;bold&#39;
mpl.rcParams[&#39;figure.titlesize&#39;] = 18
mpl.rcParams[&#39;figure.titleweight&#39;] = &#39;bold&#39;
mpl.rcParams[&#39;axes.titlepad&#39;] = 20
mpl.rcParams[&#39;legend.facecolor&#39;] = &#39;w&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;distributions&#34;&gt;Distributions&lt;/h2&gt;
&lt;p&gt;Suppose you have a numerical variable and you want to see how it&amp;rsquo;s distributed. The best option is to use an &lt;strong&gt;histogram&lt;/strong&gt;. Seaborn function is &lt;code&gt;sns.histplot&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_listings[&#39;log_price&#39;] = np.log(1+df_listings[&#39;mean_price&#39;])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.histplot(df_listings[&#39;log_price&#39;], bins=50)\
.set(title=&#39;Distribution of log-prices&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../img/05_plotting_17_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;We can add a smooth kernel density approximation with the &lt;code&gt;kde&lt;/code&gt; option.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.histplot(df_listings[&#39;log_price&#39;], bins=50, kde=True)\
.set(title=&#39;Distribution of log-prices with density&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../img/05_plotting_19_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;If we have a categorical variable, we might want to plot the distribution of the data across its values. We can use a &lt;strong&gt;barplot&lt;/strong&gt;. Seaborn function is &lt;code&gt;sns.countplot()&lt;/code&gt; for count data.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.countplot(x=&amp;quot;neighborhood&amp;quot;, data=df_listings)\
.set(title=&#39;Number of observations by neighborhood&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../img/05_plotting_21_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;If instead we want to see the distribution of another variable across some group, we can use the &lt;code&gt;sns.barplot()&lt;/code&gt; function.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.barplot(x=&amp;quot;neighborhood&amp;quot;, y=&amp;quot;mean_price&amp;quot;, data=df_listings)\
.set(title=&#39;Average price by neighborhood&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../img/05_plotting_23_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;We can also use other metrics besides the mean with the &lt;code&gt;estimator&lt;/code&gt; option.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.barplot(x=&amp;quot;neighborhood&amp;quot;, y=&amp;quot;mean_price&amp;quot;, data=df_listings, estimator=np.median)\
.set(title=&#39;Median price by neighborhood&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../img/05_plotting_25_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;We can also plot the full distribution using, for example &lt;strong&gt;boxplots&lt;/strong&gt; with &lt;code&gt;sns.boxplot()&lt;/code&gt;. Boxplots display quartiles and outliers.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.boxplot(x=&amp;quot;neighborhood&amp;quot;, y=&amp;quot;log_price&amp;quot;, data=df_listings)\
.set(title=&#39;Price distribution across neighborhoods&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../img/05_plotting_27_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;If we want to see the full distribution, we can use the &lt;code&gt;sns.violinplot()&lt;/code&gt; function.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.violinplot(x=&amp;quot;neighborhood&amp;quot;, y=&amp;quot;log_price&amp;quot;, data=df_listings)\
.set(title=&#39;Price distribution across neighborhoods&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../img/05_plotting_29_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;time-series&#34;&gt;Time Series&lt;/h2&gt;
&lt;p&gt;If the dataset has a time dimension, we might want to explore how a variable evolves over time. Seaborn function is &lt;code&gt;sns.lineplot()&lt;/code&gt;. If the data has multiple observations for each time period, it will also display a 95% confidence interval around the mean.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.lineplot(data=df, x=&#39;date&#39;, y=&#39;price&#39;)\
.set(title=&amp;quot;Price distribution over time&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../img/05_plotting_32_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;We can do the samy by group, with the &lt;code&gt;hue&lt;/code&gt; option. We can suppress confidence intervals setting &lt;code&gt;ci=None&lt;/code&gt; (making the code much faster).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.lineplot(data=df, x=&#39;date&#39;, y=&#39;price&#39;, hue=&#39;neighborhood&#39;, ci=None)\
.set(title=&amp;quot;Price distribution over time&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../img/05_plotting_34_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;correlations&#34;&gt;Correlations&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_listings[&amp;quot;log_reviews&amp;quot;] = np.log(1 + df_listings[&amp;quot;number_of_reviews&amp;quot;])
df_listings[&amp;quot;log_rpm&amp;quot;] = np.log(1 + df_listings[&amp;quot;reviews_per_month&amp;quot;])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The most intuitive way to plot a correlation between two variables is a &lt;strong&gt;scatterplot&lt;/strong&gt;. Seaborn function is &lt;code&gt;sns.scatterplot()&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.scatterplot(data=df_listings, x=&amp;quot;log_rpm&amp;quot;, y=&amp;quot;log_price&amp;quot;, alpha=0.3)\
.set(title=&#39;Prices and Reviews&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../img/05_plotting_38_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;We can highlight the best linear approximation adding a line of fit using &lt;code&gt;sns.regplot()&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.regplot(x=&amp;quot;log_rpm&amp;quot;, y=&amp;quot;log_price&amp;quot;, data=df_listings,
            scatter_kws={&#39;alpha&#39;:.1},
            line_kws={&#39;color&#39;:&#39;C1&#39;})\
.set(title=&#39;Price and Reviews&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../img/05_plotting_40_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;If we want a more flexible representation of the data, we can use the &lt;code&gt;binscatter&lt;/code&gt; package. &lt;code&gt;binscatter&lt;/code&gt; splits the data into equally sized bins and displays a scatterplot of the averages.&lt;/p&gt;
&lt;p&gt;The main difference between a binscatterplot and an histogram is that in a histogram bins have the same &lt;em&gt;width&lt;/em&gt; while in a binscatterplot bins have the same &lt;em&gt;number of observations&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;An advantage of &lt;code&gt;binscatter&lt;/code&gt; is that it makes the nature of the data much more transparent, at the cost of hiding some of the background noise.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import binscatter

# Remove nans
temp = df_listings[[&amp;quot;log_rpm&amp;quot;, &amp;quot;log_price&amp;quot;]].dropna()

# Binned scatter plot of Wage vs Tenure
fig, ax = plt.subplots()
ax.binscatter(temp[&amp;quot;log_rpm&amp;quot;], temp[&amp;quot;log_price&amp;quot;]);
ax.set_title(&#39;Price and Reviews&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../img/05_plotting_42_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;As usual, we can split the data by group with the &lt;code&gt;hue&lt;/code&gt; option.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.scatterplot(data=df_listings, x=&amp;quot;log_rpm&amp;quot;, y=&amp;quot;log_price&amp;quot;, 
                hue=&amp;quot;room_type&amp;quot;, alpha=0.3)\
.set(title=&amp;quot;Prices and Ratings, by room type&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../img/05_plotting_44_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;We can also add the marginal distributions using the &lt;code&gt;sns.jointplot()&lt;/code&gt; function.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.jointplot(data=df_listings, x=&amp;quot;log_rpm&amp;quot;, y=&amp;quot;log_price&amp;quot;, kind=&amp;quot;hex&amp;quot;)\
.fig.suptitle(&amp;quot;Prices and Reviews, with marginals&amp;quot;)  
plt.subplots_adjust(top=0.9);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../img/05_plotting_46_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;If we want to plot correlations (and marginals) of multiple variables, we can use the &lt;code&gt;sns.pairplot()&lt;/code&gt; function.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.pairplot(data=df_listings,
             vars=[&amp;quot;log_rpm&amp;quot;, &amp;quot;log_reviews&amp;quot;, &amp;quot;log_price&amp;quot;],
             plot_kws={&#39;s&#39;:2})\
.fig.suptitle(&amp;quot;Correlations&amp;quot;);
plt.subplots_adjust(top=0.9)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../img/05_plotting_48_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;We can distinguish across groups with the &lt;code&gt;hue&lt;/code&gt; option.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.pairplot(data=df_listings,
             vars=[&amp;quot;log_rpm&amp;quot;, &amp;quot;log_reviews&amp;quot;, &amp;quot;log_price&amp;quot;],
             hue=&#39;room_type&#39;,
             plot_kws={&#39;s&#39;:2})\
.fig.suptitle(&amp;quot;Correlations, by room type&amp;quot;);
plt.subplots_adjust(top=0.9)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../img/05_plotting_50_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;If we want to plot all the correlations in the data, we can use the &lt;code&gt;sns.heatmap()&lt;/code&gt; function on top of a correlation matrix generated by &lt;code&gt;.corr()&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Plot
sns.heatmap(df.corr(), vmin=-1, vmax=1, linewidths=.5, cmap=&amp;quot;RdBu&amp;quot;)\
 .set(title=&amp;quot;Correlations&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../img/05_plotting_52_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;geographical-data&#34;&gt;Geographical data&lt;/h2&gt;
&lt;p&gt;We can in principle plot geographical data as a simple scatterplot.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.scatterplot(data=df_listings, x=&amp;quot;longitude&amp;quot;, y=&amp;quot;latitude&amp;quot;)\
.set(title=&#39;Listing coordinates&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../img/05_plotting_55_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;However, we can do better and do the scatterplot over a map layer.&lt;/p&gt;
&lt;p&gt;First, we neeed to convert the &lt;code&gt;latitude&lt;/code&gt; and &lt;code&gt;longitude&lt;/code&gt; variables into coordinates. We use the library &lt;code&gt;geopandas&lt;/code&gt;. Note that the original coordinate system is &lt;code&gt;4326&lt;/code&gt; (3D) and we need to &lt;code&gt;3857&lt;/code&gt; (2D).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;geom = geopandas.points_from_xy(df_listings.longitude, df_listings.latitude)
gdf = geopandas.GeoDataFrame(
    df_listings, 
    geometry=geom,
    crs=4326).to_crs(3857)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We import a map of Bologna using the library &lt;code&gt;contextily&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;bologna = contextily.Place(&amp;quot;Bologna&amp;quot;, source=contextily.providers.Stamen.TonerLite)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We are now ready to plot it with the airbnb listings.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ax = bologna.plot()
ax.set_ylim([5530000, 5555000])
gdf.plot(ax=ax, c=df_listings[&#39;mean_price&#39;], cmap=&#39;viridis&#39;, alpha=0.8);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../img/05_plotting_61_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Machine Learning Pipeline</title>
      <link>https://matteocourthoud.github.io/course/data-science/06_ml_pipeline/</link>
      <pubDate>Sun, 01 May 2022 00:00:00 +0000</pubDate>
      <guid>https://matteocourthoud.github.io/course/data-science/06_ml_pipeline/</guid>
      <description>&lt;p&gt;In this notebook, we are going to build a pipeline for a general prediction problem.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Standard Imports
from src.utils import *
from src.get_feature_names import get_feature_names
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Set inline graphs
plt.style.use(&#39;seaborn&#39;)
%matplotlib inline
%config InlineBackend.figure_format = &#39;retina&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Usually, in machine learning prediction tasks, the data consists in 3 files:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;X_train.csv&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;y_train.csv&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;X_test.csv&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The purpose of the exercise is to produce a &lt;em&gt;y_test.csv&lt;/em&gt; file, with the predicted values corresponding to the &lt;em&gt;X_test.csv&lt;/em&gt; observations.&lt;/p&gt;
&lt;p&gt;The functions we will write are going to be general and will adapt to any type of dataset, and we will test them on the &lt;a href=&#34;https://www.kaggle.com/c/house-prices-advanced-regression-techniques&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;House Prices Dataset&lt;/a&gt; which is a standard dataset for these kind of tasks. The data consists of 2 files:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;train.csv&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;test.csv&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The target variable that we want to predict is &lt;code&gt;SalePrice&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;setup&#34;&gt;Setup&lt;/h2&gt;
&lt;p&gt;First we want to import the data.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Import data
df_train = pd.read_csv(&amp;quot;data/train.csv&amp;quot;)
df_test = pd.read_csv(&amp;quot;data/test.csv&amp;quot;)

print(f&amp;quot;Training data: {np.shape(df_train)} \n Testing data: {np.shape(df_test)}&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Training data: (1460, 81) 
 Testing data: (1459, 80)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The training data also includes the target variable &lt;code&gt;SalePrice&lt;/code&gt;, while, as usual, the testing data does not. We need to separate the training data into two parts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;X&lt;/code&gt;: the &lt;strong&gt;features&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;y&lt;/code&gt;: the &lt;strong&gt;target&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Select the features
X_train = df_train.drop([&#39;SalePrice&#39;], axis=1)
X_test = df_test

# Check size
print(f&amp;quot;Training features: {np.shape(X_train)} \n Testing features: {np.shape(X_test)}&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Training features: (1460, 80) 
 Testing features: (1459, 80)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Select the target
y_train = df_train[&#39;SalePrice&#39;]

# Check size
print(f&amp;quot;Training target: {np.shape(y_train)}&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Training target: (1460,)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It&amp;rsquo;s good practice to immediately set aside a &lt;strong&gt;validation&lt;/strong&gt; sample with 20% of the observations. The purpose of the validation sample is to give us unbiased estimate of the prediction score. Therefore, we want to set it aside as soon as possible, not to be conditioned in any way by it. Possibly, set it away even before data exploration.&lt;/p&gt;
&lt;p&gt;The more we tune the algorithm based on the feedback received from the validation sample, the more biased our estimate is going to be. Ideally, one would use only cross-validation on the training data and tune only a couple of times using the validation data.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Set aside the validation sample
X_train, X_validation, y_train, y_validation = train_test_split(X_train, y_train, test_size=0.2)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we are ready to build and test our pipeline.&lt;/p&gt;
&lt;h2 id=&#34;data-exploration&#34;&gt;Data Exploration&lt;/h2&gt;
&lt;p&gt;First, let&amp;rsquo;s have a quick look at the data.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;X_train.head()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Id&lt;/th&gt;
      &lt;th&gt;MSSubClass&lt;/th&gt;
      &lt;th&gt;MSZoning&lt;/th&gt;
      &lt;th&gt;LotFrontage&lt;/th&gt;
      &lt;th&gt;LotArea&lt;/th&gt;
      &lt;th&gt;Street&lt;/th&gt;
      &lt;th&gt;Alley&lt;/th&gt;
      &lt;th&gt;LotShape&lt;/th&gt;
      &lt;th&gt;LandContour&lt;/th&gt;
      &lt;th&gt;Utilities&lt;/th&gt;
      &lt;th&gt;...&lt;/th&gt;
      &lt;th&gt;ScreenPorch&lt;/th&gt;
      &lt;th&gt;PoolArea&lt;/th&gt;
      &lt;th&gt;PoolQC&lt;/th&gt;
      &lt;th&gt;Fence&lt;/th&gt;
      &lt;th&gt;MiscFeature&lt;/th&gt;
      &lt;th&gt;MiscVal&lt;/th&gt;
      &lt;th&gt;MoSold&lt;/th&gt;
      &lt;th&gt;YrSold&lt;/th&gt;
      &lt;th&gt;SaleType&lt;/th&gt;
      &lt;th&gt;SaleCondition&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;822&lt;/th&gt;
      &lt;td&gt;823&lt;/td&gt;
      &lt;td&gt;60&lt;/td&gt;
      &lt;td&gt;RL&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;12394&lt;/td&gt;
      &lt;td&gt;Pave&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;IR1&lt;/td&gt;
      &lt;td&gt;Lvl&lt;/td&gt;
      &lt;td&gt;AllPub&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;2007&lt;/td&gt;
      &lt;td&gt;WD&lt;/td&gt;
      &lt;td&gt;Family&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;648&lt;/th&gt;
      &lt;td&gt;649&lt;/td&gt;
      &lt;td&gt;60&lt;/td&gt;
      &lt;td&gt;RL&lt;/td&gt;
      &lt;td&gt;70.0&lt;/td&gt;
      &lt;td&gt;7700&lt;/td&gt;
      &lt;td&gt;Pave&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;Reg&lt;/td&gt;
      &lt;td&gt;Lvl&lt;/td&gt;
      &lt;td&gt;AllPub&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;2010&lt;/td&gt;
      &lt;td&gt;WD&lt;/td&gt;
      &lt;td&gt;Normal&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;897&lt;/th&gt;
      &lt;td&gt;898&lt;/td&gt;
      &lt;td&gt;90&lt;/td&gt;
      &lt;td&gt;RL&lt;/td&gt;
      &lt;td&gt;64.0&lt;/td&gt;
      &lt;td&gt;7018&lt;/td&gt;
      &lt;td&gt;Pave&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;Reg&lt;/td&gt;
      &lt;td&gt;Lvl&lt;/td&gt;
      &lt;td&gt;AllPub&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;2009&lt;/td&gt;
      &lt;td&gt;WD&lt;/td&gt;
      &lt;td&gt;Alloca&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1131&lt;/th&gt;
      &lt;td&gt;1132&lt;/td&gt;
      &lt;td&gt;20&lt;/td&gt;
      &lt;td&gt;RL&lt;/td&gt;
      &lt;td&gt;63.0&lt;/td&gt;
      &lt;td&gt;10712&lt;/td&gt;
      &lt;td&gt;Pave&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;Reg&lt;/td&gt;
      &lt;td&gt;Lvl&lt;/td&gt;
      &lt;td&gt;AllPub&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;MnPrv&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;2007&lt;/td&gt;
      &lt;td&gt;Oth&lt;/td&gt;
      &lt;td&gt;Abnorml&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1038&lt;/th&gt;
      &lt;td&gt;1039&lt;/td&gt;
      &lt;td&gt;160&lt;/td&gt;
      &lt;td&gt;RM&lt;/td&gt;
      &lt;td&gt;21.0&lt;/td&gt;
      &lt;td&gt;1533&lt;/td&gt;
      &lt;td&gt;Pave&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;Reg&lt;/td&gt;
      &lt;td&gt;Lvl&lt;/td&gt;
      &lt;td&gt;AllPub&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;2009&lt;/td&gt;
      &lt;td&gt;WD&lt;/td&gt;
      &lt;td&gt;Normal&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;5 rows Ã 80 columns&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;Id&lt;/code&gt; column is clearly not useful for prediction, let&amp;rsquo;s drop it from both datasets.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Drop Id 
X_train.drop([&amp;quot;Id&amp;quot;], axis=1, inplace=True)
X_test.drop([&amp;quot;Id&amp;quot;], axis=1, inplace=True)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we want to identify categorical and numerical variables.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Save column types
numerical_cols = list(X_train.describe().columns)
categorical_cols = list(X_train.describe(include=object).columns)
print(&amp;quot;There are %i numerical and %i categorical variables&amp;quot; % (len(numerical_cols), len(categorical_cols)))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;There are 36 numerical and 43 categorical variables
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;rsquo;s start by analyzing the numerical variables.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;X_numerical = X_train.loc[:, numerical_cols]
corr = X_numerical.corr()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig, ax = plt.subplots(1, 1, figsize=(10,10))
fig.suptitle(&amp;quot;Correlation between categorical variables&amp;quot;, fontsize=16)
cbar_ax = fig.add_axes([.95, .12, .05, .76])
sns.heatmap(corr, vmin=-1, vmax=1, center=0, cmap=sns.diverging_palette(20, 220, n=20), 
            square=True, ax=ax, cbar_ax = cbar_ax)
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../img/06_ml_pipeline_24_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;For the non/numeric columns, we need a further option.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;unique_values = X_train.describe(include=object).T.unique
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Plot
fig, ax = plt.subplots(1, 1, figsize=(10,6))
fig.suptitle(&amp;quot;Distribution of unique values for categorical variables&amp;quot;, fontsize=16)
sns.histplot(data=unique_values)
plt.show();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../img/06_ml_pipeline_27_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s save the identity of the numerical and categorical columns.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Save column types
numerical_cols = list(X_train.describe().columns)
categorical_cols = list(X_train.describe(include=object).columns)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;How many missing values are there in the dataset?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;missing_values = X_train.isnull().sum().sort_values(ascending=True)[-20:] / len(X_train)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig, ax = plt.subplots(figsize=(10,8))
ax.set_title(&amp;quot;Variables with most missing values&amp;quot;, fontsize=16)
ax.barh(np.arange(len(missing_values)), missing_values)
ax.set_yticks(np.arange(len(missing_values)))
ax.set_yticklabels(missing_values.index)
ax.set_xlabel(&#39;Percentage of missig values&#39;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../img/06_ml_pipeline_32_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Around 10% of each feature is missing. We will have to deal with that.&lt;/p&gt;
&lt;h2 id=&#34;pre-processing&#34;&gt;Pre-processing&lt;/h2&gt;
&lt;p&gt;First, let&amp;rsquo;s process &lt;strong&gt;numerical variables&lt;/strong&gt;. We want to do two things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;inpute missing values&lt;/li&gt;
&lt;li&gt;standardize all variables&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Which imputer should to use? It depends on the &lt;strong&gt;type of missing data&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Missing absolutely at random&lt;/strong&gt;: as the name says, in this case we believe that missing values are distributed uniformly at random, independently across variables.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In this case, the only information on missing values comes from the distribution of non-missing values of the same variable.&lt;/li&gt;
&lt;li&gt;No information on missing values is contained in other variables.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Missing at random&lt;/strong&gt;: in this case, missing values are random, conditional on values of other observed variables.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In this case, information in other variables might help filling missing values.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Missing non at random&lt;/strong&gt;: in this last case, missing values depend on information that we do not observe.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This is the most tricky category of missing values since data alone does not tell us which values might be missing. For example, we might have that older women might be less likely to report the age.&lt;/li&gt;
&lt;li&gt;If we consider the data missing at random (absolutely or not), we would underestimate the missing ages.&lt;/li&gt;
&lt;li&gt;External information such as the sample population might help. For example, we could estimate the probability of not reporting the age and fill the missing values with the expected age, &lt;em&gt;conditional&lt;/em&gt; on age not being reported.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, which imputers are readily available in &lt;code&gt;sklearn&lt;/code&gt; for numerical data?&lt;/p&gt;
&lt;p&gt;For data &lt;strong&gt;missing absolutely at random&lt;/strong&gt;, there is one standard &lt;code&gt;sklearn&lt;/code&gt; library: &lt;code&gt;SimpleImputer()&lt;/code&gt;. It allows different &lt;code&gt;strategy&lt;/code&gt; options such as&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;mean&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;median&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;most_frequent&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For data &lt;strong&gt;missing at random&lt;/strong&gt;, there are multiple &lt;code&gt;sklearn&lt;/code&gt; libraries:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;KNNImputer()&lt;/code&gt;: uses KNN&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IterativeImputer()&lt;/code&gt;: uses a variety of ML algorithms
&lt;ul&gt;
&lt;li&gt;see comparison &lt;a href=&#34;https://scikit-learn.org/stable/auto_examples/impute/plot_iterative_imputer_variants_comparison.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After we have inputed missing values, we want to standardize numerical variables to make the algorithm more efficient and robust to outliers.&lt;/p&gt;
&lt;p&gt;The two main options for standardization are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;StandardScaler()&lt;/code&gt;: which normalizes each variable to mean zero and unit variance&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MinMaxScaler()&lt;/code&gt;: which normalizes each variable to an interval between zero an one&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Inputer for numerical variables
num = Pipeline(steps=[
    (&#39;ii&#39;, IterativeImputer()),
    (&#39;ss&#39;, StandardScaler())
    ])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For &lt;strong&gt;categorical variables&lt;/strong&gt;, we do not have to worry about scaling. However, we still need to impute missing values and, crucially, we need to transform them into numerical variables. This process is called &lt;strong&gt;encoding&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Which imputer should to use?&lt;/p&gt;
&lt;p&gt;For data &lt;strong&gt;missing absolutely at random&lt;/strong&gt;, the only available &lt;code&gt;strategy&lt;/code&gt; option for &lt;code&gt;SimpleImputer()&lt;/code&gt; is&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;most_frequent&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For data &lt;strong&gt;missing at random&lt;/strong&gt;, we can still use both&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;KNNImputer()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IterativeImputer()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For &lt;strong&gt;encoding&lt;/strong&gt; categorical variables, the standard option is &lt;code&gt;OneHotEncoder()&lt;/code&gt; which generates unique binary variables out of every values of the categorical variable.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# One Hot Encoder for categorical data
cat = Pipeline(steps=[
    (&#39;si&#39;, SimpleImputer(strategy=&amp;quot;most_frequent&amp;quot;)),
    (&#39;ohe&#39;, OneHotEncoder(handle_unknown=&amp;quot;ignore&amp;quot;)),
    ])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Preprocess column transformer for preprocessing data
preprocess = ColumnTransformer(
                    transformers=[
                        (&#39;num&#39;, num, numerical_cols),
                        (&#39;cat&#39;, cat, categorical_cols),
                    ])
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;information-and-components&#34;&gt;Information and components&lt;/h2&gt;
&lt;p&gt;How much information is contained in our dataset? It is a dense or sparse dataset?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;X_clean = num.fit_transform(X_numerical)
pca = PCA().fit(X_clean)
explained_variance = pca.explained_variance_ratio_
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig, (ax1, ax2) = plt.subplots(1,2, figsize=(15,6))
fig.suptitle(&#39;Principal Component Analysis&#39;, fontsize=16);

# Relative 
ax1.plot(range(len(explained_variance)), explained_variance)
ax1.set_ylabel(&#39;Prop. Variance Explained&#39;)
ax1.set_xlabel(&#39;Principal Component&#39;);

# Cumulative
ax2.plot(range(len(explained_variance)), np.cumsum(explained_variance))
ax2.set_ylabel(&#39;Cumulative Variance Explained&#39;);
ax2.set_xlabel(&#39;Principal Component&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../img/06_ml_pipeline_48_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;feature-importance&#34;&gt;Feature Importance&lt;/h2&gt;
&lt;p&gt;Before starting our prediction analysis, we would like to understand which variables are most important for our prediction problem.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def plot_featureimportance(importance, preprocess):
    df = pd.DataFrame({&amp;quot;names&amp;quot;: get_feature_names(preprocess), &amp;quot;values&amp;quot;: importance})
    df = df.sort_values(&amp;quot;values&amp;quot;).iloc[:20, :]
    # plot
    fig, ax = plt.subplots(figsize=(10,8))
    ax.set_title(&amp;quot;Feature importance&amp;quot;, fontsize=16)
    sns.barplot(y=&amp;quot;names&amp;quot;, x=&amp;quot;values&amp;quot;, data=df)
    ax.barh(np.arange(len(df)), df[&amp;quot;values&amp;quot;])
    plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We start with linear regression feature importance: we standardize all variables to be mean vero and unit variance, and we run a linear regression over the test set.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def featureimportance_lr(X, y):
    X_clean = preprocess.fit_transform(X)
    # fit the model
    model = LinearRegression()
    model.fit(X_clean, y)
    # get importance
    importance = np.abs(model.coef_)
    plot_featureimportance(importance, preprocess)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Plot linear feature importance
featureimportance_lr(X_train, y_train)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../img/06_ml_pipeline_54_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;We now look at regression tree feature importance.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def featureimportance_forest(X, y):
    X_clean = preprocess.fit_transform(X)
    # fit the model
    model = RandomForestRegressor()
    model.fit(X_clean, y)
    # get importance
    importance = model.feature_importances_
    plot_featureimportance(importance, preprocess)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Plot tree feature importance
featureimportance_forest(X_train, y_train)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../img/06_ml_pipeline_57_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;weighting&#34;&gt;Weighting&lt;/h2&gt;
&lt;p&gt;Another important check to perform concerns weighting. Is the distribution of our objective variable the same in the training and in the test sample? If it is not the case, we might get a poor performance just because our training sample is not representative of our testing sample.&lt;/p&gt;
&lt;p&gt;This is something that usually &lt;strong&gt;we cannot test&lt;/strong&gt;, since we do not have access to the distribution of the target variable in the test data. However, we might be given the information ex-ante as a warning.&lt;/p&gt;
&lt;p&gt;In this case, we perform the analysis on the validation set. Since we have selected the validation set at random, we do not expect significant differences.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15,6))

# Plot 1
sns.histplot(data=y_train, kde=True, ax=ax1)
sns.histplot(data=y_validation, kde=True, ax=ax1, color=&#39;orange&#39;)
ax1.set_title(&amp;quot;Density Function of y&amp;quot;, fontsize=16);
ax1.legend([&#39;y train&#39;, &#39;y validation&#39;])

# Plot 2
sns.histplot(data=y_train,  element=&amp;quot;step&amp;quot;, fill=False,
    cumulative=True, stat=&amp;quot;density&amp;quot;, common_norm=False, ax=ax2)
sns.histplot(data=y_validation, element=&amp;quot;step&amp;quot;, fill=False,
    cumulative=True, stat=&amp;quot;density&amp;quot;, common_norm=False, ax=ax2, color=&#39;orange&#39;)
ax2.set_title(&amp;quot;Cumulative Distribution of y&amp;quot;, fontsize=16);
ax2.legend([&#39;y train&#39;, &#39;y validation&#39;]);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../img/06_ml_pipeline_60_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Since the size of the test sample is smaller than the size of the training sample, the two densities are different. However, the distributions indicate that the standardized distributions are the same.&lt;/p&gt;
&lt;h2 id=&#34;model&#34;&gt;Model&lt;/h2&gt;
&lt;p&gt;There are many models to choose among.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# prepare models
models = {&amp;quot;Lasso&amp;quot;: Lasso(alpha=100),
          &amp;quot;Ridge&amp;quot;: BayesianRidge(),
          &amp;quot;KNN&amp;quot;: KNeighborsRegressor(),
          &amp;quot;Kernel&amp;quot;: KernelRidge(),
          &amp;quot;Naive&amp;quot;: GaussianNB(),
          &amp;quot;SVM&amp;quot;: SVR(),
          &amp;quot;Ada&amp;quot;: AdaBoostRegressor(),
          &amp;quot;Tree&amp;quot;: DecisionTreeRegressor(),
          &amp;quot;Forest&amp;quot;: RandomForestRegressor(),
          &amp;quot;GBoost&amp;quot;: GradientBoostingRegressor(),
          &amp;quot;XGBoost&amp;quot;: XGBRegressor(),
          &amp;quot;LGBoost&amp;quot;: LGBMRegressor()}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def evaluate_model(model, name, X, y, cv, scoring):
    X_clean = preprocess.fit_transform(X)
    start = time.perf_counter()
    cv_results = cross_val_score(model, X_clean, y, cv=cv, scoring=scoring)
    t = time.perf_counter()-start
    score = {&amp;quot;model&amp;quot;:name, &amp;quot;mean&amp;quot;:-np.mean(cv_results), &amp;quot;std&amp;quot;:np.std(cv_results), &amp;quot;time&amp;quot;:t}
    print(&amp;quot;%s: %f (%f) in %f seconds&amp;quot; % (name, -np.mean(cv_results), np.std(cv_results), t))
    return score
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def plot_model_scores(scores):
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15,6))
    fig.suptitle(&amp;quot;Comparing algorithms&amp;quot;, fontsize=16)
    
    # Plot 1
    scores.sort_values(&amp;quot;mean&amp;quot;, ascending=False, inplace=True)
    ax1.set_title(&amp;quot;Mean squared error&amp;quot;, fontsize=16)
    ax1.barh(range(len(scores)), scores[&amp;quot;mean&amp;quot;], xerr=scores[&amp;quot;std&amp;quot;])
    ax1.set_yticks(range(len(scores)))
    ax1.set_yticklabels([s for s in scores[&amp;quot;model&amp;quot;]])
    
    # Plot 2
    scores.sort_values(&amp;quot;time&amp;quot;, ascending=False, inplace=True)
    ax2.set_title(&amp;quot;Time&amp;quot;, fontsize=16)
    ax2.barh(range(len(scores)), scores[&amp;quot;time&amp;quot;], color=&#39;tab:orange&#39;)
    ax2.set_yticks(range(len(scores)))
    ax2.set_yticklabels([s for s in scores[&amp;quot;model&amp;quot;]])
    plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def compare_models(models):
    scores = pd.DataFrame()
    cv = KFold(n_splits=5)
    scoring = &#39;neg_mean_squared_error&#39;
    for name, model in models.items():
        score = evaluate_model(model, name, X_validation, y_validation, cv, scoring)
        scores = scores.append(score, ignore_index=True)
    return scores
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;scores = compare_models(models)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Lasso: 747411443.913101 (462917309.181485) in 0.109821 seconds
Ridge: 718774315.061634 (487089023.387329) in 0.472070 seconds
KNN: 1756639001.600806 (1476470798.673143) in 0.019063 seconds
Kernel: 844681295.934677 (476183041.447080) in 0.085055 seconds
Naive: 5254835359.080946 (2916476370.114636) in 0.045415 seconds
SVM: 6141030577.726756 (3241262535.954060) in 0.046852 seconds
Ada: 1513638885.120911 (1332241015.479751) in 0.306255 seconds
Tree: 3258264310.733547 (2139525308.773295) in 0.018476 seconds
Forest: 1324403652.968275 (1246235286.003631) in 1.105161 seconds
GBoost: 1200654655.518314 (1053677796.098979) in 0.494536 seconds
XGBoost: 1819197282.034136 (1587393748.901112) in 0.692401 seconds
LGBoost: 1318077152.379926 (1278188928.507894) in 0.157495 seconds
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;plot_model_scores(scores)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../img/06_ml_pipeline_69_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;pipeline&#34;&gt;Pipeline&lt;/h2&gt;
&lt;p&gt;We are now ready to pick a model.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Set model
model = LGBMRegressor()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We need to choose a cross-validation procedure to test our model.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;cv = KFold()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, we can combine all the parts into a single pipeline.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;final_pipeline = Pipeline(steps=[
        (&#39;preprocess&#39;, preprocess),
        (&#39;model&#39;, model)
        ])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can decide which parts of the pipeline to test.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Select parameters to explore
param_grid = {&#39;preprocess__num__ii&#39;: [SimpleImputer(), KNNImputer(), IterativeImputer()],
              &#39;preprocess__cat__si__strategy&#39;: [&amp;quot;most_frequent&amp;quot;, &amp;quot;constant&amp;quot;],
              &#39;model__learning_rate&#39;: [0.1, 0.2],
              &#39;model__subsample&#39;: [1.0, 0.5],
              &#39;model__max_depth&#39;: [30, -1]}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We now generate a grid of parameters we want to search over.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Save pipeline
grid_search = GridSearchCV(final_pipeline, 
                           param_grid, 
                           cv=cv,
                           n_jobs=-1, 
                           scoring=&#39;neg_mean_squared_error&#39;,
                           verbose=3)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We fit the pipeline and pick the best estimator, from the cross-validation score.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Fit pipeline
grid_search.fit(X_train, y_train)
grid_search.best_estimator_
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Fitting 5 folds for each of 48 candidates, totalling 240 fits





Pipeline(steps=[(&#39;preprocess&#39;,
                 ColumnTransformer(transformers=[(&#39;num&#39;,
                                                  Pipeline(steps=[(&#39;ii&#39;,
                                                                   KNNImputer()),
                                                                  (&#39;ss&#39;,
                                                                   StandardScaler())]),
                                                  [&#39;MSSubClass&#39;, &#39;LotFrontage&#39;,
                                                   &#39;LotArea&#39;, &#39;OverallQual&#39;,
                                                   &#39;OverallCond&#39;, &#39;YearBuilt&#39;,
                                                   &#39;YearRemodAdd&#39;, &#39;MasVnrArea&#39;,
                                                   &#39;BsmtFinSF1&#39;, &#39;BsmtFinSF2&#39;,
                                                   &#39;BsmtUnfSF&#39;, &#39;TotalBsmtSF&#39;,
                                                   &#39;1stFlrSF&#39;, &#39;2ndFlrSF&#39;,
                                                   &#39;LowQualFinSF&#39;, &#39;GrLivArea&#39;,
                                                   &#39;BsmtFullBat...
                                                   &#39;LotConfig&#39;, &#39;LandSlope&#39;,
                                                   &#39;Neighborhood&#39;, &#39;Condition1&#39;,
                                                   &#39;Condition2&#39;, &#39;BldgType&#39;,
                                                   &#39;HouseStyle&#39;, &#39;RoofStyle&#39;,
                                                   &#39;RoofMatl&#39;, &#39;Exterior1st&#39;,
                                                   &#39;Exterior2nd&#39;, &#39;MasVnrType&#39;,
                                                   &#39;ExterQual&#39;, &#39;ExterCond&#39;,
                                                   &#39;Foundation&#39;, &#39;BsmtQual&#39;,
                                                   &#39;BsmtCond&#39;, &#39;BsmtExposure&#39;,
                                                   &#39;BsmtFinType1&#39;,
                                                   &#39;BsmtFinType2&#39;, &#39;Heating&#39;,
                                                   &#39;HeatingQC&#39;, &#39;CentralAir&#39;,
                                                   &#39;Electrical&#39;, ...])])),
                (&#39;model&#39;, LGBMRegressor(max_depth=30))])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We have three ways of testing the quality of fit of our model:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;score on the training data&lt;/li&gt;
&lt;li&gt;score on the validation data&lt;/li&gt;
&lt;li&gt;score on the test data&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Score on the training data&lt;/strong&gt;: this is a biased score since we have picked the model that was best fitting the training data. Kfold cross-validation is efficient in terms of data use, but still evaluates the model over the same data it was trained.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Cross/validation score
y_train_hat = grid_search.best_estimator_.predict(X_train)
train_rmse = mean_squared_error(y_train, y_train_hat, squared=False)
print(&#39;RMSE on training data :&#39;, train_rmse)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;RMSE on training data : 12151.309344378069
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Score on the validation data&lt;/strong&gt;: this is an unbiased score since we have left out this sample exactly for this purpose. However, be aware that the validation score is unbiased on on the first run. Once we change the grid and pick the algorithm based on previous validation data scores, also this score becomes biased.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Validation set score
y_validation_hat = grid_search.best_estimator_.predict(X_validation)
validation_rmse = mean_squared_error(y_validation, y_validation_hat, squared=False)
print(&#39;RMSE on validation data :&#39;, validation_rmse)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;RMSE on validation data : 27676.358798908263
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Final predictions&lt;/strong&gt;: we can now use our model to output the predictions.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Validation score
y_test_hat = grid_search.best_estimator_.predict(X_test)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[CV 2/5] END model__learning_rate=0.1, model__max_depth=30, model__subsample=1.0, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=KNNImputer();, score=-945800410.003 total time=   0.2s
[CV 4/5] END model__learning_rate=0.1, model__max_depth=30, model__subsample=1.0, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=IterativeImputer();, score=-570100776.470 total time=   0.4s
[CV 5/5] END model__learning_rate=0.1, model__max_depth=30, model__subsample=1.0, preprocess__cat__si__strategy=constant, preprocess__num__ii=KNNImputer();, score=-1239206018.769 total time=   0.2s
[CV 2/5] END model__learning_rate=0.1, model__max_depth=30, model__subsample=0.5, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=SimpleImputer();, score=-997691407.890 total time=   0.1s
[CV 5/5] END model__learning_rate=0.1, model__max_depth=30, model__subsample=0.5, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=SimpleImputer();, score=-1226710083.913 total time=   0.2s
[CV 2/5] END model__learning_rate=0.1, model__max_depth=30, model__subsample=0.5, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=IterativeImputer();, score=-1024476538.628 total time=   0.4s
[CV 3/5] END model__learning_rate=0.1, model__max_depth=30, model__subsample=0.5, preprocess__cat__si__strategy=constant, preprocess__num__ii=KNNImputer();, score=-541737588.393 total time=   0.2s
[CV 3/5] END model__learning_rate=0.1, model__max_depth=-1, model__subsample=1.0, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=SimpleImputer();, score=-513492880.363 total time=   0.1s
[CV 1/5] END model__learning_rate=0.1, model__max_depth=-1, model__subsample=1.0, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=KNNImputer();, score=-1085304295.641 total time=   0.2s
[CV 2/5] END model__learning_rate=0.1, model__max_depth=-1, model__subsample=1.0, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=IterativeImputer();, score=-1024476538.628 total time=   0.4s
[CV 2/5] END model__learning_rate=0.1, model__max_depth=-1, model__subsample=1.0, preprocess__cat__si__strategy=constant, preprocess__num__ii=KNNImputer();, score=-1033297772.352 total time=   0.2s
[CV 5/5] END model__learning_rate=0.1, model__max_depth=-1, model__subsample=1.0, preprocess__cat__si__strategy=constant, preprocess__num__ii=IterativeImputer();, score=-1260432508.211 total time=   0.4s
[CV 1/5] END model__learning_rate=0.1, model__max_depth=-1, model__subsample=0.5, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=IterativeImputer();, score=-1038744584.272 total time=   0.6s
[CV 5/5] END model__learning_rate=0.1, model__max_depth=-1, model__subsample=0.5, preprocess__cat__si__strategy=constant, preprocess__num__ii=IterativeImputer();, score=-1260432508.211 total time=   0.4s
[CV 2/5] END model__learning_rate=0.2, model__max_depth=30, model__subsample=1.0, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=IterativeImputer();, score=-1045009894.967 total time=   0.4s
[CV 2/5] END model__learning_rate=0.2, model__max_depth=30, model__subsample=1.0, preprocess__cat__si__strategy=constant, preprocess__num__ii=KNNImputer();, score=-1064162610.680 total time=   0.2s
[CV 4/5] END model__learning_rate=0.2, model__max_depth=30, model__subsample=1.0, preprocess__cat__si__strategy=constant, preprocess__num__ii=IterativeImputer();, score=-600837629.536 total time=   0.4s
[CV 5/5] END model__learning_rate=0.2, model__max_depth=30, model__subsample=0.5, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=KNNImputer();, score=-1243376201.323 total time=   0.2s
[CV 3/5] END model__learning_rate=0.2, model__max_depth=30, model__subsample=0.5, preprocess__cat__si__strategy=constant, preprocess__num__ii=SimpleImputer();, score=-539187722.319 total time=   0.2s
[CV 1/5] END model__learning_rate=0.2, model__max_depth=30, model__subsample=0.5, preprocess__cat__si__strategy=constant, preprocess__num__ii=KNNImputer();, score=-1101298878.719 total time=   0.2s
[CV 3/5] END model__learning_rate=0.2, model__max_depth=30, model__subsample=0.5, preprocess__cat__si__strategy=constant, preprocess__num__ii=IterativeImputer();, score=-533278666.873 total time=   0.4s
[CV 4/5] END model__learning_rate=0.2, model__max_depth=-1, model__subsample=1.0, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=KNNImputer();, score=-544430870.856 total time=   0.2s
[CV 2/5] END model__learning_rate=0.2, model__max_depth=-1, model__subsample=1.0, preprocess__cat__si__strategy=constant, preprocess__num__ii=SimpleImputer();, score=-1024576434.974 total time=   0.1s
[CV 5/5] END model__learning_rate=0.2, model__max_depth=-1, model__subsample=1.0, preprocess__cat__si__strategy=constant, preprocess__num__ii=SimpleImputer();, score=-1271758627.677 total time=   0.2s
[CV 1/5] END model__learning_rate=0.2, model__max_depth=-1, model__subsample=1.0, preprocess__cat__si__strategy=constant, preprocess__num__ii=IterativeImputer();, score=-1064924532.138 total time=   0.5s
[CV 4/5] END model__learning_rate=0.2, model__max_depth=-1, model__subsample=0.5, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=IterativeImputer();, score=-643767514.223 total time=   0.4s
[CV 4/5] END model__learning_rate=0.2, model__max_depth=-1, model__subsample=0.5, preprocess__cat__si__strategy=constant, preprocess__num__ii=KNNImputer();, score=-590633071.038 total time=   0.2s
[CV 3/5] END model__learning_rate=0.1, model__max_depth=30, model__subsample=1.0, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=KNNImputer();, score=-515317030.231 total time=   0.2s
[CV 1/5] END model__learning_rate=0.1, model__max_depth=30, model__subsample=1.0, preprocess__cat__si__strategy=constant, preprocess__num__ii=SimpleImputer();, score=-1102984449.306 total time=   0.1s
[CV 4/5] END model__learning_rate=0.1, model__max_depth=30, model__subsample=1.0, preprocess__cat__si__strategy=constant, preprocess__num__ii=SimpleImputer();, score=-543635446.429 total time=   0.2s
[CV 4/5] END model__learning_rate=0.1, model__max_depth=30, model__subsample=1.0, preprocess__cat__si__strategy=constant, preprocess__num__ii=KNNImputer();, score=-513174790.496 total time=   0.2s
[CV 1/5] END model__learning_rate=0.1, model__max_depth=30, model__subsample=0.5, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=SimpleImputer();, score=-1094302605.510 total time=   0.2s
[CV 4/5] END model__learning_rate=0.1, model__max_depth=30, model__subsample=0.5, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=SimpleImputer();, score=-530900512.729 total time=   0.1s
[CV 4/5] END model__learning_rate=0.1, model__max_depth=30, model__subsample=0.5, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=KNNImputer();, score=-518644185.752 total time=   0.2s
[CV 2/5] END model__learning_rate=0.1, model__max_depth=30, model__subsample=0.5, preprocess__cat__si__strategy=constant, preprocess__num__ii=SimpleImputer();, score=-995475493.332 total time=   0.2s
[CV 5/5] END model__learning_rate=0.1, model__max_depth=30, model__subsample=0.5, preprocess__cat__si__strategy=constant, preprocess__num__ii=SimpleImputer();, score=-1261991041.562 total time=   0.2s
[CV 1/5] END model__learning_rate=0.1, model__max_depth=30, model__subsample=0.5, preprocess__cat__si__strategy=constant, preprocess__num__ii=IterativeImputer();, score=-1047546222.332 total time=   0.6s
[CV 5/5] END model__learning_rate=0.1, model__max_depth=-1, model__subsample=1.0, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=IterativeImputer();, score=-1219549323.929 total time=   0.4s
[CV 3/5] END model__learning_rate=0.1, model__max_depth=-1, model__subsample=1.0, preprocess__cat__si__strategy=constant, preprocess__num__ii=IterativeImputer();, score=-532594533.605 total time=   0.4s
[CV 3/5] END model__learning_rate=0.1, model__max_depth=-1, model__subsample=0.5, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=KNNImputer();, score=-515317030.231 total time=   0.2s
[CV 1/5] END model__learning_rate=0.1, model__max_depth=-1, model__subsample=0.5, preprocess__cat__si__strategy=constant, preprocess__num__ii=SimpleImputer();, score=-1102984449.306 total time=   0.1s
[CV 4/5] END model__learning_rate=0.1, model__max_depth=-1, model__subsample=0.5, preprocess__cat__si__strategy=constant, preprocess__num__ii=SimpleImputer();, score=-543635446.429 total time=   0.2s
[CV 3/5] END model__learning_rate=0.1, model__max_depth=-1, model__subsample=0.5, preprocess__cat__si__strategy=constant, preprocess__num__ii=KNNImputer();, score=-541737588.393 total time=   0.2s
[CV 1/5] END model__learning_rate=0.2, model__max_depth=30, model__subsample=1.0, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=SimpleImputer();, score=-1174830723.077 total time=   0.1s
[CV 4/5] END model__learning_rate=0.2, model__max_depth=30, model__subsample=1.0, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=SimpleImputer();, score=-589395877.632 total time=   0.1s
[CV 5/5] END model__learning_rate=0.2, model__max_depth=30, model__subsample=1.0, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=KNNImputer();, score=-1243376201.323 total time=   0.2s
[CV 2/5] END model__learning_rate=0.2, model__max_depth=30, model__subsample=1.0, preprocess__cat__si__strategy=constant, preprocess__num__ii=SimpleImputer();, score=-1024576434.974 total time=   0.1s
[CV 5/5] END model__learning_rate=0.2, model__max_depth=30, model__subsample=1.0, preprocess__cat__si__strategy=constant, preprocess__num__ii=SimpleImputer();, score=-1271758627.677 total time=   0.1s
[CV 1/5] END model__learning_rate=0.2, model__max_depth=30, model__subsample=1.0, preprocess__cat__si__strategy=constant, preprocess__num__ii=IterativeImputer();, score=-1064924532.138 total time=   0.6s
[CV 5/5] END model__learning_rate=0.2, model__max_depth=30, model__subsample=0.5, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=IterativeImputer();, score=-1249207388.654 total time=   0.3s
[CV 1/5] END model__learning_rate=0.2, model__max_depth=30, model__subsample=0.5, preprocess__cat__si__strategy=constant, preprocess__num__ii=IterativeImputer();, score=-1064924532.138 total time=   0.6s
[CV 4/5] END model__learning_rate=0.2, model__max_depth=-1, model__subsample=1.0, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=IterativeImputer();, score=-643767514.223 total time=   0.4s
[CV 5/5] END model__learning_rate=0.2, model__max_depth=-1, model__subsample=1.0, preprocess__cat__si__strategy=constant, preprocess__num__ii=KNNImputer();, score=-1210584444.764 total time=   0.2s
[CV 3/5] END model__learning_rate=0.2, model__max_depth=-1, model__subsample=0.5, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=SimpleImputer();, score=-524058509.993 total time=   0.1s
[CV 1/5] END model__learning_rate=0.2, model__max_depth=-1, model__subsample=0.5, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=KNNImputer();, score=-1079192998.183 total time=   0.2s
[CV 3/5] END model__learning_rate=0.2, model__max_depth=-1, model__subsample=0.5, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=IterativeImputer();, score=-576066791.159 total time=   0.4s
[CV 3/5] END model__learning_rate=0.2, model__max_depth=-1, model__subsample=0.5, preprocess__cat__si__strategy=constant, preprocess__num__ii=KNNImputer();, score=-564186901.908 total time=   0.2s
[CV 3/5] END model__learning_rate=0.1, model__max_depth=30, model__subsample=1.0, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=SimpleImputer();, score=-513492880.363 total time=   0.2s
[CV 1/5] END model__learning_rate=0.1, model__max_depth=30, model__subsample=1.0, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=IterativeImputer();, score=-1038744584.272 total time=   0.7s
[CV 3/5] END model__learning_rate=0.1, model__max_depth=30, model__subsample=0.5, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=SimpleImputer();, score=-513492880.363 total time=   0.2s
[CV 1/5] END model__learning_rate=0.1, model__max_depth=30, model__subsample=0.5, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=KNNImputer();, score=-1085304295.641 total time=   0.2s
[CV 5/5] END model__learning_rate=0.1, model__max_depth=30, model__subsample=0.5, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=IterativeImputer();, score=-1219549323.929 total time=   0.4s
[CV 2/5] END model__learning_rate=0.1, model__max_depth=30, model__subsample=0.5, preprocess__cat__si__strategy=constant, preprocess__num__ii=IterativeImputer();, score=-1016845641.469 total time=   0.4s
[CV 2/5] END model__learning_rate=0.1, model__max_depth=-1, model__subsample=1.0, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=KNNImputer();, score=-945800410.003 total time=   0.2s
[CV 4/5] END model__learning_rate=0.1, model__max_depth=-1, model__subsample=1.0, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=IterativeImputer();, score=-570100776.470 total time=   0.4s
[CV 2/5] END model__learning_rate=0.1, model__max_depth=-1, model__subsample=1.0, preprocess__cat__si__strategy=constant, preprocess__num__ii=IterativeImputer();, score=-1016845641.469 total time=   0.3s
[CV 2/5] END model__learning_rate=0.1, model__max_depth=-1, model__subsample=0.5, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=KNNImputer();, score=-945800410.003 total time=   0.2s
[CV 4/5] END model__learning_rate=0.1, model__max_depth=-1, model__subsample=0.5, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=IterativeImputer();, score=-570100776.470 total time=   0.4s
[CV 5/5] END model__learning_rate=0.1, model__max_depth=-1, model__subsample=0.5, preprocess__cat__si__strategy=constant, preprocess__num__ii=KNNImputer();, score=-1239206018.769 total time=   0.2s
[CV 3/5] END model__learning_rate=0.2, model__max_depth=30, model__subsample=1.0, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=SimpleImputer();, score=-524058509.993 total time=   0.1s
[CV 1/5] END model__learning_rate=0.2, model__max_depth=30, model__subsample=1.0, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=KNNImputer();, score=-1079192998.183 total time=   0.2s
[CV 3/5] END model__learning_rate=0.2, model__max_depth=30, model__subsample=1.0, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=IterativeImputer();, score=-576066791.159 total time=   0.4s
[CV 4/5] END model__learning_rate=0.2, model__max_depth=30, model__subsample=1.0, preprocess__cat__si__strategy=constant, preprocess__num__ii=KNNImputer();, score=-590633071.038 total time=   0.2s
[CV 2/5] END model__learning_rate=0.2, model__max_depth=30, model__subsample=0.5, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=SimpleImputer();, score=-1031476671.446 total time=   0.2s
[CV 5/5] END model__learning_rate=0.2, model__max_depth=30, model__subsample=0.5, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=SimpleImputer();, score=-1267733161.543 total time=   0.1s
[CV 1/5] END model__learning_rate=0.2, model__max_depth=30, model__subsample=0.5, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=IterativeImputer();, score=-1051746575.599 total time=   0.6s
[CV 4/5] END model__learning_rate=0.2, model__max_depth=30, model__subsample=0.5, preprocess__cat__si__strategy=constant, preprocess__num__ii=IterativeImputer();, score=-600837629.536 total time=   0.4s
[CV 1/5] END model__learning_rate=0.2, model__max_depth=-1, model__subsample=1.0, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=IterativeImputer();, score=-1051746575.599 total time=   0.6s
[CV 3/5] END model__learning_rate=0.2, model__max_depth=-1, model__subsample=1.0, preprocess__cat__si__strategy=constant, preprocess__num__ii=IterativeImputer();, score=-533278666.873 total time=   0.4s
[CV 3/5] END model__learning_rate=0.2, model__max_depth=-1, model__subsample=0.5, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=KNNImputer();, score=-540602961.526 total time=   0.2s
[CV 2/5] END model__learning_rate=0.2, model__max_depth=-1, model__subsample=0.5, preprocess__cat__si__strategy=constant, preprocess__num__ii=SimpleImputer();, score=-1024576434.974 total time=   0.2s
[CV 5/5] END model__learning_rate=0.2, model__max_depth=-1, model__subsample=0.5, preprocess__cat__si__strategy=constant, preprocess__num__ii=SimpleImputer();, score=-1271758627.677 total time=   0.1s
[CV 5/5] END model__learning_rate=0.2, model__max_depth=-1, model__subsample=0.5, preprocess__cat__si__strategy=constant, preprocess__num__ii=KNNImputer();, score=-1210584444.764 total time=   0.2s
[CV 1/5] END model__learning_rate=0.1, model__max_depth=30, model__subsample=1.0, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=KNNImputer();, score=-1085304295.641 total time=   0.2s
[CV 5/5] END model__learning_rate=0.1, model__max_depth=30, model__subsample=1.0, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=IterativeImputer();, score=-1219549323.929 total time=   0.4s
[CV 2/5] END model__learning_rate=0.1, model__max_depth=30, model__subsample=1.0, preprocess__cat__si__strategy=constant, preprocess__num__ii=IterativeImputer();, score=-1016845641.469 total time=   0.4s
[CV 2/5] END model__learning_rate=0.1, model__max_depth=30, model__subsample=0.5, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=KNNImputer();, score=-945800410.003 total time=   0.2s
[CV 1/5] END model__learning_rate=0.1, model__max_depth=30, model__subsample=0.5, preprocess__cat__si__strategy=constant, preprocess__num__ii=SimpleImputer();, score=-1102984449.306 total time=   0.1s
[CV 4/5] END model__learning_rate=0.1, model__max_depth=30, model__subsample=0.5, preprocess__cat__si__strategy=constant, preprocess__num__ii=SimpleImputer();, score=-543635446.429 total time=   0.3s
[CV 5/5] END model__learning_rate=0.1, model__max_depth=30, model__subsample=0.5, preprocess__cat__si__strategy=constant, preprocess__num__ii=IterativeImputer();, score=-1260432508.211 total time=   0.4s
[CV 3/5] END model__learning_rate=0.1, model__max_depth=-1, model__subsample=1.0, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=IterativeImputer();, score=-519293006.931 total time=   0.4s
[CV 4/5] END model__learning_rate=0.1, model__max_depth=-1, model__subsample=1.0, preprocess__cat__si__strategy=constant, preprocess__num__ii=KNNImputer();, score=-513174790.496 total time=   0.2s
[CV 2/5] END model__learning_rate=0.1, model__max_depth=-1, model__subsample=0.5, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=SimpleImputer();, score=-997691407.890 total time=   0.1s
[CV 5/5] END model__learning_rate=0.1, model__max_depth=-1, model__subsample=0.5, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=SimpleImputer();, score=-1226710083.913 total time=   0.2s
[CV 5/5] END model__learning_rate=0.1, model__max_depth=-1, model__subsample=0.5, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=KNNImputer();, score=-1224677483.241 total time=   0.2s
[CV 3/5] END model__learning_rate=0.1, model__max_depth=-1, model__subsample=0.5, preprocess__cat__si__strategy=constant, preprocess__num__ii=SimpleImputer();, score=-529011858.629 total time=   0.1s
[CV 1/5] END model__learning_rate=0.1, model__max_depth=-1, model__subsample=0.5, preprocess__cat__si__strategy=constant, preprocess__num__ii=KNNImputer();, score=-1060914076.633 total time=   0.2s
[CV 3/5] END model__learning_rate=0.1, model__max_depth=-1, model__subsample=0.5, preprocess__cat__si__strategy=constant, preprocess__num__ii=IterativeImputer();, score=-532594533.605 total time=   0.4s
[CV 3/5] END model__learning_rate=0.2, model__max_depth=30, model__subsample=1.0, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=KNNImputer();, score=-540602961.526 total time=   0.2s
[CV 1/5] END model__learning_rate=0.2, model__max_depth=30, model__subsample=1.0, preprocess__cat__si__strategy=constant, preprocess__num__ii=SimpleImputer();, score=-1088255251.747 total time=   0.1s
[CV 4/5] END model__learning_rate=0.2, model__max_depth=30, model__subsample=1.0, preprocess__cat__si__strategy=constant, preprocess__num__ii=SimpleImputer();, score=-599626460.012 total time=   0.1s
[CV 5/5] END model__learning_rate=0.2, model__max_depth=30, model__subsample=1.0, preprocess__cat__si__strategy=constant, preprocess__num__ii=KNNImputer();, score=-1210584444.764 total time=   0.2s
[CV 3/5] END model__learning_rate=0.2, model__max_depth=30, model__subsample=0.5, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=SimpleImputer();, score=-524058509.993 total time=   0.1s
[CV 1/5] END model__learning_rate=0.2, model__max_depth=30, model__subsample=0.5, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=KNNImputer();, score=-1079192998.183 total time=   0.2s
[CV 3/5] END model__learning_rate=0.2, model__max_depth=30, model__subsample=0.5, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=IterativeImputer();, score=-576066791.159 total time=   0.4s
[CV 4/5] END model__learning_rate=0.2, model__max_depth=30, model__subsample=0.5, preprocess__cat__si__strategy=constant, preprocess__num__ii=KNNImputer();, score=-590633071.038 total time=   0.2s
[CV 2/5] END model__learning_rate=0.2, model__max_depth=-1, model__subsample=1.0, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=SimpleImputer();, score=-1031476671.446 total time=   0.2s
[CV 5/5] END model__learning_rate=0.2, model__max_depth=-1, model__subsample=1.0, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=SimpleImputer();, score=-1267733161.543 total time=   0.1s
[CV 5/5] END model__learning_rate=0.2, model__max_depth=-1, model__subsample=1.0, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=KNNImputer();, score=-1243376201.323 total time=   0.2s
[CV 3/5] END model__learning_rate=0.2, model__max_depth=-1, model__subsample=1.0, preprocess__cat__si__strategy=constant, preprocess__num__ii=SimpleImputer();, score=-539187722.319 total time=   0.2s
[CV 1/5] END model__learning_rate=0.2, model__max_depth=-1, model__subsample=1.0, preprocess__cat__si__strategy=constant, preprocess__num__ii=KNNImputer();, score=-1101298878.719 total time=   0.2s
[CV 4/5] END model__learning_rate=0.2, model__max_depth=-1, model__subsample=1.0, preprocess__cat__si__strategy=constant, preprocess__num__ii=IterativeImputer();, score=-600837629.536 total time=   0.4s
[CV 5/5] END model__learning_rate=0.2, model__max_depth=-1, model__subsample=0.5, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=KNNImputer();, score=-1243376201.323 total time=   0.2s
[CV 1/5] END model__learning_rate=0.2, model__max_depth=-1, model__subsample=0.5, preprocess__cat__si__strategy=constant, preprocess__num__ii=SimpleImputer();, score=-1088255251.747 total time=   0.1s
[CV 4/5] END model__learning_rate=0.2, model__max_depth=-1, model__subsample=0.5, preprocess__cat__si__strategy=constant, preprocess__num__ii=SimpleImputer();, score=-599626460.012 total time=   0.2s
[CV 2/5] END model__learning_rate=0.2, model__max_depth=-1, model__subsample=0.5, preprocess__cat__si__strategy=constant, preprocess__num__ii=IterativeImputer();, score=-1034331933.536 total time=   0.3s
[CV 4/5] END model__learning_rate=0.1, model__max_depth=30, model__subsample=1.0, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=SimpleImputer();, score=-530900512.729 total time=   0.1s
[CV 3/5] END model__learning_rate=0.1, model__max_depth=30, model__subsample=1.0, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=IterativeImputer();, score=-519293006.931 total time=   0.3s
[CV 2/5] END model__learning_rate=0.1, model__max_depth=30, model__subsample=1.0, preprocess__cat__si__strategy=constant, preprocess__num__ii=KNNImputer();, score=-1033297772.352 total time=   0.2s
[CV 4/5] END model__learning_rate=0.1, model__max_depth=30, model__subsample=1.0, preprocess__cat__si__strategy=constant, preprocess__num__ii=IterativeImputer();, score=-551768174.727 total time=   0.4s
[CV 5/5] END model__learning_rate=0.1, model__max_depth=30, model__subsample=0.5, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=KNNImputer();, score=-1224677483.241 total time=   0.2s
[CV 3/5] END model__learning_rate=0.1, model__max_depth=30, model__subsample=0.5, preprocess__cat__si__strategy=constant, preprocess__num__ii=SimpleImputer();, score=-529011858.629 total time=   0.2s
[CV 1/5] END model__learning_rate=0.1, model__max_depth=30, model__subsample=0.5, preprocess__cat__si__strategy=constant, preprocess__num__ii=KNNImputer();, score=-1060914076.633 total time=   0.2s
[CV 4/5] END model__learning_rate=0.1, model__max_depth=30, model__subsample=0.5, preprocess__cat__si__strategy=constant, preprocess__num__ii=IterativeImputer();, score=-551768174.727 total time=   0.3s
[CV 4/5] END model__learning_rate=0.1, model__max_depth=-1, model__subsample=1.0, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=KNNImputer();, score=-518644185.752 total time=   0.2s
[CV 2/5] END model__learning_rate=0.1, model__max_depth=-1, model__subsample=1.0, preprocess__cat__si__strategy=constant, preprocess__num__ii=SimpleImputer();, score=-995475493.332 total time=   0.1s
[CV 5/5] END model__learning_rate=0.1, model__max_depth=-1, model__subsample=1.0, preprocess__cat__si__strategy=constant, preprocess__num__ii=SimpleImputer();, score=-1261991041.562 total time=   0.1s
[CV 5/5] END model__learning_rate=0.1, model__max_depth=-1, model__subsample=1.0, preprocess__cat__si__strategy=constant, preprocess__num__ii=KNNImputer();, score=-1239206018.769 total time=   0.2s
[CV 3/5] END model__learning_rate=0.1, model__max_depth=-1, model__subsample=0.5, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=SimpleImputer();, score=-513492880.363 total time=   0.2s
[CV 1/5] END model__learning_rate=0.1, model__max_depth=-1, model__subsample=0.5, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=KNNImputer();, score=-1085304295.641 total time=   0.2s
[CV 3/5] END model__learning_rate=0.1, model__max_depth=-1, model__subsample=0.5, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=IterativeImputer();, score=-519293006.931 total time=   0.4s
[CV 1/5] END model__learning_rate=0.1, model__max_depth=-1, model__subsample=0.5, preprocess__cat__si__strategy=constant, preprocess__num__ii=IterativeImputer();, score=-1047546222.332 total time=   0.6s
[CV 4/5] END model__learning_rate=0.2, model__max_depth=30, model__subsample=1.0, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=IterativeImputer();, score=-643767514.223 total time=   0.3s
[CV 3/5] END model__learning_rate=0.2, model__max_depth=30, model__subsample=1.0, preprocess__cat__si__strategy=constant, preprocess__num__ii=KNNImputer();, score=-564186901.908 total time=   0.2s
[CV 1/5] END model__learning_rate=0.2, model__max_depth=30, model__subsample=0.5, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=SimpleImputer();, score=-1174830723.077 total time=   0.1s
[CV 4/5] END model__learning_rate=0.2, model__max_depth=30, model__subsample=0.5, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=SimpleImputer();, score=-589395877.632 total time=   0.1s
[CV 4/5] END model__learning_rate=0.2, model__max_depth=30, model__subsample=0.5, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=KNNImputer();, score=-544430870.856 total time=   0.2s
[CV 4/5] END model__learning_rate=0.2, model__max_depth=30, model__subsample=0.5, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=IterativeImputer();, score=-643767514.223 total time=   0.4s
[CV 2/5] END model__learning_rate=0.2, model__max_depth=30, model__subsample=0.5, preprocess__cat__si__strategy=constant, preprocess__num__ii=IterativeImputer();, score=-1034331933.536 total time=   0.4s
[CV 3/5] END model__learning_rate=0.2, model__max_depth=-1, model__subsample=1.0, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=KNNImputer();, score=-540602961.526 total time=   0.2s
[CV 1/5] END model__learning_rate=0.2, model__max_depth=-1, model__subsample=1.0, preprocess__cat__si__strategy=constant, preprocess__num__ii=SimpleImputer();, score=-1088255251.747 total time=   0.1s
[CV 4/5] END model__learning_rate=0.2, model__max_depth=-1, model__subsample=1.0, preprocess__cat__si__strategy=constant, preprocess__num__ii=SimpleImputer();, score=-599626460.012 total time=   0.2s
[CV 4/5] END model__learning_rate=0.2, model__max_depth=-1, model__subsample=1.0, preprocess__cat__si__strategy=constant, preprocess__num__ii=KNNImputer();, score=-590633071.038 total time=   0.2s
[CV 2/5] END model__learning_rate=0.2, model__max_depth=-1, model__subsample=0.5, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=SimpleImputer();, score=-1031476671.446 total time=   0.2s
[CV 5/5] END model__learning_rate=0.2, model__max_depth=-1, model__subsample=0.5, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=SimpleImputer();, score=-1267733161.543 total time=   0.1s
[CV 1/5] END model__learning_rate=0.2, model__max_depth=-1, model__subsample=0.5, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=IterativeImputer();, score=-1051746575.599 total time=   0.5s
[CV 3/5] END model__learning_rate=0.2, model__max_depth=-1, model__subsample=0.5, preprocess__cat__si__strategy=constant, preprocess__num__ii=IterativeImputer();, score=-533278666.873 total time=   0.3s
[CV 2/5] END model__learning_rate=0.1, model__max_depth=30, model__subsample=1.0, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=SimpleImputer();, score=-997691407.890 total time=   0.2s
[CV 5/5] END model__learning_rate=0.1, model__max_depth=30, model__subsample=1.0, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=KNNImputer();, score=-1224677483.241 total time=   0.2s
[CV 3/5] END model__learning_rate=0.1, model__max_depth=30, model__subsample=1.0, preprocess__cat__si__strategy=constant, preprocess__num__ii=SimpleImputer();, score=-529011858.629 total time=   0.1s
[CV 1/5] END model__learning_rate=0.1, model__max_depth=30, model__subsample=1.0, preprocess__cat__si__strategy=constant, preprocess__num__ii=KNNImputer();, score=-1060914076.633 total time=   0.2s
[CV 3/5] END model__learning_rate=0.1, model__max_depth=30, model__subsample=1.0, preprocess__cat__si__strategy=constant, preprocess__num__ii=IterativeImputer();, score=-532594533.605 total time=   0.3s
[CV 3/5] END model__learning_rate=0.1, model__max_depth=30, model__subsample=0.5, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=KNNImputer();, score=-515317030.231 total time=   0.1s
[CV 3/5] END model__learning_rate=0.1, model__max_depth=30, model__subsample=0.5, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=IterativeImputer();, score=-519293006.931 total time=   0.4s
[CV 2/5] END model__learning_rate=0.1, model__max_depth=30, model__subsample=0.5, preprocess__cat__si__strategy=constant, preprocess__num__ii=KNNImputer();, score=-1033297772.352 total time=   0.2s
[CV 3/5] END model__learning_rate=0.1, model__max_depth=30, model__subsample=0.5, preprocess__cat__si__strategy=constant, preprocess__num__ii=IterativeImputer();, score=-532594533.605 total time=   0.4s
[CV 1/5] END model__learning_rate=0.1, model__max_depth=-1, model__subsample=1.0, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=IterativeImputer();, score=-1038744584.272 total time=   0.6s
[CV 4/5] END model__learning_rate=0.1, model__max_depth=-1, model__subsample=1.0, preprocess__cat__si__strategy=constant, preprocess__num__ii=IterativeImputer();, score=-551768174.727 total time=   0.4s
[CV 2/5] END model__learning_rate=0.1, model__max_depth=-1, model__subsample=0.5, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=IterativeImputer();, score=-1024476538.628 total time=   0.4s
[CV 2/5] END model__learning_rate=0.1, model__max_depth=-1, model__subsample=0.5, preprocess__cat__si__strategy=constant, preprocess__num__ii=KNNImputer();, score=-1033297772.352 total time=   0.2s
[CV 4/5] END model__learning_rate=0.1, model__max_depth=-1, model__subsample=0.5, preprocess__cat__si__strategy=constant, preprocess__num__ii=IterativeImputer();, score=-551768174.727 total time=   0.4s
[CV 4/5] END model__learning_rate=0.2, model__max_depth=30, model__subsample=1.0, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=KNNImputer();, score=-544430870.856 total time=   0.2s
[CV 3/5] END model__learning_rate=0.2, model__max_depth=30, model__subsample=1.0, preprocess__cat__si__strategy=constant, preprocess__num__ii=SimpleImputer();, score=-539187722.319 total time=   0.1s
[CV 1/5] END model__learning_rate=0.2, model__max_depth=30, model__subsample=1.0, preprocess__cat__si__strategy=constant, preprocess__num__ii=KNNImputer();, score=-1101298878.719 total time=   0.2s
[CV 3/5] END model__learning_rate=0.2, model__max_depth=30, model__subsample=1.0, preprocess__cat__si__strategy=constant, preprocess__num__ii=IterativeImputer();, score=-533278666.873 total time=   0.4s
[CV 3/5] END model__learning_rate=0.2, model__max_depth=30, model__subsample=0.5, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=KNNImputer();, score=-540602961.526 total time=   0.2s
[CV 1/5] END model__learning_rate=0.2, model__max_depth=30, model__subsample=0.5, preprocess__cat__si__strategy=constant, preprocess__num__ii=SimpleImputer();, score=-1088255251.747 total time=   0.1s
[CV 4/5] END model__learning_rate=0.2, model__max_depth=30, model__subsample=0.5, preprocess__cat__si__strategy=constant, preprocess__num__ii=SimpleImputer();, score=-599626460.012 total time=   0.1s
[CV 2/5] END model__learning_rate=0.2, model__max_depth=30, model__subsample=0.5, preprocess__cat__si__strategy=constant, preprocess__num__ii=KNNImputer();, score=-1064162610.680 total time=   0.2s
[CV 5/5] END model__learning_rate=0.2, model__max_depth=30, model__subsample=0.5, preprocess__cat__si__strategy=constant, preprocess__num__ii=IterativeImputer();, score=-1226474594.655 total time=   0.4s
[CV 2/5] END model__learning_rate=0.2, model__max_depth=-1, model__subsample=1.0, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=IterativeImputer();, score=-1045009894.967 total time=   0.4s
[CV 2/5] END model__learning_rate=0.2, model__max_depth=-1, model__subsample=1.0, preprocess__cat__si__strategy=constant, preprocess__num__ii=KNNImputer();, score=-1064162610.680 total time=   0.2s
[CV 5/5] END model__learning_rate=0.2, model__max_depth=-1, model__subsample=1.0, preprocess__cat__si__strategy=constant, preprocess__num__ii=IterativeImputer();, score=-1226474594.655 total time=   0.4s
[CV 2/5] END model__learning_rate=0.2, model__max_depth=-1, model__subsample=0.5, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=IterativeImputer();, score=-1045009894.967 total time=   0.4s
[CV 1/5] END model__learning_rate=0.2, model__max_depth=-1, model__subsample=0.5, preprocess__cat__si__strategy=constant, preprocess__num__ii=KNNImputer();, score=-1101298878.719 total time=   0.2s
[CV 4/5] END model__learning_rate=0.2, model__max_depth=-1, model__subsample=0.5, preprocess__cat__si__strategy=constant, preprocess__num__ii=IterativeImputer();, score=-600837629.536 total time=   0.3s
[CV 1/5] END model__learning_rate=0.1, model__max_depth=30, model__subsample=1.0, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=SimpleImputer();, score=-1094302605.510 total time=   0.2s
[CV 4/5] END model__learning_rate=0.1, model__max_depth=30, model__subsample=1.0, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=KNNImputer();, score=-518644185.752 total time=   0.2s
[CV 2/5] END model__learning_rate=0.1, model__max_depth=30, model__subsample=1.0, preprocess__cat__si__strategy=constant, preprocess__num__ii=SimpleImputer();, score=-995475493.332 total time=   0.1s
[CV 5/5] END model__learning_rate=0.1, model__max_depth=30, model__subsample=1.0, preprocess__cat__si__strategy=constant, preprocess__num__ii=SimpleImputer();, score=-1261991041.562 total time=   0.1s
[CV 1/5] END model__learning_rate=0.1, model__max_depth=30, model__subsample=1.0, preprocess__cat__si__strategy=constant, preprocess__num__ii=IterativeImputer();, score=-1047546222.332 total time=   0.6s
[CV 4/5] END model__learning_rate=0.1, model__max_depth=30, model__subsample=0.5, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=IterativeImputer();, score=-570100776.470 total time=   0.3s
[CV 4/5] END model__learning_rate=0.1, model__max_depth=30, model__subsample=0.5, preprocess__cat__si__strategy=constant, preprocess__num__ii=KNNImputer();, score=-513174790.496 total time=   0.2s
[CV 2/5] END model__learning_rate=0.1, model__max_depth=-1, model__subsample=1.0, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=SimpleImputer();, score=-997691407.890 total time=   0.1s
[CV 5/5] END model__learning_rate=0.1, model__max_depth=-1, model__subsample=1.0, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=SimpleImputer();, score=-1226710083.913 total time=   0.1s
[CV 5/5] END model__learning_rate=0.1, model__max_depth=-1, model__subsample=1.0, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=KNNImputer();, score=-1224677483.241 total time=   0.2s
[CV 3/5] END model__learning_rate=0.1, model__max_depth=-1, model__subsample=1.0, preprocess__cat__si__strategy=constant, preprocess__num__ii=SimpleImputer();, score=-529011858.629 total time=   0.1s
[CV 1/5] END model__learning_rate=0.1, model__max_depth=-1, model__subsample=1.0, preprocess__cat__si__strategy=constant, preprocess__num__ii=KNNImputer();, score=-1060914076.633 total time=   0.2s
[CV 1/5] END model__learning_rate=0.1, model__max_depth=-1, model__subsample=1.0, preprocess__cat__si__strategy=constant, preprocess__num__ii=IterativeImputer();, score=-1047546222.332 total time=   0.6s
[CV 5/5] END model__learning_rate=0.1, model__max_depth=-1, model__subsample=0.5, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=IterativeImputer();, score=-1219549323.929 total time=   0.4s
[CV 2/5] END model__learning_rate=0.1, model__max_depth=-1, model__subsample=0.5, preprocess__cat__si__strategy=constant, preprocess__num__ii=IterativeImputer();, score=-1016845641.469 total time=   0.4s
[CV 2/5] END model__learning_rate=0.2, model__max_depth=30, model__subsample=1.0, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=KNNImputer();, score=-1017028960.525 total time=   0.2s
[CV 5/5] END model__learning_rate=0.2, model__max_depth=30, model__subsample=1.0, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=IterativeImputer();, score=-1249207388.654 total time=   0.4s
[CV 2/5] END model__learning_rate=0.2, model__max_depth=30, model__subsample=1.0, preprocess__cat__si__strategy=constant, preprocess__num__ii=IterativeImputer();, score=-1034331933.536 total time=   0.4s
[CV 2/5] END model__learning_rate=0.2, model__max_depth=30, model__subsample=0.5, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=KNNImputer();, score=-1017028960.525 total time=   0.2s
[CV 2/5] END model__learning_rate=0.2, model__max_depth=30, model__subsample=0.5, preprocess__cat__si__strategy=constant, preprocess__num__ii=SimpleImputer();, score=-1024576434.974 total time=   0.1s
[CV 5/5] END model__learning_rate=0.2, model__max_depth=30, model__subsample=0.5, preprocess__cat__si__strategy=constant, preprocess__num__ii=SimpleImputer();, score=-1271758627.677 total time=   0.2s
[CV 5/5] END model__learning_rate=0.2, model__max_depth=30, model__subsample=0.5, preprocess__cat__si__strategy=constant, preprocess__num__ii=KNNImputer();, score=-1210584444.764 total time=   0.2s
[CV 3/5] END model__learning_rate=0.2, model__max_depth=-1, model__subsample=1.0, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=SimpleImputer();, score=-524058509.993 total time=   0.2s
[CV 1/5] END model__learning_rate=0.2, model__max_depth=-1, model__subsample=1.0, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=KNNImputer();, score=-1079192998.183 total time=   0.2s
[CV 3/5] END model__learning_rate=0.2, model__max_depth=-1, model__subsample=1.0, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=IterativeImputer();, score=-576066791.159 total time=   0.4s
[CV 3/5] END model__learning_rate=0.2, model__max_depth=-1, model__subsample=1.0, preprocess__cat__si__strategy=constant, preprocess__num__ii=KNNImputer();, score=-564186901.908 total time=   0.2s
[CV 1/5] END model__learning_rate=0.2, model__max_depth=-1, model__subsample=0.5, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=SimpleImputer();, score=-1174830723.077 total time=   0.1s
[CV 4/5] END model__learning_rate=0.2, model__max_depth=-1, model__subsample=0.5, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=SimpleImputer();, score=-589395877.632 total time=   0.1s
[CV 4/5] END model__learning_rate=0.2, model__max_depth=-1, model__subsample=0.5, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=KNNImputer();, score=-544430870.856 total time=   0.3s
[CV 3/5] END model__learning_rate=0.2, model__max_depth=-1, model__subsample=0.5, preprocess__cat__si__strategy=constant, preprocess__num__ii=SimpleImputer();, score=-539187722.319 total time=   0.2s
[CV 2/5] END model__learning_rate=0.2, model__max_depth=-1, model__subsample=0.5, preprocess__cat__si__strategy=constant, preprocess__num__ii=KNNImputer();, score=-1064162610.680 total time=   0.2s
[CV 5/5] END model__learning_rate=0.2, model__max_depth=-1, model__subsample=0.5, preprocess__cat__si__strategy=constant, preprocess__num__ii=IterativeImputer();, score=-1226474594.655 total time=   0.3s
[CV 5/5] END model__learning_rate=0.1, model__max_depth=30, model__subsample=1.0, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=SimpleImputer();, score=-1226710083.913 total time=   0.2s
[CV 2/5] END model__learning_rate=0.1, model__max_depth=30, model__subsample=1.0, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=IterativeImputer();, score=-1024476538.628 total time=   0.4s
[CV 3/5] END model__learning_rate=0.1, model__max_depth=30, model__subsample=1.0, preprocess__cat__si__strategy=constant, preprocess__num__ii=KNNImputer();, score=-541737588.393 total time=   0.2s
[CV 5/5] END model__learning_rate=0.1, model__max_depth=30, model__subsample=1.0, preprocess__cat__si__strategy=constant, preprocess__num__ii=IterativeImputer();, score=-1260432508.211 total time=   0.4s
[CV 1/5] END model__learning_rate=0.1, model__max_depth=30, model__subsample=0.5, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=IterativeImputer();, score=-1038744584.272 total time=   0.4s
[CV 5/5] END model__learning_rate=0.1, model__max_depth=30, model__subsample=0.5, preprocess__cat__si__strategy=constant, preprocess__num__ii=KNNImputer();, score=-1239206018.769 total time=   0.1s
[CV 1/5] END model__learning_rate=0.1, model__max_depth=-1, model__subsample=1.0, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=SimpleImputer();, score=-1094302605.510 total time=   0.1s
[CV 4/5] END model__learning_rate=0.1, model__max_depth=-1, model__subsample=1.0, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=SimpleImputer();, score=-530900512.729 total time=   0.2s
[CV 3/5] END model__learning_rate=0.1, model__max_depth=-1, model__subsample=1.0, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=KNNImputer();, score=-515317030.231 total time=   0.2s
[CV 1/5] END model__learning_rate=0.1, model__max_depth=-1, model__subsample=1.0, preprocess__cat__si__strategy=constant, preprocess__num__ii=SimpleImputer();, score=-1102984449.306 total time=   0.1s
[CV 4/5] END model__learning_rate=0.1, model__max_depth=-1, model__subsample=1.0, preprocess__cat__si__strategy=constant, preprocess__num__ii=SimpleImputer();, score=-543635446.429 total time=   0.1s
[CV 3/5] END model__learning_rate=0.1, model__max_depth=-1, model__subsample=1.0, preprocess__cat__si__strategy=constant, preprocess__num__ii=KNNImputer();, score=-541737588.393 total time=   0.2s
[CV 1/5] END model__learning_rate=0.1, model__max_depth=-1, model__subsample=0.5, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=SimpleImputer();, score=-1094302605.510 total time=   0.1s
[CV 4/5] END model__learning_rate=0.1, model__max_depth=-1, model__subsample=0.5, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=SimpleImputer();, score=-530900512.729 total time=   0.2s
[CV 4/5] END model__learning_rate=0.1, model__max_depth=-1, model__subsample=0.5, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=KNNImputer();, score=-518644185.752 total time=   0.2s
[CV 2/5] END model__learning_rate=0.1, model__max_depth=-1, model__subsample=0.5, preprocess__cat__si__strategy=constant, preprocess__num__ii=SimpleImputer();, score=-995475493.332 total time=   0.1s
[CV 5/5] END model__learning_rate=0.1, model__max_depth=-1, model__subsample=0.5, preprocess__cat__si__strategy=constant, preprocess__num__ii=SimpleImputer();, score=-1261991041.562 total time=   0.1s
[CV 4/5] END model__learning_rate=0.1, model__max_depth=-1, model__subsample=0.5, preprocess__cat__si__strategy=constant, preprocess__num__ii=KNNImputer();, score=-513174790.496 total time=   0.2s
[CV 2/5] END model__learning_rate=0.2, model__max_depth=30, model__subsample=1.0, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=SimpleImputer();, score=-1031476671.446 total time=   0.1s
[CV 5/5] END model__learning_rate=0.2, model__max_depth=30, model__subsample=1.0, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=SimpleImputer();, score=-1267733161.543 total time=   0.1s
[CV 1/5] END model__learning_rate=0.2, model__max_depth=30, model__subsample=1.0, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=IterativeImputer();, score=-1051746575.599 total time=   0.6s
[CV 5/5] END model__learning_rate=0.2, model__max_depth=30, model__subsample=1.0, preprocess__cat__si__strategy=constant, preprocess__num__ii=IterativeImputer();, score=-1226474594.655 total time=   0.4s
[CV 2/5] END model__learning_rate=0.2, model__max_depth=30, model__subsample=0.5, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=IterativeImputer();, score=-1045009894.967 total time=   0.4s
[CV 3/5] END model__learning_rate=0.2, model__max_depth=30, model__subsample=0.5, preprocess__cat__si__strategy=constant, preprocess__num__ii=KNNImputer();, score=-564186901.908 total time=   0.2s
[CV 1/5] END model__learning_rate=0.2, model__max_depth=-1, model__subsample=1.0, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=SimpleImputer();, score=-1174830723.077 total time=   0.1s
[CV 4/5] END model__learning_rate=0.2, model__max_depth=-1, model__subsample=1.0, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=SimpleImputer();, score=-589395877.632 total time=   0.2s
[CV 2/5] END model__learning_rate=0.2, model__max_depth=-1, model__subsample=1.0, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=KNNImputer();, score=-1017028960.525 total time=   0.2s
[CV 5/5] END model__learning_rate=0.2, model__max_depth=-1, model__subsample=1.0, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=IterativeImputer();, score=-1249207388.654 total time=   0.4s
[CV 2/5] END model__learning_rate=0.2, model__max_depth=-1, model__subsample=1.0, preprocess__cat__si__strategy=constant, preprocess__num__ii=IterativeImputer();, score=-1034331933.536 total time=   0.4s
[CV 2/5] END model__learning_rate=0.2, model__max_depth=-1, model__subsample=0.5, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=KNNImputer();, score=-1017028960.525 total time=   0.2s
[CV 5/5] END model__learning_rate=0.2, model__max_depth=-1, model__subsample=0.5, preprocess__cat__si__strategy=most_frequent, preprocess__num__ii=IterativeImputer();, score=-1249207388.654 total time=   0.4s
[CV 1/5] END model__learning_rate=0.2, model__max_depth=-1, model__subsample=0.5, preprocess__cat__si__strategy=constant, preprocess__num__ii=IterativeImputer();, score=-1064924532.138 total time=   0.5s
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Web Scraping</title>
      <link>https://matteocourthoud.github.io/course/data-science/07_web_scraping/</link>
      <pubDate>Sun, 01 May 2022 00:00:00 +0000</pubDate>
      <guid>https://matteocourthoud.github.io/course/data-science/07_web_scraping/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import os
import re
import time
import requests
import pandas as pd

from bs4 import BeautifulSoup
from pprint import pprint
from selenium import webdriver
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There is no silver bullet to getting info from the internet.
The coding requirements in these notes start easy and will gradually become more demanding. We will cover the following web scraping techniques:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Pandas&lt;/li&gt;
&lt;li&gt;APIs&lt;/li&gt;
&lt;li&gt;Scraping static webpages with BeautifulSoup&lt;/li&gt;
&lt;li&gt;Scraping dynamic wepages with Selenium&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;pandas&#34;&gt;Pandas&lt;/h2&gt;
&lt;p&gt;The Pandas library has a very useful webscraping command: &lt;code&gt;read_html&lt;/code&gt;. The &lt;code&gt;read_html&lt;/code&gt; command works for webpages that contain tables that are particularly well behaved. Let&amp;rsquo;s see an example: &lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_countries_by_GDP_%28nominal%29&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://en.wikipedia.org/wiki/List_of_countries_by_GDP_(nominal)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;At first glance, it seems that there are three tables in this Wikipedia page:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;data from the IMF&lt;/li&gt;
&lt;li&gt;data from the World Bank&lt;/li&gt;
&lt;li&gt;data from the UN&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let&amp;rsquo;s see which tables pandas recognizes.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Scrape all tables from Wikipedia page
url = &#39;https://en.wikipedia.org/wiki/List_of_countries_by_GDP_(nominal)&#39;
df_list = pd.read_html(url)

# Check number of tables on the page
print(len(df_list))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;7
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Apparently Pandas has found 10 tables in this webpage. Let&amp;rsquo;s see what is their content.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Check headers of each table
for df in df_list: print(df.shape)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;(1, 1)
(1, 3)
(216, 9)
(9, 2)
(7, 2)
(13, 2)
(2, 2)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It seems that pandas has found many more tables that we could see. The ones that are of interest to us are probably the 3rd, 4th and 5th. But that are the others? Let&amp;rsquo;s look at the them.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Check first
df_list[0].head()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;0&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;Largest economies by nominal GDP in 2021[1]&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Check second
df_list[1].head()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;th&gt;2&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;.mw-parser-output .legend{page-break-inside:av...&lt;/td&gt;
      &lt;td&gt;$750 billion â $1 trillion $500â50 billion $25...&lt;/td&gt;
      &lt;td&gt;$50â100 billion $25â50 billion $5â25 billion &amp;lt;...&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;Apparently, the first two are simply picture captions.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Check third
df_list[2].head()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead tr th {
    text-align: left;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Country/Territory&lt;/th&gt;
      &lt;th&gt;Subregion&lt;/th&gt;
      &lt;th&gt;Region&lt;/th&gt;
      &lt;th colspan=&#34;2&#34; halign=&#34;left&#34;&gt;IMF[1]&lt;/th&gt;
      &lt;th colspan=&#34;2&#34; halign=&#34;left&#34;&gt;United Nations[12]&lt;/th&gt;
      &lt;th colspan=&#34;2&#34; halign=&#34;left&#34;&gt;World Bank[13][14]&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Country/Territory&lt;/th&gt;
      &lt;th&gt;Subregion&lt;/th&gt;
      &lt;th&gt;Region&lt;/th&gt;
      &lt;th&gt;Estimate&lt;/th&gt;
      &lt;th&gt;Year&lt;/th&gt;
      &lt;th&gt;Estimate&lt;/th&gt;
      &lt;th&gt;Year&lt;/th&gt;
      &lt;th&gt;Estimate&lt;/th&gt;
      &lt;th&gt;Year&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;United States&lt;/td&gt;
      &lt;td&gt;Northern America&lt;/td&gt;
      &lt;td&gt;Americas&lt;/td&gt;
      &lt;td&gt;22939580.0&lt;/td&gt;
      &lt;td&gt;2021&lt;/td&gt;
      &lt;td&gt;20893746.0&lt;/td&gt;
      &lt;td&gt;2020&lt;/td&gt;
      &lt;td&gt;20936600.0&lt;/td&gt;
      &lt;td&gt;2020&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;China&lt;/td&gt;
      &lt;td&gt;Eastern Asia&lt;/td&gt;
      &lt;td&gt;Asia&lt;/td&gt;
      &lt;td&gt;16862979.0&lt;/td&gt;
      &lt;td&gt;[n 2]2021&lt;/td&gt;
      &lt;td&gt;14722801.0&lt;/td&gt;
      &lt;td&gt;[n 3]2020&lt;/td&gt;
      &lt;td&gt;14722731.0&lt;/td&gt;
      &lt;td&gt;2020&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;Japan&lt;/td&gt;
      &lt;td&gt;Eastern Asia&lt;/td&gt;
      &lt;td&gt;Asia&lt;/td&gt;
      &lt;td&gt;5103110.0&lt;/td&gt;
      &lt;td&gt;2021&lt;/td&gt;
      &lt;td&gt;5057759.0&lt;/td&gt;
      &lt;td&gt;2020&lt;/td&gt;
      &lt;td&gt;4975415.0&lt;/td&gt;
      &lt;td&gt;2020&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;Germany&lt;/td&gt;
      &lt;td&gt;Western Europe&lt;/td&gt;
      &lt;td&gt;Europe&lt;/td&gt;
      &lt;td&gt;4230172.0&lt;/td&gt;
      &lt;td&gt;2021&lt;/td&gt;
      &lt;td&gt;3846414.0&lt;/td&gt;
      &lt;td&gt;2020&lt;/td&gt;
      &lt;td&gt;3806060.0&lt;/td&gt;
      &lt;td&gt;2020&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;United Kingdom&lt;/td&gt;
      &lt;td&gt;Western Europe&lt;/td&gt;
      &lt;td&gt;Europe&lt;/td&gt;
      &lt;td&gt;3108416.0&lt;/td&gt;
      &lt;td&gt;2021&lt;/td&gt;
      &lt;td&gt;2764198.0&lt;/td&gt;
      &lt;td&gt;2020&lt;/td&gt;
      &lt;td&gt;2707744.0&lt;/td&gt;
      &lt;td&gt;2020&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;This is clearly what we were looking for. A part from the footnotes, the table is already clean and organized.&lt;/p&gt;
&lt;p&gt;If we knew the name of the table, we could directly retrieve it. However, we will see more about it in the next lecture.&lt;/p&gt;
&lt;h2 id=&#34;specific-libraries&#34;&gt;Specific Libraries&lt;/h2&gt;
&lt;p&gt;Sometimes, there are libraries that are already written down to do the scraping for you. Each one is tailored for a specific website and they are usually userwritten and prone to bugs and errors. However, they are often efficient and save you the time to worry about getting around some website-specific issues.&lt;/p&gt;
&lt;p&gt;One example is the &lt;code&gt;pytrends&lt;/code&gt; library for scraping Google Trends. Let&amp;rsquo;s first install it&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pip3 install pytrends
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;rsquo;s see how it works. Imagine we want to do the following search:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;words &amp;ldquo;python&amp;rdquo;, &amp;ldquo;matlab&amp;rdquo;, &amp;ldquo;stata&amp;rdquo;&lt;/li&gt;
&lt;li&gt;the the second half of in 2019&lt;/li&gt;
&lt;li&gt;daily&lt;/li&gt;
&lt;li&gt;in the US&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can get more details on how pytrends works &lt;a href=&#34;https://github.com/GeneralMills/pytrends#historical-hourly-interest&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;. The important thing to know is that if you query a time period of more than 200 days, Google will give you weekly results, instead of daily.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Pytrends search
from pytrends.request import TrendReq

# Set parameters
words = [&#39;python&#39;, &#39;matlab&#39;, &#39;stata&#39;]
timeframe = &#39;2019-07-01 2019-12-31&#39;
country = &#39;US&#39;

# Get data
pytrend = TrendReq()
pytrend.build_payload(kw_list=words, timeframe=timeframe, geo=country)
df_trends = pytrend.interest_over_time()

# Plot
trends_plot = df_trends.plot.line()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../img/07_web_scraping_16_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Apparently people don&amp;rsquo;t code during the weekend&amp;hellip;.&lt;/p&gt;
&lt;h2 id=&#34;apis&#34;&gt;APIs&lt;/h2&gt;
&lt;p&gt;From Wikipedia&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;An application programming interface (API) is an interface or communication protocol between different parts of a computer program intended to simplify the implementation and maintenance of software.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In practice, it means that the are some webpages that are structured not to be user-readable but to be computer-readable. Let&amp;rsquo;s see one example.&lt;/p&gt;
&lt;p&gt;Google provides many APIs for its services. However, they now all need identification, which means that you have to log in into your Google account and request an API key from there. This allows Google to monitor your behavior since the number of API requests is limited and beyond a certain treshold, one need to pay (a lot).&lt;/p&gt;
&lt;p&gt;There are however some free APIs. One&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s have a look at one of these: zippopotam. Zippopotam lets you retrieve location information from a zip code in the US. Other countries are supported as well.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Let&#39;s search the department locatiton
import requests

zipcode = &#39;90210&#39;
url = &#39;https://api.zippopotam.us/us/&#39;+zipcode

response = requests.get(url)
data = response.json()
data
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;{&#39;post code&#39;: &#39;90210&#39;,
 &#39;country&#39;: &#39;United States&#39;,
 &#39;country abbreviation&#39;: &#39;US&#39;,
 &#39;places&#39;: [{&#39;place name&#39;: &#39;Beverly Hills&#39;,
   &#39;longitude&#39;: &#39;-118.4065&#39;,
   &#39;state&#39;: &#39;California&#39;,
   &#39;state abbreviation&#39;: &#39;CA&#39;,
   &#39;latitude&#39;: &#39;34.0901&#39;}]}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Data is in JSON (JavaScript Object Notation) format which is basically a nested dictionary-list format. Indeed, we see that in our case, data is a dictionary where the last elements is a list with one element - another dictionary.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Check type of value
for d in data.values():
    print(type(d))
    
# Check list length
print(len(data[&#39;places&#39;]))

# Check type of content of list
print(type(data[&#39;places&#39;][0]))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;class &#39;str&#39;&amp;gt;
&amp;lt;class &#39;str&#39;&amp;gt;
&amp;lt;class &#39;str&#39;&amp;gt;
&amp;lt;class &#39;list&#39;&amp;gt;
1
&amp;lt;class &#39;dict&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The part that could be interesting to us is contained in the &lt;code&gt;places&lt;/code&gt; category. We can easily extract it and transform it into a dataframe.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Add zipcode to data
data[&#39;places&#39;][0][&#39;zipcode&#39;] = zipcode

# Export data
df = pd.DataFrame(data[&#39;places&#39;])
df
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;place name&lt;/th&gt;
      &lt;th&gt;longitude&lt;/th&gt;
      &lt;th&gt;state&lt;/th&gt;
      &lt;th&gt;state abbreviation&lt;/th&gt;
      &lt;th&gt;latitude&lt;/th&gt;
      &lt;th&gt;zipcode&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;Beverly Hills&lt;/td&gt;
      &lt;td&gt;-118.4065&lt;/td&gt;
      &lt;td&gt;California&lt;/td&gt;
      &lt;td&gt;CA&lt;/td&gt;
      &lt;td&gt;34.0901&lt;/td&gt;
      &lt;td&gt;90210&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h2 id=&#34;static-webscraping&#34;&gt;Static Webscraping&lt;/h2&gt;
&lt;p&gt;We have so far used pre-made tools in order to do web-scraping. When the website contains the data in a nice table or an API is available, we do not need to worry much and we can directly retrieve the data. However, most of web scraping is much more complicated. Data is often the product of webscraping and is not readily available. Moreover, sometimes webscraping knowledge can supplement the need to pay for an API.&lt;/p&gt;
&lt;h3 id=&#34;http&#34;&gt;HTTP&lt;/h3&gt;
&lt;p&gt;What happens when you open a page on the internet? In short, your web browser is sending a request to the website that, in turn, sends back a reply/response. The exchange of messages is complex but its core involves a HyperText Transfer Protocol (HTTP) request message to a web server, followed by a HTTP response (or reply). All static webscraping is build on HTTP so let&amp;rsquo;s have a closer look.&lt;/p&gt;
&lt;p&gt;An HTTP message essentially has 4 components:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A request line&lt;/li&gt;
&lt;li&gt;A number of request headers&lt;/li&gt;
&lt;li&gt;An empty line&lt;/li&gt;
&lt;li&gt;An optional message&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;A request message could be&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;GET /hello.htm HTTP/1.1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The response would be&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;HTTP/1.1 200 OK
Date: Sun, 10 Oct 2010 23:26:07 GMT
Server: Apache/2.2.8 (Ubuntu) mod_ssl/2.2.8 OpenSSL/0.9.8g
Last-Modified: Sun, 26 Sep 2010 22:04:35 GMT
ETag: &amp;quot;45b6-834-49130cc1182c0&amp;quot;
Accept-Ranges: bytes
Content-Length: 12
Connection: close
Content-Type: text/html

&amp;lt;html&amp;gt;
   &amp;lt;body&amp;gt;
   
      &amp;lt;h1&amp;gt;Hello, World!&amp;lt;/h1&amp;gt;
   
   &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So, in this case the parts are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The &lt;strong&gt;request line&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;HTTP/1.1 200 OK
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;The &lt;strong&gt;request headers&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;Date: Sun, 10 Oct 2010 23:26:07 GMT
Server: Apache/2.2.8 (Ubuntu) mod_ssl/2.2.8 OpenSSL/0.9.8g
Last-Modified: Sun, 26 Sep 2010 22:04:35 GMT
ETag: &amp;quot;45b6-834-49130cc1182c0&amp;quot;
Accept-Ranges: bytes
Content-Length: 12
Connection: close
Content-Type: text/html
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;The &lt;strong&gt;empty line&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;optional message&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;html&amp;gt;
   &amp;lt;body&amp;gt;
   
      &amp;lt;h1&amp;gt;Hello, World!&amp;lt;/h1&amp;gt;
   
   &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We are interested in the optional message, which is essentially the content of the page we want to scrape. The content is usually written in HTML which is not a proper programming language but rather a &lt;em&gt;typesetting language&lt;/em&gt; since it is the language underlying web pages and is usually generated from other programming languages.&lt;/p&gt;
&lt;h3 id=&#34;requests&#34;&gt;Requests&lt;/h3&gt;
&lt;p&gt;There are many different packages in python to send requests to a web page and read its response. The most user-friendly is the &lt;code&gt;requests&lt;/code&gt; package. You can find plenty of useful information on the &lt;code&gt;requests&lt;/code&gt; library on its website: &lt;a href=&#34;https://requests.readthedocs.io/en/master/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://requests.readthedocs.io/en/master/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We are now going to have a look at a simple example: &lt;a href=&#34;http://pythonscraping.com/pages/page1.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://pythonscraping.com/pages/page1.html&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Request a simple web page
url1 = &#39;http://pythonscraping.com/pages/page1.html&#39;
response = requests.get(url1)
print(response)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;Response [200]&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We are (hopefully) getting a &lt;code&gt;&amp;lt;Response [200]&amp;gt;&lt;/code&gt; message. In short, what we got is the status code of the request we sent to the website. The status code is a 3-digit code and essentially there are two broad categories of status codes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2XX: success&lt;/li&gt;
&lt;li&gt;4XX, 5XX: failure&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It can be useful to know this codes as they are a fast way to check whether your request has failed or not. When webscraping the most common reasons you get an error are&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The link does not exist: wither the link is old/expired or you misspelled it and hence there is no page to request&lt;/li&gt;
&lt;li&gt;You have been &amp;ldquo;caught&amp;rdquo;. This is pretty common when webscraping and happens every time you are too aggressive with your scraping. How much &amp;ldquo;aggressive&amp;rdquo; is &amp;ldquo;too agrressive&amp;rdquo; depends on the website. Usually big tech websites are particularly hard to scrape and anything that is &amp;ldquo;faster than human&amp;rdquo; gets blocked. Sometimes also slow but persistent requests get blocked as well.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We have now analyzed the response status but, what is actually the response content? Let&amp;rsquo;s inspect the response object more in detail.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Print response attributes
dir(response)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;__attrs__&#39;,
 &#39;__bool__&#39;,
 &#39;__class__&#39;,
 &#39;__delattr__&#39;,
 &#39;__dict__&#39;,
 &#39;__dir__&#39;,
 &#39;__doc__&#39;,
 &#39;__enter__&#39;,
 &#39;__eq__&#39;,
 &#39;__exit__&#39;,
 &#39;__format__&#39;,
 &#39;__ge__&#39;,
 &#39;__getattribute__&#39;,
 &#39;__getstate__&#39;,
 &#39;__gt__&#39;,
 &#39;__hash__&#39;,
 &#39;__init__&#39;,
 &#39;__init_subclass__&#39;,
 &#39;__iter__&#39;,
 &#39;__le__&#39;,
 &#39;__lt__&#39;,
 &#39;__module__&#39;,
 &#39;__ne__&#39;,
 &#39;__new__&#39;,
 &#39;__nonzero__&#39;,
 &#39;__reduce__&#39;,
 &#39;__reduce_ex__&#39;,
 &#39;__repr__&#39;,
 &#39;__setattr__&#39;,
 &#39;__setstate__&#39;,
 &#39;__sizeof__&#39;,
 &#39;__str__&#39;,
 &#39;__subclasshook__&#39;,
 &#39;__weakref__&#39;,
 &#39;_content&#39;,
 &#39;_content_consumed&#39;,
 &#39;_next&#39;,
 &#39;apparent_encoding&#39;,
 &#39;close&#39;,
 &#39;connection&#39;,
 &#39;content&#39;,
 &#39;cookies&#39;,
 &#39;elapsed&#39;,
 &#39;encoding&#39;,
 &#39;headers&#39;,
 &#39;history&#39;,
 &#39;is_permanent_redirect&#39;,
 &#39;is_redirect&#39;,
 &#39;iter_content&#39;,
 &#39;iter_lines&#39;,
 &#39;json&#39;,
 &#39;links&#39;,
 &#39;next&#39;,
 &#39;ok&#39;,
 &#39;raise_for_status&#39;,
 &#39;raw&#39;,
 &#39;reason&#39;,
 &#39;request&#39;,
 &#39;status_code&#39;,
 &#39;text&#39;,
 &#39;url&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We are actually interested in the text of the response.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Print response content
response.text
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;&amp;lt;html&amp;gt;\n&amp;lt;head&amp;gt;\n&amp;lt;title&amp;gt;A Useful Page&amp;lt;/title&amp;gt;\n&amp;lt;/head&amp;gt;\n&amp;lt;body&amp;gt;\n&amp;lt;h1&amp;gt;An Interesting Title&amp;lt;/h1&amp;gt;\n&amp;lt;div&amp;gt;\nLorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n&amp;lt;/div&amp;gt;\n&amp;lt;/body&amp;gt;\n&amp;lt;/html&amp;gt;\n&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is the whole content of the table. There is a large chunk of text and other parts which look more obscure. In order to understand the structure of the page, we need to have a closer look at the language in which the webpage is written: HTML. We will do it in the next section.&lt;/p&gt;
&lt;p&gt;However, let&amp;rsquo;s first analyze the other relevant components of the response. We have already had a look at the status. Let&amp;rsquo;s inspect the headers.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Print response headers
response.headers
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;{&#39;Server&#39;: &#39;nginx&#39;, &#39;Date&#39;: &#39;Thu, 10 Feb 2022 11:11:41 GMT&#39;, &#39;Content-Type&#39;: &#39;text/html&#39;, &#39;Content-Length&#39;: &#39;361&#39;, &#39;Connection&#39;: &#39;keep-alive&#39;, &#39;X-Accel-Version&#39;: &#39;0.01&#39;, &#39;Last-Modified&#39;: &#39;Sat, 09 Jun 2018 19:15:58 GMT&#39;, &#39;ETag&#39;: &#39;&amp;quot;234-56e3a58a63780-gzip&amp;quot;&#39;, &#39;Accept-Ranges&#39;: &#39;bytes&#39;, &#39;Vary&#39;: &#39;Accept-Encoding&#39;, &#39;Content-Encoding&#39;: &#39;gzip&#39;, &#39;X-Powered-By&#39;: &#39;PleskLin&#39;}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;From the headers we can see&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the present date&lt;/li&gt;
&lt;li&gt;the name of the server hosting the page&lt;/li&gt;
&lt;li&gt;the last time the page was modified&lt;/li&gt;
&lt;li&gt;other stuff&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let&amp;rsquo;s now look at the headers of our request.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Request headers
def check_headers(r):
    test_headers = dict(zip(r.request.headers.keys(), r.request.headers.values()))
    pprint(test_headers)
    
check_headers(response)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;{&#39;Accept&#39;: &#39;*/*&#39;,
 &#39;Accept-Encoding&#39;: &#39;gzip, deflate, br&#39;,
 &#39;Connection&#39;: &#39;keep-alive&#39;,
 &#39;User-Agent&#39;: &#39;python-requests/2.27.1&#39;}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The headers of our request are pretty minimal. In order to see what normal headers look like, go to &lt;a href=&#34;https://www.whatismybrowser.com/developers/what-http-headers-is-my-browser-sending&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.whatismybrowser.com/developers/what-http-headers-is-my-browser-sending&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Normal headers look something like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{&#39;Accept&#39;: &#39;text/html,application/xhtml+xml,application/xml;q = 0.9, image / &#39;
           &#39;webp, * / *;q = 0.8&#39;,
 &#39;Accept-Encoding&#39;: &#39;gzip, deflate, br&#39;,
 &#39;Accept-Language&#39;: &#39;en-US,en;q=0.9,it-IT;q=0.8,it;q=0.7,de-DE;q=0.6,de;q=0.5&#39;,
 &#39;Connection&#39;: &#39;keep-alive&#39;,
 &#39;Host&#39;: &#39;www.whatismybrowser.com&#39;,
 &#39;Referer&#39;: &#39;http://localhost:8888/&#39;,
 &#39;User-Agent&#39;: &#39;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) &#39;
               &#39;AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.88 &#39;
               &#39;Safari/537.36&#39;}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The most important difference is that the &lt;code&gt;requests&lt;/code&gt; model default &lt;em&gt;User-Agent&lt;/em&gt; is &lt;code&gt;python-requests/2.22.0&lt;/code&gt; which means that we are walking around the web with a big &lt;strong&gt;WARNING: web scrapers&lt;/strong&gt; sign. This is the simplest way to get caught and blocked by a website. Luckily, we can easily change our headers in order to be more subtle.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Change headers
headers = {&amp;quot;User-Agent&amp;quot;: &amp;quot;Mozilla/5.0&amp;quot;,
               &amp;quot;Accept&amp;quot;: &amp;quot;webp, * / *;q = 0.8&amp;quot;,
               &amp;quot;Accept-Language&amp;quot;: &amp;quot;en-US,en;q=0.9&amp;quot;,
               &amp;quot;Accept-Encoding&amp;quot;: &amp;quot;br, gzip, deflate&amp;quot;,
               &amp;quot;Referer&amp;quot;: &amp;quot;https://www.google.ch/&amp;quot;}

# Test if change worked
response = requests.get(url1, headers=headers)
check_headers(response)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;{&#39;Accept&#39;: &#39;webp, * / *;q = 0.8&#39;,
 &#39;Accept-Encoding&#39;: &#39;br, gzip, deflate&#39;,
 &#39;Accept-Language&#39;: &#39;en-US,en;q=0.9&#39;,
 &#39;Connection&#39;: &#39;keep-alive&#39;,
 &#39;Referer&#39;: &#39;https://www.google.ch/&#39;,
 &#39;User-Agent&#39;: &#39;Mozilla/5.0&#39;}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nice! Now we are a little more stealthy.&lt;/p&gt;
&lt;p&gt;You might now be asking yourself what are the ethical limits of webscraping. Information on the internet is public but scraping a website imposes a workload on the website&amp;rsquo;s server. If the website is not protected against aggressive scrapers (most websites are), your activity could significantly slower the website or even crash it.&lt;/p&gt;
&lt;p&gt;Usually websites include their policies for scraping in a text file named &lt;code&gt;robots.txt&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s have a look at the &lt;code&gt;robots.txt&lt;/code&gt; file of &lt;a href=&#34;http://pythonscraping.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://pythonscraping.com/&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Read robots.txt
response = requests.get(&#39;http://pythonscraping.com/robots.txt&#39;)
print(response.text)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;#
# robots.txt
#
# This file is to prevent the crawling and indexing of certain parts
# of your site by web crawlers and spiders run by sites like Yahoo!
# and Google. By telling these &amp;quot;robots&amp;quot; where not to go on your site,
# you save bandwidth and server resources.
#
# This file will be ignored unless it is at the root of your host:
# Used:    http://example.com/robots.txt
# Ignored: http://example.com/site/robots.txt
#
# For more information about the robots.txt standard, see:
# http://www.robotstxt.org/robotstxt.html
#
# For syntax checking, see:
# http://www.frobee.com/robots-txt-check

User-agent: *
Crawl-delay: 10
# Directories
Disallow: /includes/
Disallow: /misc/
Disallow: /modules/
Disallow: /profiles/
Disallow: /scripts/
Disallow: /themes/
# Files
Disallow: /CHANGELOG.txt
Disallow: /cron.php
Disallow: /INSTALL.mysql.txt
Disallow: /INSTALL.pgsql.txt
Disallow: /INSTALL.sqlite.txt
Disallow: /install.php
Disallow: /INSTALL.txt
Disallow: /LICENSE.txt
Disallow: /MAINTAINERS.txt
Disallow: /update.php
Disallow: /UPGRADE.txt
Disallow: /xmlrpc.php
# Paths (clean URLs)
Disallow: /admin/
Disallow: /comment/reply/
Disallow: /filter/tips/
Disallow: /node/add/
Disallow: /search/
Disallow: /user/register/
Disallow: /user/password/
Disallow: /user/login/
Disallow: /user/logout/
# Paths (no clean URLs)
Disallow: /?q=admin/
Disallow: /?q=comment/reply/
Disallow: /?q=filter/tips/
Disallow: /?q=node/add/
Disallow: /?q=search/
Disallow: /?q=user/password/
Disallow: /?q=user/register/
Disallow: /?q=user/login/
Disallow: /?q=user/logout/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As we can see, this &lt;code&gt;robots.txt&lt;/code&gt; file mostly deals with crawlers, i.e. scripts that are designed to recover the structure of a website by exploring it. Crawlers are mostly used by browsers that want to index websites.&lt;/p&gt;
&lt;p&gt;Now we have explored most of the issues around HTTP requests. We can now proceed to what we are interested in: the content of the web page. In order to do that, we need to know the language in which wabpages are written: HTML.&lt;/p&gt;
&lt;h3 id=&#34;html&#34;&gt;HTML&lt;/h3&gt;
&lt;p&gt;Hypertext Markup Language (HTML) is the standard markup language for documents designed to be displayed in a web browser. Web browsers receive HTML documents from a web server or from local storage and render the documents into multimedia web pages. HTML describes the structure of a web page semantically and originally included cues for the appearance of the document.&lt;/p&gt;
&lt;p&gt;HTML elements are delineated by tags, written using angle brackets.&lt;/p&gt;
&lt;h4 id=&#34;tags&#34;&gt;Tags&lt;/h4&gt;
&lt;p&gt;Tags are the cues that HTML uses to surround content and provide information about its nature. There is a very large amount of tags but some of the most common are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; for head and body of the page&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; for paragraphs&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;br&amp;gt;&lt;/code&gt; for line breaks&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; for tables. These are the ones that &lt;code&gt;pandas&lt;/code&gt; reads. However, we have seen that not all elements that look like tables are actually &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; and viceversa. Table elements are tagged as &lt;code&gt;&amp;lt;th&amp;gt;&lt;/code&gt; (table header), &lt;code&gt;&amp;lt;tr&amp;gt;&lt;/code&gt; (table row) and &lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt; (table data: a cell)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; for images&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; to &lt;code&gt;&amp;lt;h6&amp;gt;&lt;/code&gt; for headers (titles and subtitles)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; dor divisions, i.e. for grouping elements&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; for hyperlinks&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;ol&amp;gt;&lt;/code&gt; for unordered and ordered lists where list elements are tagged as &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let&amp;rsquo;s have a look at the previous page&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Inspect HTML
response.text
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;#\n# robots.txt\n#\n# This file is to prevent the crawling and indexing of certain parts\n# of your site by web crawlers and spiders run by sites like Yahoo!\n# and Google. By telling these &amp;quot;robots&amp;quot; where not to go on your site,\n# you save bandwidth and server resources.\n#\n# This file will be ignored unless it is at the root of your host:\n# Used:    http://example.com/robots.txt\n# Ignored: http://example.com/site/robots.txt\n#\n# For more information about the robots.txt standard, see:\n# http://www.robotstxt.org/robotstxt.html\n#\n# For syntax checking, see:\n# http://www.frobee.com/robots-txt-check\n\nUser-agent: *\nCrawl-delay: 10\n# Directories\nDisallow: /includes/\nDisallow: /misc/\nDisallow: /modules/\nDisallow: /profiles/\nDisallow: /scripts/\nDisallow: /themes/\n# Files\nDisallow: /CHANGELOG.txt\nDisallow: /cron.php\nDisallow: /INSTALL.mysql.txt\nDisallow: /INSTALL.pgsql.txt\nDisallow: /INSTALL.sqlite.txt\nDisallow: /install.php\nDisallow: /INSTALL.txt\nDisallow: /LICENSE.txt\nDisallow: /MAINTAINERS.txt\nDisallow: /update.php\nDisallow: /UPGRADE.txt\nDisallow: /xmlrpc.php\n# Paths (clean URLs)\nDisallow: /admin/\nDisallow: /comment/reply/\nDisallow: /filter/tips/\nDisallow: /node/add/\nDisallow: /search/\nDisallow: /user/register/\nDisallow: /user/password/\nDisallow: /user/login/\nDisallow: /user/logout/\n# Paths (no clean URLs)\nDisallow: /?q=admin/\nDisallow: /?q=comment/reply/\nDisallow: /?q=filter/tips/\nDisallow: /?q=node/add/\nDisallow: /?q=search/\nDisallow: /?q=user/password/\nDisallow: /?q=user/register/\nDisallow: /?q=user/login/\nDisallow: /?q=user/logout/\n&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The response looks a little bit messy and not really readable.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;BeautifulSoup&lt;/code&gt; is a python library that renders http responses in a user friendly format and helps recovering elements from tags and attributes.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pip3 install bs4
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;rsquo;s have a look.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Make response readable
soup = BeautifulSoup(response.text, &#39;lxml&#39;)
print(soup)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;&amp;lt;p&amp;gt;#
# robots.txt
#
# This file is to prevent the crawling and indexing of certain parts
# of your site by web crawlers and spiders run by sites like Yahoo!
# and Google. By telling these &amp;quot;robots&amp;quot; where not to go on your site,
# you save bandwidth and server resources.
#
# This file will be ignored unless it is at the root of your host:
# Used:    http://example.com/robots.txt
# Ignored: http://example.com/site/robots.txt
#
# For more information about the robots.txt standard, see:
# http://www.robotstxt.org/robotstxt.html
#
# For syntax checking, see:
# http://www.frobee.com/robots-txt-check

User-agent: *
Crawl-delay: 10
# Directories
Disallow: /includes/
Disallow: /misc/
Disallow: /modules/
Disallow: /profiles/
Disallow: /scripts/
Disallow: /themes/
# Files
Disallow: /CHANGELOG.txt
Disallow: /cron.php
Disallow: /INSTALL.mysql.txt
Disallow: /INSTALL.pgsql.txt
Disallow: /INSTALL.sqlite.txt
Disallow: /install.php
Disallow: /INSTALL.txt
Disallow: /LICENSE.txt
Disallow: /MAINTAINERS.txt
Disallow: /update.php
Disallow: /UPGRADE.txt
Disallow: /xmlrpc.php
# Paths (clean URLs)
Disallow: /admin/
Disallow: /comment/reply/
Disallow: /filter/tips/
Disallow: /node/add/
Disallow: /search/
Disallow: /user/register/
Disallow: /user/password/
Disallow: /user/login/
Disallow: /user/logout/
# Paths (no clean URLs)
Disallow: /?q=admin/
Disallow: /?q=comment/reply/
Disallow: /?q=filter/tips/
Disallow: /?q=node/add/
Disallow: /?q=search/
Disallow: /?q=user/password/
Disallow: /?q=user/register/
Disallow: /?q=user/login/
Disallow: /?q=user/logout/
&amp;lt;/p&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;First of all, what is the &lt;code&gt;html5lib&lt;/code&gt; option? It&amp;rsquo;s the parser. In short, there are often small mistakes/variations in HTML and each parser interprets it differently. In principles, the latest HTML standard is HTML5, therefore the &lt;code&gt;html5lib&lt;/code&gt; parser should be the most &amp;ldquo;correct&amp;rdquo; parser. It might happen that the same code does not work for another person if you use a different parser.&lt;/p&gt;
&lt;p&gt;This is much better but it can be improved.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Prettify response
print(soup.prettify())
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;html&amp;gt;
 &amp;lt;body&amp;gt;
  &amp;lt;p&amp;gt;
   #
# robots.txt
#
# This file is to prevent the crawling and indexing of certain parts
# of your site by web crawlers and spiders run by sites like Yahoo!
# and Google. By telling these &amp;quot;robots&amp;quot; where not to go on your site,
# you save bandwidth and server resources.
#
# This file will be ignored unless it is at the root of your host:
# Used:    http://example.com/robots.txt
# Ignored: http://example.com/site/robots.txt
#
# For more information about the robots.txt standard, see:
# http://www.robotstxt.org/robotstxt.html
#
# For syntax checking, see:
# http://www.frobee.com/robots-txt-check

User-agent: *
Crawl-delay: 10
# Directories
Disallow: /includes/
Disallow: /misc/
Disallow: /modules/
Disallow: /profiles/
Disallow: /scripts/
Disallow: /themes/
# Files
Disallow: /CHANGELOG.txt
Disallow: /cron.php
Disallow: /INSTALL.mysql.txt
Disallow: /INSTALL.pgsql.txt
Disallow: /INSTALL.sqlite.txt
Disallow: /install.php
Disallow: /INSTALL.txt
Disallow: /LICENSE.txt
Disallow: /MAINTAINERS.txt
Disallow: /update.php
Disallow: /UPGRADE.txt
Disallow: /xmlrpc.php
# Paths (clean URLs)
Disallow: /admin/
Disallow: /comment/reply/
Disallow: /filter/tips/
Disallow: /node/add/
Disallow: /search/
Disallow: /user/register/
Disallow: /user/password/
Disallow: /user/login/
Disallow: /user/logout/
# Paths (no clean URLs)
Disallow: /?q=admin/
Disallow: /?q=comment/reply/
Disallow: /?q=filter/tips/
Disallow: /?q=node/add/
Disallow: /?q=search/
Disallow: /?q=user/password/
Disallow: /?q=user/register/
Disallow: /?q=user/login/
Disallow: /?q=user/logout/
  &amp;lt;/p&amp;gt;
 &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is much better. Now the tree structure of the HTML page is clearly visible and we can visually separate the different elements.&lt;/p&gt;
&lt;p&gt;In particular, the structure of the page is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;page head
&lt;ul&gt;
&lt;li&gt;with ttle: &amp;ldquo;A Useful Page&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;page body
&lt;ul&gt;
&lt;li&gt;with level 1 header &amp;ldquo;An Interesting Title&amp;rdquo;&lt;/li&gt;
&lt;li&gt;a division with text &amp;ldquo;Lorem ipsum&amp;hellip;&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;How do we work with these elements? Suppose we want to recover the title and the text. The requests library has some useful functions.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Find the title
url = &#39;http://pythonscraping.com/pages/page1.html&#39;
response = requests.get(url)
soup = BeautifulSoup(response.text, &#39;lxml&#39;)
soup.find(&#39;title&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;title&amp;gt;A Useful Page&amp;lt;/title&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Extract text
soup.find(&#39;title&#39;).text
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;A Useful Page&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Find all h1 elements
soup.find_all(&#39;h1&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&amp;lt;h1&amp;gt;An Interesting Title&amp;lt;/h1&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Find all title or h1 elements
soup.find_all([&#39;title&#39;,&#39;h1&#39;])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&amp;lt;title&amp;gt;A Useful Page&amp;lt;/title&amp;gt;, &amp;lt;h1&amp;gt;An Interesting Title&amp;lt;/h1&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;regular-expressions&#34;&gt;Regular Expressions&lt;/h3&gt;
&lt;p&gt;Note that there is always a more direct alternative: using regular expressions directly on the response!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Find the title
re.findall(&#39;&amp;lt;title&amp;gt;(.*)&amp;lt;/title&amp;gt;&#39;, response.text)[0]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;A Useful Page&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Find all h1 elements
re.findall(&#39;&amp;lt;h1&amp;gt;(.*)&amp;lt;/h1&amp;gt;&#39;, response.text)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;An Interesting Title&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Find all title or h1 elements
[x[1] for x in re.findall(&#39;&amp;lt;(title|h1)&amp;gt;(.*)&amp;lt;&#39;, response.text)]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;A Useful Page&#39;, &#39;An Interesting Title&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This was a very simple page and there was not so much to look for. Let&amp;rsquo;s now look at a more realistic example.&lt;/p&gt;
&lt;h3 id=&#34;attributes&#34;&gt;Attributes&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s inspect a slightly more complicated page: &lt;a href=&#34;http://pythonscraping.com/pages/page3.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://pythonscraping.com/pages/page3.html&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In this page, there is much more content than in the previous one. There seems to be a table, there are images, hyperlinks, etc&amp;hellip; It&amp;rsquo;s the perfect playground. Let&amp;rsquo;s have a look at what does the HTML code look like.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Inspect HTML code
url2 = &#39;http://pythonscraping.com/pages/page3.html&#39;
response = requests.get(url2)
soup = BeautifulSoup(response.text,&#39;lxml&#39;)
print(soup.prettify())
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;html&amp;gt;
 &amp;lt;head&amp;gt;
  &amp;lt;style&amp;gt;
   img{
	width:75px;
}
table{
	width:50%;
}
td{
	margin:10px;
	padding:10px;
}
.wrapper{
	width:800px;
}
.excitingNote{
	font-style:italic;
	font-weight:bold;
}
  &amp;lt;/style&amp;gt;
 &amp;lt;/head&amp;gt;
 &amp;lt;body&amp;gt;
  &amp;lt;div id=&amp;quot;wrapper&amp;quot;&amp;gt;
   &amp;lt;img src=&amp;quot;../img/gifts/logo.jpg&amp;quot; style=&amp;quot;float:left;&amp;quot;/&amp;gt;
   &amp;lt;h1&amp;gt;
    Totally Normal Gifts
   &amp;lt;/h1&amp;gt;
   &amp;lt;div id=&amp;quot;content&amp;quot;&amp;gt;
    Here is a collection of totally normal, totally reasonable gifts that your friends are sure to love! Our collection is
hand-curated by well-paid, free-range Tibetan monks.
    &amp;lt;p&amp;gt;
     We haven&#39;t figured out how to make online shopping carts yet, but you can send us a check to:
     &amp;lt;br/&amp;gt;
     123 Main St.
     &amp;lt;br/&amp;gt;
     Abuja, Nigeria
We will then send your totally amazing gift, pronto! Please include an extra $5.00 for gift wrapping.
    &amp;lt;/p&amp;gt;
   &amp;lt;/div&amp;gt;
   &amp;lt;table id=&amp;quot;giftList&amp;quot;&amp;gt;
    &amp;lt;tr&amp;gt;
     &amp;lt;th&amp;gt;
      Item Title
     &amp;lt;/th&amp;gt;
     &amp;lt;th&amp;gt;
      Description
     &amp;lt;/th&amp;gt;
     &amp;lt;th&amp;gt;
      Cost
     &amp;lt;/th&amp;gt;
     &amp;lt;th&amp;gt;
      Image
     &amp;lt;/th&amp;gt;
    &amp;lt;/tr&amp;gt;
    &amp;lt;tr class=&amp;quot;gift&amp;quot; id=&amp;quot;gift1&amp;quot;&amp;gt;
     &amp;lt;td&amp;gt;
      Vegetable Basket
     &amp;lt;/td&amp;gt;
     &amp;lt;td&amp;gt;
      This vegetable basket is the perfect gift for your health conscious (or overweight) friends!
      &amp;lt;span class=&amp;quot;excitingNote&amp;quot;&amp;gt;
       Now with super-colorful bell peppers!
      &amp;lt;/span&amp;gt;
     &amp;lt;/td&amp;gt;
     &amp;lt;td&amp;gt;
      $15.00
     &amp;lt;/td&amp;gt;
     &amp;lt;td&amp;gt;
      &amp;lt;img src=&amp;quot;../img/gifts/img1.jpg&amp;quot;/&amp;gt;
     &amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
    &amp;lt;tr class=&amp;quot;gift&amp;quot; id=&amp;quot;gift2&amp;quot;&amp;gt;
     &amp;lt;td&amp;gt;
      Russian Nesting Dolls
     &amp;lt;/td&amp;gt;
     &amp;lt;td&amp;gt;
      Hand-painted by trained monkeys, these exquisite dolls are priceless! And by &amp;quot;priceless,&amp;quot; we mean &amp;quot;extremely expensive&amp;quot;!
      &amp;lt;span class=&amp;quot;excitingNote&amp;quot;&amp;gt;
       8 entire dolls per set! Octuple the presents!
      &amp;lt;/span&amp;gt;
     &amp;lt;/td&amp;gt;
     &amp;lt;td&amp;gt;
      $10,000.52
     &amp;lt;/td&amp;gt;
     &amp;lt;td&amp;gt;
      &amp;lt;img src=&amp;quot;../img/gifts/img2.jpg&amp;quot;/&amp;gt;
     &amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
    &amp;lt;tr class=&amp;quot;gift&amp;quot; id=&amp;quot;gift3&amp;quot;&amp;gt;
     &amp;lt;td&amp;gt;
      Fish Painting
     &amp;lt;/td&amp;gt;
     &amp;lt;td&amp;gt;
      If something seems fishy about this painting, it&#39;s because it&#39;s a fish!
      &amp;lt;span class=&amp;quot;excitingNote&amp;quot;&amp;gt;
       Also hand-painted by trained monkeys!
      &amp;lt;/span&amp;gt;
     &amp;lt;/td&amp;gt;
     &amp;lt;td&amp;gt;
      $10,005.00
     &amp;lt;/td&amp;gt;
     &amp;lt;td&amp;gt;
      &amp;lt;img src=&amp;quot;../img/gifts/img3.jpg&amp;quot;/&amp;gt;
     &amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
    &amp;lt;tr class=&amp;quot;gift&amp;quot; id=&amp;quot;gift4&amp;quot;&amp;gt;
     &amp;lt;td&amp;gt;
      Dead Parrot
     &amp;lt;/td&amp;gt;
     &amp;lt;td&amp;gt;
      This is an ex-parrot!
      &amp;lt;span class=&amp;quot;excitingNote&amp;quot;&amp;gt;
       Or maybe he&#39;s only resting?
      &amp;lt;/span&amp;gt;
     &amp;lt;/td&amp;gt;
     &amp;lt;td&amp;gt;
      $0.50
     &amp;lt;/td&amp;gt;
     &amp;lt;td&amp;gt;
      &amp;lt;img src=&amp;quot;../img/gifts/img4.jpg&amp;quot;/&amp;gt;
     &amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
    &amp;lt;tr class=&amp;quot;gift&amp;quot; id=&amp;quot;gift5&amp;quot;&amp;gt;
     &amp;lt;td&amp;gt;
      Mystery Box
     &amp;lt;/td&amp;gt;
     &amp;lt;td&amp;gt;
      If you love suprises, this mystery box is for you! Do not place on light-colored surfaces. May cause oil staining.
      &amp;lt;span class=&amp;quot;excitingNote&amp;quot;&amp;gt;
       Keep your friends guessing!
      &amp;lt;/span&amp;gt;
     &amp;lt;/td&amp;gt;
     &amp;lt;td&amp;gt;
      $1.50
     &amp;lt;/td&amp;gt;
     &amp;lt;td&amp;gt;
      &amp;lt;img src=&amp;quot;../img/gifts/img6.jpg&amp;quot;/&amp;gt;
     &amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
   &amp;lt;/table&amp;gt;
   &amp;lt;div id=&amp;quot;footer&amp;quot;&amp;gt;
    Â© Totally Normal Gifts, Inc.
    &amp;lt;br/&amp;gt;
    +234 (617) 863-0736
   &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
 &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As we can see, now the page is much more complicated than before. An important distintion is that now some tags have classes. For example, the first &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag now has a class &lt;code&gt;src&lt;/code&gt; and a class &lt;code&gt;style&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;img src=&amp;quot;../img/gifts/logo.jpg&amp;quot; style=&amp;quot;float:left;&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Moreover, even though &lt;code&gt;BeautifulSoup&lt;/code&gt; is formatting the page in a nicer way, it&amp;rsquo;s still pretty hard to go through it. How can one locate one specific element? And, most importantly, if you know the element only graphically, how do you recover the equivalent in the HTML code?&lt;/p&gt;
&lt;p&gt;The best way is to use the &lt;code&gt;inspect&lt;/code&gt; function from Chrome. Firefox has an equivalent function. Let&amp;rsquo;s inspect the original page.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Suppose now you want to recover all item names. Let&amp;rsquo;s inspect the first. The corresponding line looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    &amp;lt;tr class=&amp;quot;gift&amp;quot; id=&amp;quot;gift1&amp;quot;&amp;gt;
     &amp;lt;td&amp;gt;
      Vegetable Basket
     &amp;lt;/td&amp;gt;
     &amp;lt;td&amp;gt;
      This vegetable basket is the perfect gift for your health conscious (or overweight) friends!
      &amp;lt;span class=&amp;quot;excitingNote&amp;quot;&amp;gt;
       Now with super-colorful bell peppers!
      &amp;lt;/span&amp;gt;
     &amp;lt;/td&amp;gt;
     &amp;lt;td&amp;gt;
      $15.00
     &amp;lt;/td&amp;gt;
     &amp;lt;td&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;rsquo;s see some alternative ways.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Select the first td element
soup.find(&#39;td&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;td&amp;gt;
Vegetable Basket
&amp;lt;/td&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Select the first td element of the second tr element (row)
second_row = soup.find_all(&#39;tr&#39;)[1]
second_row.find(&#39;td&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;td&amp;gt;
Vegetable Basket
&amp;lt;/td&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Select the first element of the table with id=&amp;quot;giftList&amp;quot;
table = soup.find(&#39;table&#39;, {&amp;quot;id&amp;quot;:&amp;quot;giftList&amp;quot;})
table.find(&#39;td&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;td&amp;gt;
Vegetable Basket
&amp;lt;/td&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The last is the most robust way to scrape. In fact, the first two methods are likely to fail if the page gets modified. If another &lt;code&gt;td&lt;/code&gt; element gets added on top of the table, the code will recover something else entirely. In general it&amp;rsquo;s a good practice, to look if the element we want to scrape can be identified by some attribute that is likely to be invariant to changes to other parts of the web page. In this case, the table with &lt;code&gt;id=&amp;quot;giftList&amp;quot;&lt;/code&gt; is likely to be our object of interest even if another table id added, for example.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s say no we want to recover the whole table. What would you do?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd

# Shortcut
df = pd.read_html(url2)[0]
df
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Item Title&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
      &lt;th&gt;Cost&lt;/th&gt;
      &lt;th&gt;Image&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;Vegetable Basket&lt;/td&gt;
      &lt;td&gt;This vegetable basket is the perfect gift for ...&lt;/td&gt;
      &lt;td&gt;$15.00&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;Russian Nesting Dolls&lt;/td&gt;
      &lt;td&gt;Hand-painted by trained monkeys, these exquisi...&lt;/td&gt;
      &lt;td&gt;$10,000.52&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;Fish Painting&lt;/td&gt;
      &lt;td&gt;If something seems fishy about this painting, ...&lt;/td&gt;
      &lt;td&gt;$10,005.00&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;Dead Parrot&lt;/td&gt;
      &lt;td&gt;This is an ex-parrot! Or maybe he&#39;s only resting?&lt;/td&gt;
      &lt;td&gt;$0.50&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;Mystery Box&lt;/td&gt;
      &lt;td&gt;If you love suprises, this mystery box is for ...&lt;/td&gt;
      &lt;td&gt;$1.50&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Scraping with response
table = soup.find(&#39;table&#39;, {&amp;quot;id&amp;quot;:&amp;quot;giftList&amp;quot;})

# Create empty dataframe
col_names = [x.text.strip() for x in table.find_all(&#39;th&#39;)]
df = pd.DataFrame(columns=col_names)

# Loop over rows and append them to dataframe
for row in table.find_all(&#39;tr&#39;)[1:]:
    columns = [x.text.strip() for x in row.find_all(&#39;td&#39;)]
    df_row = dict(zip(col_names, columns))
    df = df.append(df_row, ignore_index=True)

df
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;/var/folders/xy/szm3b7211cj16ldwcywbvfzdqv7yhd/T/ipykernel_92159/3999490009.py:12: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  df = df.append(df_row, ignore_index=True)
/var/folders/xy/szm3b7211cj16ldwcywbvfzdqv7yhd/T/ipykernel_92159/3999490009.py:12: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  df = df.append(df_row, ignore_index=True)
/var/folders/xy/szm3b7211cj16ldwcywbvfzdqv7yhd/T/ipykernel_92159/3999490009.py:12: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  df = df.append(df_row, ignore_index=True)
/var/folders/xy/szm3b7211cj16ldwcywbvfzdqv7yhd/T/ipykernel_92159/3999490009.py:12: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  df = df.append(df_row, ignore_index=True)
/var/folders/xy/szm3b7211cj16ldwcywbvfzdqv7yhd/T/ipykernel_92159/3999490009.py:12: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  df = df.append(df_row, ignore_index=True)
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Item Title&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
      &lt;th&gt;Cost&lt;/th&gt;
      &lt;th&gt;Image&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;Vegetable Basket&lt;/td&gt;
      &lt;td&gt;This vegetable basket is the perfect gift for ...&lt;/td&gt;
      &lt;td&gt;$15.00&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;Russian Nesting Dolls&lt;/td&gt;
      &lt;td&gt;Hand-painted by trained monkeys, these exquisi...&lt;/td&gt;
      &lt;td&gt;$10,000.52&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;Fish Painting&lt;/td&gt;
      &lt;td&gt;If something seems fishy about this painting, ...&lt;/td&gt;
      &lt;td&gt;$10,005.00&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;Dead Parrot&lt;/td&gt;
      &lt;td&gt;This is an ex-parrot! Or maybe he&#39;s only resting?&lt;/td&gt;
      &lt;td&gt;$0.50&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;Mystery Box&lt;/td&gt;
      &lt;td&gt;If you love suprises, this mystery box is for ...&lt;/td&gt;
      &lt;td&gt;$1.50&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Compact alternative
table = soup.find(&#39;table&#39;, {&amp;quot;id&amp;quot;:&amp;quot;giftList&amp;quot;})
content = [[x.text.strip() for x in row.find_all([&#39;th&#39;,&#39;td&#39;])] for row in table.find_all(&#39;tr&#39;)]
df = pd.DataFrame(content[1:], columns=content[0])

df
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Item Title&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
      &lt;th&gt;Cost&lt;/th&gt;
      &lt;th&gt;Image&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;Vegetable Basket&lt;/td&gt;
      &lt;td&gt;This vegetable basket is the perfect gift for ...&lt;/td&gt;
      &lt;td&gt;$15.00&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;Russian Nesting Dolls&lt;/td&gt;
      &lt;td&gt;Hand-painted by trained monkeys, these exquisi...&lt;/td&gt;
      &lt;td&gt;$10,000.52&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;Fish Painting&lt;/td&gt;
      &lt;td&gt;If something seems fishy about this painting, ...&lt;/td&gt;
      &lt;td&gt;$10,005.00&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;Dead Parrot&lt;/td&gt;
      &lt;td&gt;This is an ex-parrot! Or maybe he&#39;s only resting?&lt;/td&gt;
      &lt;td&gt;$0.50&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;Mystery Box&lt;/td&gt;
      &lt;td&gt;If you love suprises, this mystery box is for ...&lt;/td&gt;
      &lt;td&gt;$1.50&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;We have now seen how to scrape a simple but realistic webpage. Let&amp;rsquo;s proceed with a practical example.&lt;/p&gt;
&lt;h3 id=&#34;css-selectors&#34;&gt;CSS Selectors&lt;/h3&gt;
&lt;p&gt;One alternative way of doing exactly the same thing is to use &lt;code&gt;select&lt;/code&gt;. The &lt;code&gt;select&lt;/code&gt; function is very similar to &lt;code&gt;find_all&lt;/code&gt; but has a different syntax. In particular, to search an element with a certain &lt;code&gt;tag&lt;/code&gt; and &lt;code&gt; attribute&lt;/code&gt;, we have to pass the following input:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;soup.select(tag[attribute=&amp;quot;attribute_name&amp;quot;])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Select the first element of the table whose id contains &amp;quot;List&amp;quot;
table = soup.select(&#39;table[id*=&amp;quot;List&amp;quot;]&#39;)[0]
table.find(&#39;td&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;td&amp;gt;
Vegetable Basket
&amp;lt;/td&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;forms-and-post-requests&#34;&gt;Forms and post requests&lt;/h3&gt;
&lt;p&gt;When you are scraping, you sometimes have to fill-in forms, either to log-in into an account, or to input the arguments for a search query. Often forms are dynamic objects, but not always. Sometimes we can fill in forms also using the &lt;code&gt;requests&lt;/code&gt; library. In whis section we see a simple example.&lt;/p&gt;
&lt;h4 id=&#34;shortcut&#34;&gt;Shortcut&lt;/h4&gt;
&lt;p&gt;Often we can bypass forms, if the form redirects us to another page whose URL contains the parameters of the form. These are &amp;ldquo;well-behaved&amp;rdquo; forms and are actually quite frequent.&lt;/p&gt;
&lt;p&gt;We can find a simple example at: &lt;a href=&#34;http://www.webscrapingfordatascience.com/basicform/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://www.webscrapingfordatascience.com/basicform/&lt;/a&gt;. This form takes as input a bunch of information and when we click on &amp;ldquo;&lt;em&gt;Submit my information&lt;/em&gt;&amp;rdquo;, we get exactly the same page but with a different URL that contains the information we have inserted.&lt;/p&gt;
&lt;p&gt;Suppose I insert the following information:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Your gender: &amp;ldquo;Male&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Food you like: &amp;ldquo;Pizza!&amp;rdquo; and &amp;ldquo;Fries please&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We should get the following url: &lt;a href=&#34;http://www.webscrapingfordatascience.com/basicform/?name=&amp;amp;gender=M&amp;amp;pizza=like&amp;amp;fries=like&amp;amp;haircolor=black&amp;amp;comments=&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://www.webscrapingfordatascience.com/basicform/?name=&amp;gender=M&amp;pizza=like&amp;fries=like&amp;haircolor=black&amp;comments=&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We can decompose the url in various components, separated by one &amp;ldquo;?&amp;rdquo; and multiple &amp;ldquo;&amp;amp;&amp;quot;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.webscrapingfordatascience.com/basicform/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://www.webscrapingfordatascience.com/basicform/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;name=&lt;/li&gt;
&lt;li&gt;gender=M&lt;/li&gt;
&lt;li&gt;pizza=like&lt;/li&gt;
&lt;li&gt;fries=like&lt;/li&gt;
&lt;li&gt;haircolor=black&lt;/li&gt;
&lt;li&gt;comments=&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can clearly see a pattern: the first component is the cose of the url and the other components are the form options. The ones we didn&amp;rsquo;t fill have the form &lt;code&gt;option=&lt;/code&gt; while the ones we did fill are &lt;code&gt;option=value&lt;/code&gt;. Knowing the syntax of a particular form we could fill it ourselves.&lt;/p&gt;
&lt;p&gt;For example, we could remove the fries and change the hair color to &lt;em&gt;brown&lt;/em&gt;: &lt;a href=&#34;http://www.webscrapingfordatascience.com/basicform/?name=&amp;amp;gender=M&amp;amp;pizza=like&amp;amp;fries=&amp;amp;haircolor=brown&amp;amp;comments=&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://www.webscrapingfordatascience.com/basicform/?name=&amp;gender=M&amp;pizza=like&amp;fries=&amp;haircolor=brown&amp;comments=&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Moreover, most forms work even if you remove the empty options. For example, the url above is equivalent to:http://www.webscrapingfordatascience.com/basicform/?gender=M&amp;amp;pizza=like&amp;amp;haircolor=brown&amp;amp;comments=&lt;/p&gt;
&lt;p&gt;One way to scrape websites with such forms is to create a string with the url with all the empty options and fill them using string formatting functions.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Building form url
url_core = &#39;http://www.webscrapingfordatascience.com/basicform/?&#39;
url_options = &#39;name=%s&amp;amp;gender=%s&amp;amp;pizza=%s&amp;amp;fries=%s&amp;amp;haircolor=%s&amp;amp;comments=%s&#39;
options = (&#39;&#39;,&#39;M&#39;,&#39;like&#39;,&#39;&#39;,&#39;brown&#39;,&#39;&#39;)
url = url_core + url_options % options

print(url)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;http://www.webscrapingfordatascience.com/basicform/?name=&amp;amp;gender=M&amp;amp;pizza=like&amp;amp;fries=&amp;amp;haircolor=brown&amp;amp;comments=
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;An alternative way is to name the options. This alternative is more verbose but more precise and does not require you to provide always all the options, even if empty.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Alternative 1
url_core = &#39;http://www.webscrapingfordatascience.com/basicform/?&#39;
url_options = &#39;name={name}&amp;amp;gender={gender}&amp;amp;pizza={pizza}&amp;amp;fries={fries}&amp;amp;haircolor={haircolor}&amp;amp;comments={comments}&#39;
options = {
    &#39;name&#39;: &#39;&#39;,
    &#39;gender&#39;: &#39;M&#39;,
    &#39;pizza&#39;: &#39;like&#39;,
    &#39;fries&#39;: &#39;&#39;,
    &#39;haircolor&#39;: &#39;brown&#39;,
    &#39;comments&#39;: &#39;&#39;
    }
url = url_core + url_options.format(**options)

print(url)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;http://www.webscrapingfordatascience.com/basicform/?name=&amp;amp;gender=M&amp;amp;pizza=like&amp;amp;fries=&amp;amp;haircolor=brown&amp;amp;comments=
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lastly, one could build the url on the go.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Alternative 2
url = &#39;http://www.webscrapingfordatascience.com/basicform/?&#39;
options = {
    &#39;gender&#39;: &#39;M&#39;,
    &#39;pizza&#39;: &#39;like&#39;,
    &#39;haircolor&#39;: &#39;brown&#39;,
    }
for key, value in options.items():
    url += key + &#39;=&#39; + value + &#39;&amp;amp;&#39;

print(url)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;http://www.webscrapingfordatascience.com/basicform/?gender=M&amp;amp;pizza=like&amp;amp;haircolor=brown&amp;amp;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;post-forms&#34;&gt;Post forms&lt;/h4&gt;
&lt;p&gt;Sometimes however, forms do not provide nice URLs as output. This is particularly true for login forms. There is however still a method, for some of them, to deal with them.&lt;/p&gt;
&lt;p&gt;For this section, we will use the same form example as before: &lt;a href=&#34;http://www.webscrapingfordatascience.com/postform2/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://www.webscrapingfordatascience.com/postform2/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This looks like the same form but now when the user clicks on &amp;ldquo;&lt;em&gt;Submit my information&lt;/em&gt;&amp;rdquo;, we get a page with a summary of the information. The biggest difference however, is that the output URL is exactly the same. Hence, we cannot rely on the same URL-bulding strategy as before.&lt;/p&gt;
&lt;p&gt;If we inspect the page, we observe the following line at the very beginning&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;form method=&amp;quot;POST&amp;quot;&amp;gt;
[...]
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And inside there are various input fields:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;input type=&amp;quot;text&amp;quot;&amp;gt;&lt;/code&gt; for name&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;input type=&amp;quot;radio&amp;quot;&amp;gt;&lt;/code&gt; for gender&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;input type=&amp;quot;checkbox&amp;quot;&amp;gt;&lt;/code&gt; for food&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;select&amp;gt;...&amp;lt;/select&amp;gt;&lt;/code&gt; for the hair color&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;textarea&amp;gt;...&amp;lt;/textarea&amp;gt;&lt;/code&gt; for comments&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These are all fields with which we can interact using the &lt;code&gt;response&lt;/code&gt; package. The main difference is that we won&amp;rsquo;t use the &lt;code&gt;get&lt;/code&gt; method to get the response from the URL but we will use the &lt;code&gt;post&lt;/code&gt; method to post our form parameters and get a response.&lt;/p&gt;
&lt;p&gt;If we input the following options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;gender&lt;/em&gt;: male&lt;/li&gt;
&lt;li&gt;&lt;em&gt;pizza&lt;/em&gt;: yes&lt;/li&gt;
&lt;li&gt;&lt;em&gt;hair color&lt;/em&gt;: brown hair&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and we click &amp;ldquo;&lt;em&gt;Submit my information&lt;/em&gt;&amp;rdquo; we get to a page with the following text:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Thanks for submitting your information
Here&#39;s a dump of the form data that was submitted:

array(5) {
  [&amp;quot;name&amp;quot;]=&amp;gt;
  string(0) &amp;quot;&amp;quot;
  [&amp;quot;gender&amp;quot;]=&amp;gt;
  string(1) &amp;quot;M&amp;quot;
  [&amp;quot;pizza&amp;quot;]=&amp;gt;
  string(4) &amp;quot;like&amp;quot;
  [&amp;quot;haircolor&amp;quot;]=&amp;gt;
  string(5) &amp;quot;brown&amp;quot;
  [&amp;quot;comments&amp;quot;]=&amp;gt;
  string(0) &amp;quot;&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We will not try to get to the same page using the &lt;code&gt;requests&lt;/code&gt; package.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# URL
url = &#39;http://www.webscrapingfordatascience.com/postform2/&#39;

# Options
options = {
    &#39;gender&#39;: &#39;M&#39;,
    &#39;pizza&#39;: &#39;like&#39;,
    &#39;haircolor&#39;: &#39;brown&#39;,
    }

# Post request
response = requests.post(url, data=options)
print(response.text)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;html&amp;gt;
	&amp;lt;body&amp;gt;


&amp;lt;h2&amp;gt;Thanks for submitting your information&amp;lt;/h2&amp;gt;

&amp;lt;p&amp;gt;Here&#39;s a dump of the form data that was submitted:&amp;lt;/p&amp;gt;

&amp;lt;pre&amp;gt;array(3) {
  [&amp;quot;gender&amp;quot;]=&amp;gt;
  string(1) &amp;quot;M&amp;quot;
  [&amp;quot;pizza&amp;quot;]=&amp;gt;
  string(4) &amp;quot;like&amp;quot;
  [&amp;quot;haircolor&amp;quot;]=&amp;gt;
  string(5) &amp;quot;brown&amp;quot;
}
&amp;lt;/pre&amp;gt;


	&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We have obtained exactly what we wanted! However, sometimes, websites block direct &lt;code&gt;post&lt;/code&gt; requests.&lt;/p&gt;
&lt;p&gt;One simple example is: &lt;a href=&#34;http://www.webscrapingfordatascience.com/postform3/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://www.webscrapingfordatascience.com/postform3/&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Post request
url = &#39;http://www.webscrapingfordatascience.com/postform3/&#39;
response = requests.post(url, data=options)
print(response.text)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;html&amp;gt;
	&amp;lt;body&amp;gt;


Are you trying to submit information from somewhere else?

	&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What happened? If we inspect the page, we can see that there is a new line at the beginning:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;protection&amp;quot; value=&amp;quot;2c17abf5d5b4e326bea802600ff88405&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now the form contains one more value - &lt;em&gt;protection&lt;/em&gt; which is conventiently hidden. In order to bypass the protection, we need to provide the correct &lt;em&gt;protection&lt;/em&gt; value to the form.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Post request
url = &#39;http://www.webscrapingfordatascience.com/postform3/&#39;
response = requests.get(url)

# Get out the value for protection
soup = BeautifulSoup(response.text, &#39;lxml&#39;)
options[&#39;protection&#39;] = soup.find(&#39;input&#39;, attrs={&#39;name&#39;: &#39;protection&#39;}).get(&#39;value&#39;)

# Post request
response = requests.post(url, data=options)
print(response.text)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;html&amp;gt;
	&amp;lt;body&amp;gt;



&amp;lt;h2&amp;gt;Thanks for submitting your information&amp;lt;/h2&amp;gt;

&amp;lt;p&amp;gt;Here&#39;s a dump of the form data that was submitted:&amp;lt;/p&amp;gt;

&amp;lt;pre&amp;gt;array(4) {
  [&amp;quot;gender&amp;quot;]=&amp;gt;
  string(1) &amp;quot;M&amp;quot;
  [&amp;quot;pizza&amp;quot;]=&amp;gt;
  string(4) &amp;quot;like&amp;quot;
  [&amp;quot;haircolor&amp;quot;]=&amp;gt;
  string(5) &amp;quot;brown&amp;quot;
  [&amp;quot;protection&amp;quot;]=&amp;gt;
  string(32) &amp;quot;16c87fc858e4d9fcb8d9c920b699388d&amp;quot;
}
&amp;lt;/pre&amp;gt;



	&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Indeed, now the post request was successful.&lt;/p&gt;
&lt;h3 id=&#34;proxies&#34;&gt;Proxies&lt;/h3&gt;
&lt;p&gt;We have discussed at the beginning how to be more subtle while scraping, by changing headers. In this section we will explore one step forward in anonimity: proxies.&lt;/p&gt;
&lt;p&gt;When we send an HTTP request, first the request is sent to a proxy server. The important thing is that the destination web server will which is the origin proxy server. Therefore, when one destination web server sees too many requests coming from one machine, it will block the proxy server.&lt;/p&gt;
&lt;p&gt;How can we change proxy? There are many websites that offer proxies for money but there are also some that offer proxies for free. The problem with free proxies (but often also with premium ones) is that there are many users using the same proxy, hence they are&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;slow&lt;/li&gt;
&lt;li&gt;blocked fast by many websites&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Nevertheless, it might be still useful to know how to change proxies.&lt;/p&gt;
&lt;h4 id=&#34;get-proxy-list&#34;&gt;Get proxy list&lt;/h4&gt;
&lt;p&gt;One website where we can get some free proxies to use for scraping is &lt;a href=&#34;https://free-proxy-list.net/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://free-proxy-list.net/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If we open the page, we see that there is a long list of proxies, from different countries and with different characteristics. Importantly, we are mostly interested in &lt;em&gt;https&lt;/em&gt; proxies. We are now going to retrieve a list of them. Note that the proxy list of this website is updated quite often. However, free proxies usually &amp;ldquo;expire&amp;rdquo; even faster.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Retrieve proxy list
def get_proxies():
    response = requests.get(&#39;https://free-proxy-list.net/&#39;)
    soup = BeautifulSoup(response.text, &#39;lxml&#39;)
    table = soup.find(&#39;table&#39;, {&#39;class&#39;:&#39;table&#39;})
    proxies = []
    rows = table.find_all(&#39;tr&#39;)
    for row in rows:
        cols = row.find_all(&#39;td&#39;)
        if len(cols)&amp;gt;0:
            line = [col.text for col in cols]
            if line[6]==&#39;yes&#39;:
                proxies += [line[0]+&#39;:&#39;+line[1]]
    return proxies
            
len(get_proxies())
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;176
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We have found many proxies. How do we use them? We have to provide them as an argment to a &lt;code&gt;requests&lt;/code&gt; session.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Test proxies
url = &#39;https://www.google.com&#39;
proxies = get_proxies()

for proxy in proxies[:10]:
    try:
        response = session.get(url, proxies={&amp;quot;https&amp;quot;: proxy}, timeout=5)
        print(response)
    except Exception as e:
        print(type(e))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;class &#39;NameError&#39;&amp;gt;
&amp;lt;class &#39;NameError&#39;&amp;gt;
&amp;lt;class &#39;NameError&#39;&amp;gt;
&amp;lt;class &#39;NameError&#39;&amp;gt;
&amp;lt;class &#39;NameError&#39;&amp;gt;
&amp;lt;class &#39;NameError&#39;&amp;gt;
&amp;lt;class &#39;NameError&#39;&amp;gt;
&amp;lt;class &#39;NameError&#39;&amp;gt;
&amp;lt;class &#39;NameError&#39;&amp;gt;
&amp;lt;class &#39;NameError&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Yes, most proxies were extremely slow (and consider we are opening &lt;em&gt;Google&lt;/em&gt;&amp;hellip;) and we got a &lt;code&gt;ConnetTimeout&lt;/code&gt; error. Other proxies worked and for one or two of the others we might have got  a &lt;code&gt;ProxyError&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;dynamic-webscraping&#34;&gt;Dynamic Webscraping&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s try to scrape the quotes from this link: &lt;a href=&#34;http://www.webscrapingfordatascience.com/simplejavascript/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://www.webscrapingfordatascience.com/simplejavascript/&lt;/a&gt;. It seems like a straightforward job.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Scrape javascript page
url = &#39;http://www.webscrapingfordatascience.com/simplejavascript/&#39;
response = requests.get(url)
print(response.text)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;html&amp;gt;

&amp;lt;head&amp;gt;
	&amp;lt;script src=&amp;quot;https://code.jquery.com/jquery-3.2.1.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
	&amp;lt;script&amp;gt;
	$(function() {
	document.cookie = &amp;quot;jsenabled=1&amp;quot;;
	$.getJSON(&amp;quot;quotes.php&amp;quot;, function(data) {
		var items = [];
		$.each(data, function(key, val) {
			items.push(&amp;quot;&amp;lt;li id=&#39;&amp;quot; + key + &amp;quot;&#39;&amp;gt;&amp;quot; + val + &amp;quot;&amp;lt;/li&amp;gt;&amp;quot;);
		});
		$(&amp;quot;&amp;lt;ul/&amp;gt;&amp;quot;, {
			html: items.join(&amp;quot;&amp;quot;)
			}).appendTo(&amp;quot;body&amp;quot;);
		});
	});
	&amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body&amp;gt;

&amp;lt;h1&amp;gt;Here are some quotes&amp;lt;/h1&amp;gt;

&amp;lt;/body&amp;gt;

&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Weird. Our response does not contain the quotes on the page, even though they are clearly visible when we open it in our browser.&lt;/p&gt;
&lt;h3 id=&#34;selenium&#34;&gt;Selenium&lt;/h3&gt;
&lt;p&gt;Selenium is a python library that emulates a browser and lets us see pages exactly as with a normal browser. This is the most user-friendly way to do web scraping, however it has a huge cost: speed. This is by far the slowest way to do web scraping.&lt;/p&gt;
&lt;p&gt;After installing &lt;code&gt;selenium&lt;/code&gt;, we need to download a browser to simulate. We will use Google&amp;rsquo;s chromedriver. You can download it from here: &lt;a href=&#34;https://sites.google.com/a/chromium.org/chromedriver/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://sites.google.com/a/chromium.org/chromedriver/&lt;/a&gt;. Make sure to select &amp;ldquo;&lt;strong&gt;latest stable release&lt;/strong&gt;&amp;rdquo; and not &amp;ldquo;latest beta release&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Move the downloaded &lt;code&gt;chromedriver&lt;/code&gt; in the current directory (&amp;quot;&lt;em&gt;/11-python-webscraping&lt;/em&gt;&amp;rdquo; for me). We will now try open the url above with selenium and see if we can scrape the quotes in it.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Set your chromedriver name
chromedriver_name = &#39;/chromedriver_mac&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Open url
path = os.getcwd()
print(path)
driver = webdriver.Chrome(path+chromedriver_name)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;/Users/mcourt/Dropbox/Projects/Data-Science-Python/notebooks


/var/folders/xy/szm3b7211cj16ldwcywbvfzdqv7yhd/T/ipykernel_92159/2846782857.py:4: DeprecationWarning: executable_path has been deprecated, please pass in a Service object
  driver = webdriver.Chrome(path+chromedriver_name)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Awesome! Now, if everything went smooth, you should have a new Chrome window with a banner that says &amp;ldquo;&lt;em&gt;Chrome is being controlled by automated test software&lt;/em&gt;&amp;rdquo;. We can now open the web page and check that the list appears.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Open url
url = &#39;http://www.webscrapingfordatascience.com/simplejavascript/&#39;
driver.get(url)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Again, if averything went well, we are now abl to see our page with all the quotes in it. How do we scrape them?&lt;/p&gt;
&lt;p&gt;If we inspect the elements of the list with the right-click &lt;code&gt;inspect&lt;/code&gt; option, we should see something like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;
	&amp;lt;script src=&amp;quot;https://code.jquery.com/jquery-3.2.1.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
	&amp;lt;script&amp;gt;
	$(function() {
	document.cookie = &amp;quot;jsenabled=1&amp;quot;;
	$.getJSON(&amp;quot;quotes.php&amp;quot;, function(data) {
		var items = [];
		$.each(data, function(key, val) {
			items.push(&amp;quot;&amp;lt;li id=&#39;&amp;quot; + key + &amp;quot;&#39;&amp;gt;&amp;quot; + val + &amp;quot;&amp;lt;/li&amp;gt;&amp;quot;);
		});
		$(&amp;quot;&amp;lt;ul/&amp;gt;&amp;quot;, {
			html: items.join(&amp;quot;&amp;quot;)
			}).appendTo(&amp;quot;body&amp;quot;);
		});
	});
	&amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body&amp;gt;

&amp;lt;h1&amp;gt;Here are some quotes&amp;lt;/h1&amp;gt;




&amp;lt;ul&amp;gt;&amp;lt;li id=&amp;quot;0&amp;quot;&amp;gt;Every strike brings me closer to the next home run. âBabe Ruth&amp;lt;/li&amp;gt;&amp;lt;li id=&amp;quot;1&amp;quot;&amp;gt;The two most important days in your life are the day you are born and the day you find out why. âMark Twain&amp;lt;/li&amp;gt;&amp;lt;li id=&amp;quot;2&amp;quot;&amp;gt;Whatever you can do, or dream you can, begin it.  Boldness has genius, power and magic in it. âJohann Wolfgang von Goethe&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can see the content! Can we actually retrieve it? Let&amp;rsquo;s try.&lt;/p&gt;
&lt;p&gt;The most common selenium functions to get elements of a page, have a very intuitive syntax and are:
find_element_by_id&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;find_element_by_name&lt;/li&gt;
&lt;li&gt;find_element_by_xpath&lt;/li&gt;
&lt;li&gt;find_element_by_link_text&lt;/li&gt;
&lt;li&gt;find_element_by_partial_link_text&lt;/li&gt;
&lt;li&gt;find_element_by_tag_name&lt;/li&gt;
&lt;li&gt;find_element_by_class_name&lt;/li&gt;
&lt;li&gt;find_element_by_css_selector&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We will not try to recover all elements with tag &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; (element of list &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt;).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Scrape content
quotes = [li.text for li in driver.find_elements_by_tag_name(&#39;li&#39;)]
quotes
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;/var/folders/xy/szm3b7211cj16ldwcywbvfzdqv7yhd/T/ipykernel_92159/157107938.py:2: DeprecationWarning: find_elements_by_* commands are deprecated. Please use find_elements() instead
  quotes = [li.text for li in driver.find_elements_by_tag_name(&#39;li&#39;)]





[]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Yes! It worked! But why?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Headless option
headless_option = webdriver.ChromeOptions()
headless_option.add_argument(&#39;--headless&#39;)

# Scraping
driver = webdriver.Chrome(path+chromedriver_name, options=headless_option)
driver.get(url)
quotes = [li.text for li in driver.find_elements_by_tag_name(&#39;li&#39;)]
quotes
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;/var/folders/xy/szm3b7211cj16ldwcywbvfzdqv7yhd/T/ipykernel_92159/2173692453.py:6: DeprecationWarning: executable_path has been deprecated, please pass in a Service object
  driver = webdriver.Chrome(path+chromedriver_name, options=headless_option)
/var/folders/xy/szm3b7211cj16ldwcywbvfzdqv7yhd/T/ipykernel_92159/2173692453.py:8: DeprecationWarning: find_elements_by_* commands are deprecated. Please use find_elements() instead
  quotes = [li.text for li in driver.find_elements_by_tag_name(&#39;li&#39;)]





[]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Mmm, it (probably) didn&amp;rsquo;t work. Why?&lt;/p&gt;
&lt;p&gt;The problem is that we are trying to retrieve the content of the page too fast. The page hasn&amp;rsquo;t loaded yet. This is a common issue with &lt;code&gt;selenium&lt;/code&gt;. Where are two ways to solve it:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;waiting&lt;/li&gt;
&lt;li&gt;waiting for the element to load&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The second way is the best way but we will first try the first and simpler one: we will just ask the browser to wait for 1 second before searching for &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; tags&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Scraping
driver = webdriver.Chrome(path+chromedriver_name, options=headless_option)
driver.get(url)
time.sleep(1)
quotes = [li.text for li in driver.find_elements_by_tag_name(&#39;li&#39;)]
quotes
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;/var/folders/xy/szm3b7211cj16ldwcywbvfzdqv7yhd/T/ipykernel_92159/2964398594.py:2: DeprecationWarning: executable_path has been deprecated, please pass in a Service object
  driver = webdriver.Chrome(path+chromedriver_name, options=headless_option)
/var/folders/xy/szm3b7211cj16ldwcywbvfzdqv7yhd/T/ipykernel_92159/2964398594.py:5: DeprecationWarning: find_elements_by_* commands are deprecated. Please use find_elements() instead
  quotes = [li.text for li in driver.find_elements_by_tag_name(&#39;li&#39;)]





[&#39;The best time to plant a tree was 20 years ago. The second best time is now. âChinese Proverb&#39;,
 &#39;The most common way people give up their power is by thinking they donât have any. âAlice Walker&#39;,
 &#39;I am not a product of my circumstances. I am a product of my decisions. âStephen Covey&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nice! Now you should have obtained the list that we could not scrape with &lt;code&gt;requests&lt;/code&gt;. If it didn&amp;rsquo;t work, just increase the waiting time and it should work.&lt;/p&gt;
&lt;p&gt;We can now have a look at the &amp;ldquo;better&amp;rdquo; way to use a series of built-in functions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;WebDriverWait&lt;/code&gt;: the waiting function. We will call the &lt;code&gt;until&lt;/code&gt; method&lt;/li&gt;
&lt;li&gt;&lt;code&gt;expected_conditions&lt;/code&gt;: the condition function. We will call the &lt;code&gt;visibility_of_all_elements_located&lt;/code&gt; method&lt;/li&gt;
&lt;li&gt;&lt;code&gt;By&lt;/code&gt;: the selector function. Some of the options are:
&lt;ul&gt;
&lt;li&gt;By.ID&lt;/li&gt;
&lt;li&gt;By.XPATH&lt;/li&gt;
&lt;li&gt;By.NAME&lt;/li&gt;
&lt;li&gt;By.TAG_NAME&lt;/li&gt;
&lt;li&gt;By.CLASS_NAME&lt;/li&gt;
&lt;li&gt;By.CSS_SELECTOR&lt;/li&gt;
&lt;li&gt;By.LINK_TEXT&lt;/li&gt;
&lt;li&gt;By.PARTIAL_LINK_TEXT&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

# Scraping
driver = webdriver.Chrome(path+chromedriver_name, options=headless_option)
driver.get(url)
quotes = WebDriverWait(driver, 10).until(EC.visibility_of_all_elements_located((By.TAG_NAME, &#39;li&#39;)))
quotes = [quote.text for quote in quotes]
quotes
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;/var/folders/xy/szm3b7211cj16ldwcywbvfzdqv7yhd/T/ipykernel_92159/152412441.py:6: DeprecationWarning: executable_path has been deprecated, please pass in a Service object
  driver = webdriver.Chrome(path+chromedriver_name, options=headless_option)





[&#39;The most common way people give up their power is by thinking they donât have any. âAlice Walker&#39;,
 &#39;The best time to plant a tree was 20 years ago. The second best time is now. âChinese Proverb&#39;,
 &#39;An unexamined life is not worth living. âSocrates&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this case, we have told the browser to wait until either all elements with tag &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; are visible or 10 seconds have passed. After one condition is realized, the &lt;code&gt;WebDriverWait&lt;/code&gt; function also automatically retrieves all the elements which the &lt;code&gt;expected_condition&lt;/code&gt; function is conditioning on. There are many different conditions we can use. A list can be found here: &lt;a href=&#34;https://selenium-python.readthedocs.io/waits.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://selenium-python.readthedocs.io/waits.html&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We can easily generalize the function above as follows.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Find element function
def find_elements(driver, function, identifier):
    element = WebDriverWait(driver, 10).until(EC.visibility_of_all_elements_located((function, identifier)))
    return element

quotes = [quote.text for quote in find_elements(driver, By.TAG_NAME, &#39;li&#39;)]
quotes
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;The most common way people give up their power is by thinking they donât have any. âAlice Walker&#39;,
 &#39;The best time to plant a tree was 20 years ago. The second best time is now. âChinese Proverb&#39;,
 &#39;An unexamined life is not worth living. âSocrates&#39;]
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
